# Adult Dataset {#sec-adult-dataset}

::: callout-note

## Objectives

In this chapter, we extend the analysis from the previous part to the Adult Income dataset from the [UCI Machine Learning Repository](https://archive.ics.uci.edu/dataset/2/adult). We use a cleaned version of this dataset available in the {[fairadapt](https://github.com/dplecko/fairadapt)} R package.

:::

```{r setup, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: Required packages and definition of colours.

# Required packages----
library(tidyverse)
library(devtools)

# Graphs----
font_main = font_title = 'Times New Roman'
extrafont::loadfonts(quiet = T)
face_text='plain'
face_title='plain'
size_title = 14
size_text = 11
legend_size = 11

global_theme <- function() {
  theme_minimal() %+replace%
    theme(
      text = element_text(family = font_main, size = size_text, face = face_text),
      legend.text = element_text(family = font_main, size = legend_size),
      axis.text = element_text(size = size_text, face = face_text), 
      plot.title = element_text(
        family = font_title, 
        size = size_title, 
        hjust = 0.5
      ),
      plot.subtitle = element_text(hjust = 0.5)
    )
}

# Seed
set.seed(2025)

colours_all <- c(
  "factual" = "black",
  "source" = "#00A08A",
  "reference" = "#F2AD00",
  "naive" = "gray",
  "ot" = "#0072B2",
  "fairadapt" = '#D55E00',
  "seq" = "#CC79A7"
)
```

```{r}
load_all("../seqtransfairness/")
```


The adult dataset contains information that allow to predict whether a person's income (Y) is over $50,000 a year. We will use gender as the protected binary variable here (S). Other characteristics such as the age, the native country, the marital status and so on will be used. Note that unlike previously, the set of covariates includes both numerical and categorical variables.


```{r define-vars}
vars <- c(
  "sex", "age", "native_country", "marital_status", "education_num",
  "workclass", "hours_per_week", "occupation", "income"
)
s <- "sex"
y <- "income"
```

The data can be loaded as follows:

```{r adult-dataset}
library(fairadapt)
# reading in the UCI Adult data
adult <- readRDS(
  system.file("extdata", "uci_adult.rds", package = "fairadapt")
) |>
  as_tibble() |> 
  select(!!vars)
```

We can have a quick glance at the proportion of women and men among people who earn more, or less, than $50k a year.
```{r show-prop-gender-income}
adult |> count(income, sex) |> 
  group_by(income) |> 
  mutate(pct_gender = round(100* n / sum(n), 2))
```

We will assume the same causal graph as in @plevcko2020fair (Figure 4, p. 27).

```{r}
# Adjacency matrix
adj_mat <- c(
  0, 0, 0, 1, 1, 1, 1, 1, 1, # sex
  0, 0, 0, 1, 1, 1, 1, 1, 1, # age
  0, 0, 0, 1, 1, 1, 1, 1, 1, # native_country
  0, 0, 0, 0, 1, 1, 1, 1, 1, # marital_status
  0, 0, 0, 0, 0, 1, 1, 1, 1, # education_num
  0, 0, 0, 0, 0, 0, 0, 0, 1, # workclass
  0, 0, 0, 0, 0, 0, 0, 0, 1, # hours_per_week
  0, 0, 0, 0, 0, 0, 0, 0, 1, # occupation
  0, 0, 0, 0, 0, 0, 0, 0, 0  # income
) |> matrix(
  nrow = length(vars), ncol = length(vars),
  dimnames = list(vars, vars), byrow = TRUE
)
```

```{r}
#| fig-cap: "Assumed Causal Graph"
#| label: fig-causal-graph-adult
causal_graph <- fairadapt::graphModel(adj_mat)
plot(causal_graph)
```

We can visualize this causal graph with a prettier representation, using a tikz picture.

```{r}
#| code-fold: true
#| code-summary: Codes to create Tikz from an adjacency matrix.
#' Add a tikz graph in a quarto HTML document
#'
#' @param tikz_code Tikz code.
add_tikz_graph <- function(tikz_code,
                           label,
                           caption = "Causal Graph",
                           echo = "true",
                           code_fold = "true",
                           fig_ext = "png",
                           code_summary = "Tikz code") {
  
  res <- knitr::knit_child(
    text = glue::glue(r"(
             ```{{tikz}}
             #| echo: {echo}
             #| label: {label}
             #| fig-cap: {caption}
             #| fig-ext: {fig_ext}
             #| code-fold: {code_fold}
             #| code-summary: {code_summary}
             \usetikzlibrary{{arrows}}
             {tikz_code}
             ```)"
    ),
    quiet = TRUE
  )
  knitr::asis_output(res)
}

colour_nodes <- c(
  "sex" = "red!30",
  "age" = "yellow!60", 
  "native_country" = "yellow!60", 
  "marital_status" = "yellow!60", 
  "education_num" = "yellow!60", 
  "workclass" = "yellow!60", 
  "hours_per_week" = "yellow!60", 
  "occupation" = "yellow!60", 
  "income" = "blue!30"
)

# Then, in the document:
# `r add_tikz_graph(tikz_code = causal_graph_tikz(adj_mat,colour_nodes), label = "fig-causal-graph-adult-2", caption = "\"Assumed Causal Graph\"", echo = "true")`
```

`r add_tikz_graph(tikz_code = causal_graph_tikz(adj_mat,colour_nodes), label = "fig-causal-graph-adult-2", caption = "\"Assumed Causal Graph\"", echo = "true")`



## Classifier

We load functions defined in our small package (notably, `split_dataset()`{.R}):

```{r}
library(devtools)
load_all("../seqtransfairness/")
```


We fit a logistic regression model on the data to predict the outcome binary variable. First, we split the dataset into two sets: train (70%) and test (30%).
```{r}
seed <- 2025
sets <- split_dataset(adult, seed, train_ratio = 0.7)
data_train <- sets$data_train
data_test <- sets$data_test
```

As in [Chapter -@sec-classifier], we train two models:

1. **unaware logistic regression classifier**: model without including the sensitive attribute.
2. **aware logistic regression classifier**: model with the sensitive attribute included in the set of features.


To do so, we define the training function, `log_reg_train()`{.R}.

```{r define-log_reg_train}
#| code-fold: true
#| code-summary: The `log_reg_train()`{.R} function.
#' @param train_data Train set.
#' @param test_data Test set.
#' @param s Name of the sensitive attribute.
#' @param y Name of the target variable.
#' @param type If `"type=aware"`, the model includes the sensitive attributes,
#'        otherwise, if `type=unaware`, it does not.
#' 
#' @returns A list with three elements:
#' * `model`: The estimated logistic regression model.
#' * `pred_train`: Estimated scores on the train set.
#' * `pred_test`: Estimated scores on the test set.
#' 
#' @importFrom dplyr select
#' @importFrom rlang !!
#' @importFrom stats glm predict as.formula
log_reg_train <- function(train_data,
                          test_data,
                          s,
                          y,
                          type = c("aware", "unaware")) {
  if (type == "unaware") {
    train_data_ <- train_data %>% select(-!!s)
    test_data_ <- test_data %>% select(-!!s)
  } else {
    train_data_ <- train_data
    test_data_ <- test_data
  }
  # Train the logistic regression model
  form <- paste0(y, "~.")
  model <- glm(as.formula(form), data = train_data_, family = binomial)
  # Predictions on train and test sets
  pred_train <- predict(model, newdata = train_data_, type = "response")
  pred_test <- predict(model, newdata = test_data_, type = "response")
  list(
    model = model,
    pred_train = pred_train,
    pred_test = pred_test
  )
}
```


Let us train the two models. Then, we extract the predicted values on both the train set and the test set.

```{r define-pred_unaware}
# Unaware logistic regression classifier (model without S)
pred_unaware <- log_reg_train(data_train, data_test, s = s, y = y, type = "unaware")
pred_unaware_train <- pred_unaware$pred_train
pred_unaware_test <- pred_unaware$pred_test

# Aware logistic regression classifier (model with S)
pred_aware <- log_reg_train(data_train, data_test, s = s, y = y, type = "aware")
pred_aware_train <- pred_aware$pred_train
pred_aware_test <- pred_aware$pred_test
```

We create a table for each model, with the sensitive attribute and the predicted value by the model ($\hat{y}$), only for observations from the test set.

```{r define-df_test_unaware}
df_test_unaware <- tibble(
  S = data_test |> pull(!!s),
  pred = pred_unaware_test
)

df_test_aware <- tibble(
  S = data_test |> pull(!!s),
  pred = pred_aware_test
)
```


### Predictions

We predict values with the unaware model on the factuals:

```{r define-model_unaware}
model_unaware <- pred_unaware$model
pred_unaware_all <- predict(
  model_unaware,
  newdata = adult,
  type = "response"
)
```

And with the aware model:
```{r define-model_aware}
model_aware <- pred_aware$model
pred_aware_all <- predict(
  model_aware,
  newdata = adult,
  type = "response"
)
```

### Saving Objects

```{r save-classifier-results}
save(pred_aware, file = "../data/pred_aware_adult.rda")
save(pred_unaware, file = "../data/pred_unaware_adult.rda")
save(pred_unaware_all, file = "../data/pred_unaware_all_adult.rda")
save(pred_aware_all, file = "../data/pred_aware_all_adult.rda")
```

## Naive approach: _ceteris paribus_

Let us change the sensitive attribute of individuals from the source group (women) to the target group (men). Then, we use both models (unaware and aware) to predict the target binary variable.

```{r define-pred_unaware_naive}
pred_unaware_naive_women <- predict(
  model_unaware,
  newdata = adult |> filter(sex == "Female") |> mutate(sex = "Male"),
  type = "response"
)
pred_aware_naive_women <- predict(
  model_aware,
  newdata = adult |> filter(sex == "Female") |>  mutate(sex = "Male"),
  type = "response"
)

ind_women <- which(adult$sex == "Female")
ind_men <- which(adult$sex == "Male")

counterfactuals_unaware_naive_women <- 
  adult |> filter(sex == "Female") |> 
  mutate(
    sex_origin = sex,
    sex = "Male",
    pred = pred_unaware_naive_women,
    type = "counterfactual",
    id_indiv = ind_women
  )
counterfactuals_aware_naive_women <- 
  adult |> filter(sex == "Female") |> 
  mutate(
    sex_origin = sex,
    sex = "Male",
    pred = pred_aware_naive_women,
    type = "counterfactual",
    id_indiv = ind_women
  )
```

### Unaware Model

Let us have a look at the distribution of the predicted scores of the classifier in both groups, when the predictions are made after setting the sex attribute of all women to "Male". Since the model does not use the sensitive attribute, changing it will result in absolutely no change in its predictions in this case.

The predicted values using the initial characteristics (the factuals), for the unaware model are stored in the object `pred_unaware_all`. We put in a table the initial characteristics (factuals) and the prediction made by the unaware model:

```{r define-factuals_unaware}
factuals_unaware <-
  adult |> 
  as_tibble() |>
  mutate(
    sex_origin = sex,
    pred = pred_unaware_all,
    type = "factual"
  ) |> 
    mutate(id_indiv = row_number())
```


```{r define-unaware_naive}
unaware_naive_women <- 
  factuals_unaware |> mutate(sex_origin = sex) |> 
  bind_rows(counterfactuals_unaware_naive_women)
```

The unaware model is blind to the sensitive attribute. Hence, changing the sensitive attribute does not affect the predicted scores.

```{r, message=FALSE, warning=FALSE}
#| fig-cap: "Unaware model, Sensitive: Sex, Woman -> Man"
#| label: fig-naive-unaware-adult-ref-men
#| fig-width: 8
ggplot(
  unaware_naive_women |> mutate(
    group = case_when(
      sex_origin == "Female" & sex == "Female" ~ "Women (Original)",
      sex_origin == "Female" & sex == "Male" ~ "Women -> Men (Counterfactual)",
      sex_origin == "Male" & sex == "Male" ~ "Men (Original)"
    ),
    group = factor(
      group, 
      levels = c(
        "Women (Original)", "Women -> Men (Counterfactual)", "Men (Original)"
      )
    )
  ),
  aes(x = pred, fill = group, colour = group)
) +
  geom_histogram(
    mapping = aes(
      y = after_stat(density)), alpha = 0.5, colour = NA,
    position = "identity", binwidth = 0.05
  ) +
  geom_density(alpha = 0.3, linewidth = 1) +
  facet_wrap(~sex) +
  scale_fill_manual(
    NULL, values = c(
      "Women (Original)" = colours_all[["source"]],
      "Women -> Men (Counterfactual)" = colours_all[["naive"]],
      "Men (Original)" = colours_all[["reference"]]
    )
  ) +
  scale_colour_manual(
    NULL, values = c(
      "Women (Original)" = colours_all[["source"]],
      "Women -> Men (Counterfactual)" = colours_all[["naive"]],
      "Men (Original)" = colours_all[["reference"]]
    )
  ) +
  labs(
    x = "Predictions for Y",
    y = "Density"
  ) +
  global_theme() +
  theme(legend.position = "bottom")
```

Then, we focus on the distribution of predicted scores for ccounterfactual of Women and factuals of men. Again, since the model is blind to the sensitive attribute, the distributions are perfectly aligned.

```{r, message=FALSE, warning=FALSE}
#| fig-cap: "Distribution of Predicted Scores for Minority Class (Women), Unaware model, Sensitive: Race, Woman -> Man"
#| label: fig-naive-unaware-sex-ref-men-source-only
#| code-fold: true
#| fig-width: 7
#| code-summary: Codes used to create the Figure.
ggplot(
  data = unaware_naive_women |> 
    mutate(
      group = case_when(
        sex_origin == "Female" & sex == "Female" ~ "Women (Original)",
        sex_origin == "Female" & sex == "Male" ~ "Women -> Men (Counterfactual)",
        sex_origin == "Male" & sex == "Male" ~ "Men (Original)"
      ),
      group = factor(
        group, 
        levels = c(
          "Women (Original)", "Women -> Men (Counterfactual)", "Men (Original)"
        )
      )
    ) |> 
    filter(sex_origin == "Female"),
  mapping = aes(x = pred, fill = group)
) +
  geom_histogram(
    mapping = aes(y = after_stat(density)), 
    alpha = 0.5, position = "identity", binwidth = 0.05
  ) +
  geom_density(alpha = 0.5) +
  scale_fill_manual(
    NULL, values = c(
      "Women (Original)" = colours_all[["source"]],
      "Women -> Men (Counterfactual)" = colours_all[["naive"]],
      "Men (Original)" = colours_all[["reference"]]
    )
  ) +
  scale_colour_manual(
    NULL, values = c(
      "Women (Original)" = colours_all[["source"]],
      "Women -> Men (Counterfactual)" = colours_all[["naive"]],
      "Men (Original)" = colours_all[["reference"]]
    )
  ) +
  labs(
    x = "Predictions for Y",
    y = "Density"
  ) +
  global_theme() +
  theme(legend.position = "bottom")
```



### Aware Model

We turn to the aware model. This time, the sensitive attribute is used by the classifier when it is trained. Hence, changing the sensitive attribute of individuals in the source group to that of the target group may change the predicted values for the binary outcome variable.

The predicted values by the model, on the initial characteristics (on the factuals) are stored in the `pred_aware_all` object.

We create a tibble with the factuals and the predictions by the aware model:
```{r define-fairadapt-factuals_aware}
factuals_aware <-
  adult |> 
  as_tibble() |>
  mutate(
    sex_origin = sex,
    pred = pred_aware_all,
    type = "factual"
  ) |> 
    mutate(id_indiv = row_number())
```

```{r define-aware_naive}
aware_naive_women <- 
  factuals_aware |> mutate(sex_origin = sex) |> 
  bind_rows(counterfactuals_aware_naive_women)
```

```{r, message=FALSE, warning=FALSE}
#| fig-cap: "Aware model, Sensitive: Sex, Woman -> Man"
#| label: fig-naive-aware-adult-ref-men
#| fig-width: 8
ggplot(
  aware_naive_women |> mutate(
    group = case_when(
      sex_origin == "Female" & sex == "Female" ~ "Women (Original)",
      sex_origin == "Female" & sex == "Male" ~ "Women -> Men (Counterfactual)",
      sex_origin == "Male" & sex == "Male" ~ "Men (Original)"
    ),
    group = factor(
      group, 
      levels = c(
        "Women (Original)", "Women -> Men (Counterfactual)", "Men (Original)"
      )
    )
  ),
  aes(x = pred, fill = group, colour = group)
) +
  geom_histogram(
    mapping = aes(
      y = after_stat(density)), alpha = 0.5, colour = NA,
    position = "identity", binwidth = 0.05
  ) +
  geom_density(alpha = 0.3, linewidth = 1) +
  facet_wrap(~sex) +
  scale_fill_manual(
    NULL, values = c(
      "Women (Original)" = colours_all[["source"]],
      "Women -> Men (Counterfactual)" = colours_all[["naive"]],
      "Men (Original)" = colours_all[["reference"]]
    )
  ) +
  scale_colour_manual(
    NULL, values = c(
      "Women (Original)" = colours_all[["source"]],
      "Women -> Men (Counterfactual)" = colours_all[["naive"]],
      "Men (Original)" = colours_all[["reference"]]
    )
  ) +
  labs(
    x = "Predictions for Y",
    y = "Density"
  ) +
  global_theme() +
  theme(legend.position = "bottom")
```

Then, we focus on the distribution of predicted scores for ccounterfactual of Women and factuals of men.

```{r, message=FALSE, warning=FALSE}
#| fig-cap: "Distribution of Predicted Scores for Minority Class (Women), Aware model, Sensitive: Race, Woman -> Man"
#| label: fig-naive-aware-sex-ref-men-source-only
#| code-fold: true
#| fig-width: 7
#| code-summary: Codes used to create the Figure.
ggplot(
  data = aware_naive_women |> 
    mutate(
      group = case_when(
        sex_origin == "Female" & sex == "Female" ~ "Women (Original)",
        sex_origin == "Female" & sex == "Male" ~ "Women -> Men (Counterfactual)",
        sex_origin == "Male" & sex == "Male" ~ "Men (Original)"
      ),
      group = factor(
        group, 
        levels = c(
          "Women (Original)", "Women -> Men (Counterfactual)", "Men (Original)"
        )
      )
    ) |> 
    filter(sex_origin == "Female"),
  mapping = aes(x = pred, fill = group)
) +
  geom_histogram(
    mapping = aes(y = after_stat(density)), 
    alpha = 0.5, position = "identity", binwidth = 0.05
  ) +
  geom_density(alpha = 0.5) +
  scale_fill_manual(
    NULL, values = c(
      "Women (Original)" = colours_all[["source"]],
      "Women -> Men (Counterfactual)" = colours_all[["naive"]],
      "Men (Original)" = colours_all[["reference"]]
    )
  ) +
  scale_colour_manual(
    NULL, values = c(
      "Women (Original)" = colours_all[["source"]],
      "Women -> Men (Counterfactual)" = colours_all[["naive"]],
      "Men (Original)" = colours_all[["reference"]]
    )
  ) +
  labs(
    x = "Predictions for Y",
    y = "Density"
  ) +
  global_theme() +
  theme(legend.position = "bottom")
```

## Fairadapt {#sec-adult-dataset-fairadapt}

We have already assumed a causal graph (see @fig-causal-graph-adult).

Let us consider that we want to build counterfactuals for women: what if the individual had been a man and not a woman?


Let us have a look at the levels of our sensitive variable:
```{r levels-sensitive}
levels(adult |> pull(!!s))
```

Two configurations will be considered in turn:

1. The reference class consists of men, and fairadapt will be used to obtain the counterfactual values for women as if they had been men.
1. The reference class consists of women, and fairadapt will be used to obtain the counterfactual values for men as if they had been women.


```{r define-adapt_df_women}
# Women (factuals) --> Men (counterfactuals)
df_fpt <- adult |> mutate(sex = fct_relevel(sex, "Female", after = Inf))
fpt_model_women <- fairadapt(
  income ~ .,
  train.data = df_fpt,
  prot.attr = "sex", adj.mat = adj_mat,
  quant.method = rangerQuants
)
adapt_df_women <- adaptedData(fpt_model_women)

# Men (factuals) --> Women (counterfactuals)
df_fpt <- df_fpt |> mutate(sex = fct_relevel(sex, "Male", after = Inf))
fpt_model_men <- fairadapt(
  income ~ .,
  train.data = df_fpt,
  prot.attr = "sex", adj.mat = adj_mat,
  quant.method = rangerQuants
)
adapt_df_men <- adaptedData(fpt_model_men)
```


Let us wrap up:

- we have **two predictive models** for the income variable (greater than 50k per year, or lower than or equal to 50k per year): 

  - **unaware** (without S)
  - **aware** (with S)

- we have the **counterfactual characteristics** obtained with fairadapt in two situations depending on the reference class:

  - **women** individuals as **reference**
  - **men** individuals as **reference**.
  
The predictive models will be used to **compare predictions** made using:

- Raw characteristics (initial characteristics).
- Characteristics possibly altered through fairadapt for individuals who were not in the reference group (i.e., using counterfactuals).

### Unaware Model

Let us build a dataset containing only counterfactual characteristics obtained with fairadapt.

```{r define-df_counterfactuals_fpt, message=FALSE, warning=FALSE}
pred_unaware_fpt_women <- predict(
  model_unaware, 
  newdata = adapt_df_women[ind_women, ], 
  type = "response"
)
pred_unaware_fpt_men <- predict(
  model_unaware, 
  newdata = adapt_df_men[ind_men, ],
  type = "response"
)
```

We create a table with the counterfactual characteristics and the prediction by the unaware model:


```{r define-pred_unaware_fpt}
counterfactuals_unaware_fpt_women <- 
  as_tibble(adapt_df_women[ind_women, ]) |> 
  mutate(
    sex_origin = adult$sex[ind_women],
    pred = pred_unaware_fpt_women,
    type = "counterfactual",
    id_indiv = ind_women
  )

counterfactuals_unaware_fpt_men <- 
  as_tibble(adapt_df_men[ind_men, ]) |> 
  mutate(
    sex_origin = adult$sex[ind_men],
    pred = pred_unaware_fpt_men,
    type = "counterfactual",
    id_indiv = ind_men
  )
```


We merge the two datasets, `factuals_unaware` and `counterfactuals_unaware_fpt_women` (or `counterfactuals_unaware_fpt_men`) in a single one.
```{r define-unaware_fpt}
unaware_fpt_women <- 
  factuals_unaware |> mutate(sex_origin = sex) |> 
  bind_rows(counterfactuals_unaware_fpt_women)
  
unaware_fpt_men <- 
  factuals_unaware |> mutate(sex_origin = sex) |> 
  bind_rows(counterfactuals_unaware_fpt_men)
```


:::{.panel-tabset}

#### Woman -> Man

```{r, message=FALSE, warning=FALSE}
#| fig-cap: "Unaware model, Sensitive: Sex, Woman -> Man"
#| label: fig-fpt-unaware-sex-ref-men
#| code-fold: true
#| fig-width: 7
#| code-summary: Codes used to create the Figure.
ggplot(
  data = unaware_fpt_women |> 
    mutate(
      group = case_when(
        sex_origin == "Female" & sex == "Female" ~ "Women (Original)",
        sex_origin == "Female" & sex == "Male" ~ "Women -> Men (Counterfactual)",
        sex_origin == "Male" & sex == "Male" ~ "Men (Original)"
      ),
      group = factor(
        group, 
        levels = c(
          "Women (Original)", "Women -> Men (Counterfactual)", "Men (Original)"
        )
      )
    ),
  aes(x = pred, fill = group, colour = group)
) +
  geom_histogram(
    mapping = aes(
      y = after_stat(density)), alpha = 0.5, colour = NA,
    position = "identity", binwidth = 0.05
  ) +
  geom_density(alpha = 0.3, linewidth = 1) +
  facet_wrap(~sex) +
  scale_fill_manual(
    NULL, values = c(
      "Women (Original)" = colours_all[["source"]],
      "Women -> Men (Counterfactual)" = colours_all[["fairadapt"]],
      "Men (Original)" = colours_all[["reference"]]
    )
  ) +
  scale_colour_manual(
    NULL, values = c(
      "Women (Original)" = colours_all[["source"]],
      "Women -> Men (Counterfactual)" = colours_all[["fairadapt"]],
      "Men (Original)" = colours_all[["reference"]]
    )
  ) +
  labs(
    x = "Predictions for Y",
    y = "Density"
  ) +
  global_theme() +
  theme(legend.position = "bottom")
```

#### Man -> Woman

```{r, message=FALSE, warning=FALSE}
#| fig-cap: "Unaware model, Sensitive: Sex, Man -> Woman"
#| label: fig-fpt-unaware-sex-ref-women
#| code-fold: true
#| fig-width: 7
#| code-summary: Codes used to create the Figure.
ggplot(
  data = unaware_fpt_men |> 
    mutate(
      group = case_when(
        sex_origin == "Male" & sex == "Male" ~ "Men (Original)",
        sex_origin == "Male" & sex == "Female" ~ "Men -> Women (Counterfactual)",
        sex_origin == "Female" & sex == "Female" ~ "Women (Original)"
      ),
      group = factor(
        group, 
        levels = c(
          "Men (Original)", "Men -> Women (Counterfactual)", "Women (Original)"
        )
      )
    ),
  aes(x = pred, fill = group, colour = group)
) +
  geom_histogram(
    mapping = aes(
      y = after_stat(density)), alpha = 0.5, colour = NA,
    position = "identity", binwidth = 0.05
  ) +
  geom_density(alpha = 0.3, linewidth = 1) +
  facet_wrap(~sex) +
  scale_fill_manual(
    NULL, values = c(
      "Men (Original)" = colours_all[["source"]],
      "Men -> Women (Counterfactual)" = colours_all[["fairadapt"]],
      "Women (Original)" = colours_all[["reference"]]
    )
  ) +
  scale_colour_manual(
    NULL, values = c(
      "Men (Original)" = colours_all[["source"]],
      "Men -> Women (Counterfactual)" = colours_all[["fairadapt"]],
      "Women (Original)" = colours_all[["reference"]]
    )
  ) +
  labs(
    x = "Predictions for Y",
    y = "Density"
  ) +
  global_theme() +
  theme(legend.position = "bottom")
```

:::

Then, we focus on the distribution of predicted scores for counterfactual of women and factuals of men.


:::{.panel-tabset}

#### Woman -> Man

```{r, message=FALSE, warning=FALSE}
#| fig-cap: "Distribution of Predicted Scores for Minority Class (Women), Unaware model, Sensitive: Sex, Woman -> Man"
#| label: fig-fpt-unaware-sex-ref-men-source-only
#| code-fold: true
#| fig-width: 7
#| code-summary: Codes used to create the Figure.
ggplot(
  data = unaware_fpt_women |> 
    mutate(
      group = case_when(
        sex_origin == "Female" & sex == "Female" ~ "Women (Original)",
        sex_origin == "Female" & sex == "Male" ~ "Women -> Men (Counterfactual)",
        sex_origin == "Male" & sex == "Male" ~ "Men (Original)"
      ),
      group = factor(
        group, 
        levels = c(
          "Women (Original)", "Women -> Men (Counterfactual)", "Men (Original)"
        )
      )
    ) |> 
    filter(sex_origin == "Female"),
  mapping = aes(x = pred, fill = group)
) +
  geom_histogram(
    mapping = aes(y = after_stat(density)), 
    alpha = 0.5, position = "identity", binwidth = 0.05
  ) +
  geom_density(alpha = 0.5) +
  scale_fill_manual(
    NULL, values = c(
      "Women (Original)" = colours_all[["source"]],
      "Women -> Men (Counterfactual)" = colours_all[["fairadapt"]],
      "Men (Original)" = colours_all[["reference"]]
    )
  ) +
  scale_colour_manual(
    NULL, values = c(
      "Women (Original)" = colours_all[["source"]],
      "Women -> Men (Counterfactual)" = colours_all[["fairadapt"]],
      "Men (Original)" = colours_all[["reference"]]
    )
  ) +
  labs(
    x = "Predictions for Y",
    y = "Density"
  ) +
  global_theme() +
  theme(legend.position = "bottom")
```

#### Man -> Woman

```{r, message=FALSE, warning=FALSE}
#| fig-cap: "Distribution of Predicted Scores for Minority Class (White), Unaware model, Sensitive: Race, Man -> Woman"
#| label: fig-fpt-unaware-sex-ref-women-source-only
#| code-fold: true
#| fig-width: 7
#| code-summary: Codes used to create the Figure.
ggplot(
  data = unaware_fpt_men |> 
    mutate(
      group = case_when(
        sex_origin == "Male" & sex == "Male" ~ "Men (Original)",
        sex_origin == "Male" & sex == "Female" ~ "Men -> Women (Counterfactual)",
        sex_origin == "Female" & sex == "Female" ~ "Women (Original)"
      ),
      group = factor(
        group, 
        levels = c(
          "Men (Original)", "Men -> Women (Counterfactual)", "Women (Original)"
        )
      )
    ) |> 
    filter(sex_origin == "Male"),
  mapping = aes(x = pred, fill = group)) +
  geom_histogram(
    mapping = aes(y = after_stat(density)), 
    alpha = 0.5, position = "identity", binwidth = 0.05
  ) +
  geom_density(alpha = 0.5) +
  scale_fill_manual(
    NULL, values = c(
      "Men (Original)" = colours_all[["source"]],
      "Men -> Women (Counterfactual)" = colours_all[["fairadapt"]]
    )
  ) +
  scale_colour_manual(
    NULL, values = c(
      "Men (Original)" = colours_all[["source"]],
      "Men -> Women (Counterfactual)" = colours_all[["fairadapt"]]
    )
  ) +
  labs(
    x = "Predictions for Y",
    y = "Density"
  ) +
  global_theme() +
  theme(legend.position = "bottom")
```

:::


### Aware Model

Now, we turn to the model that includes the sensitive attribute, i.e., the aware model. Let us get the predicted values for the counterfactuals, using the aware model:

```{r predict-fairadapt-aware-counterfactuals, message=FALSE, warning=FALSE}
pred_aware_fpt_women <- predict(
  model_aware, 
  newdata = adapt_df_women[ind_women, ], 
  type = "response"
)
pred_aware_fpt_men <- predict(
  model_aware, 
  newdata = adapt_df_men[ind_men, ],
  type = "response"
)
```

Then, we create a table with the counterfactuals and the predicted value by the aware model:
```{r define-fairadapt-counterfactuals_aware}
counterfactuals_aware_fpt_women <- 
  as_tibble(adapt_df_women[ind_women, ]) |> 
  mutate(
    sex_origin = adult$sex[ind_women],
    pred = pred_aware_fpt_women,
    type = "counterfactual",
    id_indiv = ind_women
  )

counterfactuals_aware_fpt_men <- 
  as_tibble(adapt_df_men[ind_men, ]) |> 
  mutate(
    sex_origin = adult$sex[ind_men],
    pred = pred_aware_fpt_men,
    type = "counterfactual",
    id_indiv = ind_men
  )
```

We merge the two datasets, `factuals_unaware` and `counterfactuals_aware_fpt_women` (or `counterfactuals_aware_fpt_men`) in a single one.

```{r define-aware_fpt_women}
# dataset with counterfactuals, for aware model
aware_fpt_women <- 
  factuals_aware |> mutate(sex_origin = sex) |> 
  bind_rows(counterfactuals_aware_fpt_women)
  
aware_fpt_men <- 
  factuals_aware |> mutate(sex_origin = sex) |> 
  bind_rows(counterfactuals_aware_fpt_men)
```


:::{.panel-tabset}

#### Women -> Men

```{r, message=FALSE, warning=FALSE}
#| fig-cap: "Aware model, Sensitive: Race, Reference: Men individuals"
#| label: fig-fpt-aware-sex-ref-men
#| code-fold: true
#| fig-width: 7
#| code-summary: Codes used to create the Figure.
ggplot(
  data = aware_fpt_women |> 
    mutate(
      group = case_when(
        sex_origin == "Female" & sex == "Female" ~ "Women (Original)",
        sex_origin == "Female" & sex == "Male" ~ "Women -> Men (Counterfactual)",
        sex_origin == "Male" & sex == "Male" ~ "Men (Original)"
      ),
      group = factor(
        group, 
        levels = c(
          "Women (Original)", "Women -> Men (Counterfactual)", "Men (Original)"
        )
      )
    ),
  aes(x = pred, fill = group, colour = group)
) +
  geom_histogram(
    mapping = aes(
      y = after_stat(density)), alpha = 0.5, colour = NA,
    position = "identity", binwidth = 0.05
  ) +
  geom_density(alpha = 0.3, linewidth = 1) +
  facet_wrap(~sex) +
  scale_fill_manual(
    NULL, values = c(
      "Women (Original)" = colours_all[["source"]],
      "Women -> Men (Counterfactual)" = colours_all[["fairadapt"]],
      "Men (Original)" = colours_all[["reference"]]
    )
  ) +
  scale_colour_manual(
    NULL, values = c(
      "Women (Original)" = colours_all[["source"]],
      "Women -> Men (Counterfactual)" = colours_all[["fairadapt"]],
      "Men (Original)" = colours_all[["reference"]]
    )
  ) +
  labs(
    x = "Predictions for Y",
    y = "Density"
  ) +
  global_theme() +
  theme(legend.position = "bottom")
```

#### Men -> Women

```{r, message=FALSE, warning=FALSE}
#| fig-cap: "Aware model, Sensitive: Race, Reference: Women individuals"
#| label: fig-fpt-aware-sex-ref-women
#| code-fold: true
#| fig-width: 7
#| code-summary: Codes used to create the Figure.
ggplot(
  data = aware_fpt_men |> 
    mutate(
      group = case_when(
        sex_origin == "Male" & sex == "Male" ~ "Men (Original)",
        sex_origin == "Male" & sex == "Female" ~ "Men -> Women (Counterfactual)",
        sex_origin == "Female" & sex == "Female" ~ "Women (Original)"
      ),
      group = factor(
        group, 
        levels = c(
          "Men (Original)", "Men -> Women (Counterfactual)", "Women (Original)"
        )
      )
    ),
  aes(x = pred, fill = group, colour = group)
) +
  geom_histogram(
    mapping = aes(
      y = after_stat(density)), alpha = 0.5, colour = NA,
    position = "identity", binwidth = 0.05
  ) +
  geom_density(alpha = 0.3, linewidth = 1) +
  facet_wrap(~sex) +
  scale_fill_manual(
    NULL, values = c(
      "Men (Original)" = colours_all[["source"]],
      "Men -> Women (Counterfactual)" = colours_all[["fairadapt"]],
      "Women (Original)" = colours_all[["reference"]]
    )
  ) +
  scale_colour_manual(
    NULL, values = c(
      "Men (Original)" = colours_all[["source"]],
      "Men -> Women (Counterfactual)" = colours_all[["fairadapt"]],
      "Women (Original)" = colours_all[["reference"]]
    )
  ) +
  labs(
    x = "Predictions for Y",
    y = "Density"
  ) +
  global_theme() +
  theme(legend.position = "bottom")
```

:::
  
Then, we focus on the distribution of predicted scores for counterfactual of Women  and factuals of men.


:::{.panel-tabset}

#### Women -> Men

```{r, message=FALSE, warning=FALSE}
#| fig-cap: "Distribution of Predicted Scores for Minority Class (Women), Aware model, Sensitive: Race, Reference: Men individuals"
#| label: fig-fpt-aware-sex-ref-men-source-only
#| code-fold: true
#| fig-width: 7
#| code-summary: Codes used to create the Figure.
ggplot(
  data = aware_fpt_women |> 
    mutate(
      group = case_when(
        sex_origin == "Female" & sex == "Female" ~ "Women (Original)",
        sex_origin == "Female" & sex == "Male" ~ "Women -> Men (Counterfactual)",
        sex_origin == "Male" & sex == "Male" ~ "Men (Original)"
      ),
      group = factor(
        group, 
        levels = c(
          "Women (Original)", "Women -> Men (Counterfactual)", "Men (Original)"
        )
      )
    ) |> 
    filter(sex_origin == "Female"),
  mapping = aes(x = pred, fill = group)
) +
  geom_histogram(
    mapping = aes(y = after_stat(density)), 
    alpha = 0.5, position = "identity", binwidth = 0.05
  ) +
  geom_density(alpha = 0.5) +
  scale_fill_manual(
    NULL, values = c(
      "Women (Original)" = colours_all[["source"]],
      "Women -> Men (Counterfactual)" = colours_all[["fairadapt"]],
      "Men (Original)" = colours_all[["reference"]]
    )
  ) +
  scale_colour_manual(
    NULL, values = c(
      "Women (Original)" = colours_all[["source"]],
      "Women -> Men (Counterfactual)" = colours_all[["fairadapt"]],
      "Men (Original)" = colours_all[["reference"]]
    )
  ) +
  labs(
    x = "Predictions for Y",
    y = "Density"
  ) +
  global_theme() +
  theme(legend.position = "bottom")
```

#### Men -> Women

```{r, message=FALSE, warning=FALSE}
#| fig-cap: "Distribution of Predicted Scores for Minority Class (Men), Aware model, Sensitive: Race, Reference: Women individuals"
#| label: fig-fpt-aware-sex-ref-women-source-only
#| code-fold: true
#| fig-width: 7
#| code-summary: Codes used to create the Figure.
ggplot(
  data = aware_fpt_men |> 
    mutate(
      group = case_when(
        sex_origin == "Male" & sex == "Male" ~ "Men (Original)",
        sex_origin == "Male" & sex == "Female" ~ "Men -> Women (Counterfactual)",
        sex_origin == "Female" & sex == "Female" ~ "Women (Original)"
      ),
      group = factor(
        group, 
        levels = c(
          "Men (Original)", "Men -> Women (Counterfactual)", "Women (Original)"
        )
      )
    ) |> 
    filter(sex_origin == "Male"),
  mapping = aes(x = pred, fill = group)) +
  geom_histogram(
    mapping = aes(y = after_stat(density)), 
    alpha = 0.5, position = "identity", binwidth = 0.05
  ) +
  geom_density(alpha = 0.5) +
  scale_fill_manual(
    NULL, values = c(
      "Men (Original)" = colours_all[["source"]],
      "Men -> Women (Counterfactual)" = colours_all[["fairadapt"]]
    )
  ) +
  scale_colour_manual(
    NULL, values = c(
      "Men (Original)" = colours_all[["source"]],
      "Men -> Women (Counterfactual)" = colours_all[["fairadapt"]]
    )
  ) +
  labs(
    x = "Predictions for Y",
    y = "Density"
  ) +
  global_theme() +
  theme(legend.position = "bottom")
```

:::
  

## Sequential Transport

We now turn to sequential transport (the methodology developed in our paper). We use the `seq_trans()`{.R} function defined in our small package to perform a fast sequential transport on causal graph.

We use the same causal graph as in @sec-adult-dataset-fairadapt.

```{r define-trans_x1_then_x2}
sequential_transport <- seq_trans(
  data = adult, adj = adj_mat, s = "sex", S_0 = "Female", y = "income"
)
```

We build a dataset with the sensitive attribute of Women changed to Male, and their characteristics changed to their transported characteristics:

```{r define-df_counterfactuals_seq_women}
df_counterfactuals_seq_women <- 
  as_tibble(sequential_transport$transported) |> 
  mutate(
    id_indiv = ind_women,
    sex_origin = "Female",
    sex = "Male"
  )
```

We make predictions based on those counterfactuals obtained with sequential transport, on both models (the unaware model, and the aware model):
```{r seqt-pred_seqt_unaware, warning=FALSE}
pred_seq_unaware <- predict(
  model_unaware, newdata = df_counterfactuals_seq_women, type = "response"
)

pred_seq_aware <- predict(
  model_aware, newdata = df_counterfactuals_seq_women, type = "response"
)
```

```{r define-counterfactuals_unaware_seq_women}
counterfactuals_unaware_seq_women <- 
  df_counterfactuals_seq_women |> 
  mutate(pred = pred_seq_unaware, type = "counterfactual")
counterfactuals_aware_seq_women <- 
  df_counterfactuals_seq_women |> 
  mutate(pred = pred_seq_aware, type = "counterfactual")
```

Let us put in a single table the predictions made by the classifier (either aware or unaware) on Women based on their factual characteristics, and those made based on the counterfactuals:
```{r define-aware_seq_black}
aware_seq_women <- bind_rows(
  factuals_aware |> mutate(id_indiv = row_number(), sex_origin = sex), 
  counterfactuals_aware_seq_women |> mutate(S_origin = "Female")
)
unaware_seq_women <- bind_rows(
  factuals_unaware |> mutate(id_indiv = row_number(), sex_origin = sex), 
  counterfactuals_unaware_seq_women |> mutate(S_origin = "Female")
)
```

:::{.panel-tabset}


### Unaware

```{r, message=FALSE, warning=FALSE}
#| fig-cap: "Unaware model, Sensitive: Race, Woman -> Man"
#| label: fig-seq-unaware-sex-ref-men
#| code-fold: true
#| fig-width: 7
#| code-summary: Codes used to create the Figure.
ggplot(
  data = unaware_seq_women |> 
    mutate(
      group = case_when(
        sex_origin == "Female" & sex == "Female" ~ "Women (Original)",
        sex_origin == "Female" & sex == "Male" ~ "Women -> Men (Counterfactual)",
        sex_origin == "Male" & sex == "Male" ~ "Men (Original)"
      ),
      group = factor(
        group, 
        levels = c(
          "Women (Original)", "Women -> Men (Counterfactual)", "Men (Original)"
        )
      )
    ),
  aes(x = pred, fill = group, colour = group)
) +
  geom_histogram(
    mapping = aes(
      y = after_stat(density)), alpha = 0.5, colour = NA,
    position = "identity", binwidth = 0.05
  ) +
  geom_density(alpha = 0.3, linewidth = 1) +
  facet_wrap(~sex) +
  scale_fill_manual(
    NULL, values = c(
      "Women (Original)" = colours_all[["source"]],
      "Women -> Men (Counterfactual)" = colours_all[["seq"]],
      "Men (Original)" = colours_all[["reference"]]
    )
  ) +
  scale_colour_manual(
    NULL, values = c(
      "Women (Original)" = colours_all[["source"]],
      "Women -> Men (Counterfactual)" = colours_all[["seq"]],
      "Men (Original)" = colours_all[["reference"]]
    )
  ) +
  labs(
    x = "Predictions for Y",
    y = "Density"
  ) +
  global_theme() +
  theme(legend.position = "bottom")
```

### Aware

```{r}
#| fig-cap: "Aware model, Sensitive: Race, Woman -> Man"
#| label: fig-seq-aware-sex-ref-men
#| code-fold: true
#| fig-width: 7
#| code-summary: Codes used to create the Figure.
ggplot(
  data = aware_seq_women |> 
    mutate(
      group = case_when(
        sex_origin == "Female" & sex == "Female" ~ "Women (Original)",
        sex_origin == "Female" & sex == "Male" ~ "Women -> Men (Counterfactual)",
        sex_origin == "Male" & sex == "Male" ~ "Men (Original)"
      ),
      group = factor(
        group, 
        levels = c(
          "Women (Original)", "Women -> Men (Counterfactual)", "Men (Original)"
        )
      )
    ),
  aes(x = pred, fill = group, colour = group)
) +
  geom_histogram(
    mapping = aes(
      y = after_stat(density)), alpha = 0.5, colour = NA,
    position = "identity", binwidth = 0.05
  ) +
  geom_density(alpha = 0.3, linewidth = 1) +
  facet_wrap(~sex) +
  scale_fill_manual(
    NULL, values = c(
      "Women (Original)" = colours_all[["source"]],
      "Women -> Men (Counterfactual)" = colours_all[["seq"]],
      "Men (Original)" = colours_all[["reference"]]
    )
  ) +
  scale_colour_manual(
    NULL, values = c(
      "Women (Original)" = colours_all[["source"]],
      "Women -> Men (Counterfactual)" = colours_all[["seq"]],
      "Men (Original)" = colours_all[["reference"]]
    )
  ) +
  labs(
    x = "Predictions for Y",
    y = "Density"
  ) +
  global_theme() +
  theme(legend.position = "bottom")
```


:::
  
Then, we focus on the distribution of predicted scores for counterfactual of women and factuals of men

:::{.panel-tabset}

### Unaware

```{r, message=FALSE, warning=FALSE}
#| fig-cap: "Distribution of Predicted Scores for Minority Class (Women), Unaware model, Sensitive: Race, Woman -> Man"
#| label: fig-seq-unaware-sex-ref-men-source-only
#| code-fold: true
#| fig-width: 7
#| code-summary: Codes used to create the Figure.
ggplot(
  data = unaware_seq_women |> 
    mutate(
      group = case_when(
        sex_origin == "Female" & sex == "Female" ~ "Women (Original)",
        sex_origin == "Female" & sex == "Male" ~ "Women -> Men (Counterfactual)",
        sex_origin == "Male" & sex == "Male" ~ "Men (Original)"
      ),
      group = factor(
        group, 
        levels = c(
          "Women (Original)", "Women -> Men (Counterfactual)", "Men (Original)"
        )
      )
    ) |> 
    filter(sex_origin == "Female"),
  mapping = aes(x = pred, fill = group)
) +
  geom_histogram(
    mapping = aes(y = after_stat(density)), 
    alpha = 0.5, position = "identity", binwidth = 0.05
  ) +
  geom_density(alpha = 0.5) +
  scale_fill_manual(
    NULL, values = c(
      "Women (Original)" = colours_all[["source"]],
      "Women -> Men (Counterfactual)" = colours_all[["seq"]],
      "Men (Original)" = colours_all[["reference"]]
    )
  ) +
  scale_colour_manual(
    NULL, values = c(
      "Women (Original)" = colours_all[["source"]],
      "Women -> Men (Counterfactual)" = colours_all[["seq"]],
      "Men (Original)" = colours_all[["reference"]]
    )
  ) +
  labs(
    x = "Predictions for Y",
    y = "Density"
  ) +
  global_theme() +
  theme(legend.position = "bottom")
```

### Aware

```{r, message=FALSE, warning=FALSE}
#| fig-cap: "Distribution of Predicted Scores for Minority Class (Women), Aware model, Sensitive: Race, Woman -> Man"
#| label: fig-seq-aware-sex-ref-men-source-only
#| code-fold: true
#| fig-width: 7
#| code-summary: Codes used to create the Figure.
ggplot(
  data = aware_seq_women |> 
    mutate(
      group = case_when(
        sex_origin == "Female" & sex == "Female" ~ "Women (Original)",
        sex_origin == "Female" & sex == "Male" ~ "Women -> Men (Counterfactual)",
        sex_origin == "Male" & sex == "Male" ~ "Men (Original)"
      ),
      group = factor(
        group, 
        levels = c(
          "Women (Original)", "Women -> Men (Counterfactual)", "Men (Original)"
        )
      )
    ) |> 
    filter(sex_origin == "Female"),
  mapping = aes(x = pred, fill = group)
) +
  geom_histogram(
    mapping = aes(y = after_stat(density)), 
    alpha = 0.5, position = "identity", binwidth = 0.05
  ) +
  geom_density(alpha = 0.5) +
  scale_fill_manual(
    NULL, values = c(
      "Women (Original)" = colours_all[["source"]],
      "Women -> Men (Counterfactual)" = colours_all[["seq"]],
      "Men (Original)" = colours_all[["reference"]]
    )
  ) +
  scale_colour_manual(
    NULL, values = c(
      "Women (Original)" = colours_all[["source"]],
      "Women -> Men (Counterfactual)" = colours_all[["seq"]],
      "Men (Original)" = colours_all[["reference"]]
    )
  ) +
  labs(
    x = "Predictions for Y",
    y = "Density"
  ) +
  global_theme() +
  theme(legend.position = "bottom")
```

:::


## Comparison

Let us now compare the results.


:::{.panel-tabset}

### Unaware Model

```{r}
tb_unaware <- 
  factuals_unaware |> mutate(counterfactual = "none") |>
  # Naive
  bind_rows(
    counterfactuals_unaware_naive_women |> mutate(counterfactual = "naive")
  ) |> 
  # Fairadapt
  bind_rows(
    counterfactuals_unaware_fpt_women |> mutate(counterfactual = "fpt")
  ) |> 
  # Sequential transport
  bind_rows(
    counterfactuals_unaware_seq_women |> mutate(counterfactual = "seq")
  )
```




### Aware Model

```{r}
tb_aware <- 
  factuals_aware |> mutate(counterfactual = "none") |> 
  # Naive
  bind_rows(
    counterfactuals_aware_naive_women |> mutate(counterfactual = "naive")
  ) |> 
  # Fairadapt
  bind_rows(
    counterfactuals_aware_fpt_women |> mutate(counterfactual = "fpt")
  ) |> 
  # Sequential transport
  bind_rows(
    counterfactuals_aware_seq_women |> mutate(counterfactual = "seq")
  )
```

:::


Let us compare the densities of the predicted values.


:::{.panel-tabset}

### Unaware model

```{r}
#| fig-cap: Densities of predicted scores for Women with factuals and with counterfactuals. The yellow dashed line corresponds to the density of predicted scores for Women, using factuals.
#| label: fig-densities-counterfactuals-unaware-adult
#| fig-width: 4
#| fig-height: 4
#| code-fold: true
#| code-summary: Codes used to create the Figure.
# Factuals
tb_unaware_factuals <- tb_unaware |> filter(counterfactual == "none")
# Predicted values
pred_unaware_factuals_women <- tb_unaware_factuals |> filter(sex == "Female") |> pull("pred")
pred_unaware_factuals_men <- tb_unaware_factuals |> filter(sex == "Male") |> pull("pred")
# Estimated densities
d_unaware_factuals_women <- density(pred_unaware_factuals_women)
d_unaware_factuals_men <- density(pred_unaware_factuals_men)

par(mfrow = c(3, 1), mar = c(2, 2, 0, 0))
x_lim <- c(0, .8)
y_lim <- c(0, 10)

# Naive
tb_unaware_naive <- tb_unaware |> filter(counterfactual == "naive")
# Predicted values, focusing on Black --> White
pred_unaware_naive_women_star <- tb_unaware_naive |> filter(sex == "Male") |> pull("pred")
# Estimated densities
d_unaware_naive_women_star <- density(pred_unaware_naive_women_star)

plot(
  d_unaware_factuals_women,
  main = "", xlab = "", ylab = "",
  axes = FALSE, col = NA,
  xlim = x_lim, ylim = y_lim
)
axis(1)
axis(2)
polygon(d_unaware_factuals_women, col = alpha(colours_all[["source"]], .5), border = NA)
lines(d_unaware_factuals_men, col = colours_all[["reference"]], lty = 2, lwd = 2)
polygon(d_unaware_naive_women_star, col = alpha(colours_all[["naive"]], .5), border = NA)
pos_arrow_ref <- .6
text(x = pos_arrow_ref, y = 8, "Factuals - Men", col = colours_all[["reference"]])
ind_min_ref <- which.min(abs(d_unaware_factuals_men$x - pos_arrow_ref))
arrows(
  x1 = d_unaware_factuals_men$x[ind_min_ref],
  y1 = d_unaware_factuals_men$y[ind_min_ref],
  x0 = pos_arrow_ref, 
  y0 = 7,
  length = 0.05, col = colours_all[["reference"]]
)
text(x = .7, y = 4, "Naive", col = colours_all[["naive"]])


# Fairadapt
tb_unaware_fpt <- tb_unaware |> filter(counterfactual == "fpt")
# Predicted values, focusing on Black --> White
pred_unaware_fpt_women_star <- 
  tb_unaware_fpt |> filter(sex == "Male") |> pull("pred")
# Estimated densities
d_unaware_fpt_women_star <- density(pred_unaware_fpt_women_star)

plot(
  d_unaware_factuals_women,
  main = "", xlab = "", ylab = "",
  axes = FALSE, col = NA,
  xlim = x_lim, ylim = y_lim
)
axis(1)
axis(2)
polygon(d_unaware_factuals_women, col = alpha(colours_all[["source"]], .5), border = NA)
lines(d_unaware_factuals_men, col = colours_all[["reference"]], lty = 2, lwd = 2)
polygon(d_unaware_fpt_women_star, col = alpha(colours_all[["fairadapt"]], .5), border = NA)
text(x = .15, y = 6, "Factuals - Women", col = colours_all[["source"]])
pos_arrow <- .07
ind_min <- which.min(abs(d_unaware_factuals_women$x - pos_arrow))
arrows(
  x1 = d_unaware_factuals_women$x[ind_min],
  y1 = d_unaware_factuals_women$y[ind_min],
  x0 = .15, 
  y0 = 5,
  length = 0.05, col = colours_all[["source"]]
)
text(x = .7, y = 4, "fairadapt", col = colours_all[["fairadapt"]])


# Sequential transport
tb_unaware_seq <- tb_unaware |> filter(counterfactual == "seq")
# Predicted values, focusing on Black --> White
pred_unaware_seq_women_star <- tb_unaware_seq |> filter(sex == "Male") |> pull("pred")
# Estimated densities
d_unaware_seq_women_star <- density(pred_unaware_seq_women_star)

plot(
  d_unaware_factuals_women,
  main = "", xlab = "", ylab = "",
  axes = FALSE, col = NA,
  xlim = x_lim, ylim = y_lim
)
axis(1)
axis(2)
polygon(d_unaware_factuals_women, col = alpha(colours_all[["source"]], .5), border = NA)
lines(d_unaware_factuals_men, col = colours_all[["reference"]], lty = 2, lwd = 2)
polygon(d_unaware_seq_women_star, col = alpha(colours_all[["seq"]], .5), border = NA)
text(x = .7, y = 4, "Seq. T.", col = colours_all[["seq"]])
```

### Aware model

```{r}
#| fig-cap: Densities of predicted scores for Women with factuals and with counterfactuals. The yellow dashed line corresponds to the density of predicted scores for Women, using factuals.
#| label: fig-densities-counterfactuals-aware-adult
#| fig-width: 4
#| fig-height: 4
#| code-fold: true
#| code-summary: Codes used to create the Figure.
# Factuals
tb_aware_factuals <- tb_aware |> filter(counterfactual == "none")
# Predicted values
pred_aware_factuals_women <- tb_aware_factuals |> filter(sex == "Female") |> pull("pred")
pred_aware_factuals_men <- tb_aware_factuals |> filter(sex == "Male") |> pull("pred")
# Estimated densities
d_aware_factuals_women <- density(pred_aware_factuals_women)
d_aware_factuals_men <- density(pred_aware_factuals_men)

par(mfrow = c(3, 1), mar = c(2, 2, 0, 0))
x_lim <- c(0, .8)
y_lim <- c(0, 16)

# Naive
tb_aware_naive <- tb_aware |> filter(counterfactual == "naive")
# Predicted values, focusing on Black --> White
pred_aware_naive_women_star <- tb_aware_naive |> filter(sex == "Male") |> pull("pred")
# Estimated densities
d_aware_naive_women_star <- density(pred_aware_naive_women_star)

plot(
  d_aware_factuals_women,
  main = "", xlab = "", ylab = "",
  axes = FALSE, col = NA,
  xlim = x_lim, ylim = y_lim
)
axis(1)
axis(2)
polygon(d_aware_factuals_women, col = alpha(colours_all[["source"]], .5), border = NA)
lines(d_aware_factuals_men, col = colours_all[["reference"]], lty = 2, lwd = 2)
polygon(d_aware_naive_women_star, col = alpha(colours_all[["naive"]], .5), border = NA)
text(x = .15, y = 13, "Factuals - Women", col = colours_all[["source"]])
pos_arrow <- .03
ind_min <- which.min(abs(d_aware_factuals_women$x - pos_arrow))
arrows(
  x1 = d_aware_factuals_women$x[ind_min],
  y1 = d_aware_factuals_women$y[ind_min],
  x0 = .15, 
  y0 = 11,
  length = 0.05, col = colours_all[["source"]]
)
pos_arrow_ref <- .6
text(x = pos_arrow_ref, y = 13, "Factuals - Men", col = colours_all[["reference"]])
ind_min_ref <- which.min(abs(d_aware_factuals_men$x - pos_arrow_ref))
arrows(
  x1 = d_aware_factuals_men$x[ind_min_ref],
  y1 = d_aware_factuals_men$y[ind_min_ref],
  x0 = pos_arrow_ref, 
  y0 = 11,
  length = 0.05, col = colours_all[["reference"]]
)
text(x = .7, y = 5, "Naive", col = colours_all[["naive"]])


# Fairadapt
tb_aware_fpt <- tb_aware |> filter(counterfactual == "fpt")
# Predicted values, focusing on Black --> White
pred_aware_fpt_women_star <- 
  tb_aware_fpt |> filter(sex == "Male") |> pull("pred")
# Estimated densities
d_aware_fpt_women_star <- density(pred_aware_fpt_women_star)

plot(
  d_aware_factuals_women,
  main = "", xlab = "", ylab = "",
  axes = FALSE, col = NA,
  xlim = x_lim, ylim = y_lim
)
axis(1)
axis(2)
polygon(d_aware_factuals_women, col = alpha(colours_all[["source"]], .5), border = NA)
lines(d_aware_factuals_men, col = colours_all[["reference"]], lty = 2, lwd = 2)
polygon(d_aware_fpt_women_star, col = alpha(colours_all[["fairadapt"]], .5), border = NA)
text(x = .7, y = 5, "fairadapt", col = colours_all[["fairadapt"]])


# Sequential transport
tb_aware_seq <- tb_aware |> filter(counterfactual == "seq")
# Predicted values, focusing on Black --> White
pred_aware_seq_women_star <- tb_aware_seq |> filter(sex == "Male") |> pull("pred")
# Estimated densities
d_aware_seq_women_star <- density(pred_aware_seq_women_star)

plot(
  d_aware_factuals_women,
  main = "", xlab = "", ylab = "",
  axes = FALSE, col = NA,
  xlim = x_lim, ylim = y_lim
)
axis(1)
axis(2)
polygon(d_aware_factuals_women, col = alpha(colours_all[["source"]], .5), border = NA)
lines(d_aware_factuals_men, col = colours_all[["reference"]], lty = 2, lwd = 2)
polygon(d_aware_seq_women_star, col = alpha(colours_all[["seq"]], .5), border = NA)
text(x = .7, y = 5, "Seq. T.", col = colours_all[["seq"]])
```

:::


## Metrics

:::{.callout-warning}

This section is still under construction. Results may not correct. The metrics used should be changed soon.

:::

Let us compute a few metrics metrics, such as the accuracy, the log-loss, and the Brier Score, as well as the counterfactual demographic parity. For the accuracy, we define the set the probability threshold to .5.



The **counterfactual demographic** parity writes:

$$
\mathrm{CDP}=\frac{1}{n_0}\sum_{i\in\mathcal{D}_0}m(1,\boldsymbol{x}_{i}^\star) - m(0,\boldsymbol{x}_{i}),
$$
where $n_0$ is the number of women in the sample, $m()$ is the classifier, with $m(1,\boldsymbol{x}_{i}^\star)$ the score returned when the sensitive attribute is $S=1$, i.e., "Male" and $\boldsymbol{x}_{i}^\star$ are the counterfactual values, $m(0,\boldsymbol{x}_{i})$ is the score returned by the model when using the factuals.

We compute the Equalized Odds criterion as the absolute difference between true positive rate (TPR) across the two groups (Women/Men):

$$
EO = | TPR_{\text{Women}} - TPR_{\text{Men}} |
$$


A binary predictor $\hat{Y}$ satisfies **equal opportunity** with respect to $S$ and $Y$ if @hardt2016equality:
$$
P\big(\hat{Y} = 1 | S=0, Y=1 \big) = P\big(\hat{Y} = 1 | S=1, Y=1 \big)
$$



```{r}
prob_threshold <- .5

#' Log loss
#' 
#' @param y vector or binary obsevations
#' @param s vector of predicted scores
calculate_log_loss <- function(y, s){
  s_pred <- pmin(pmax(s, 1e-15), 1 - 1e-15)
  mean(-y*log(s_pred) - (1-y)*log(1-s_pred))
}

#' Brier Score
#'
#' The Brier Score \citep{brier_1950}, is expressed as: \deqn{\text{BS} =
#' \frac{1}{n}\sum_{i=1}^{n} \big(\hat{s}(\mathbf{x}_i) - d_i\big)^{2}} where
#' \eqn{d_i \in \{0,1\}} is the observed event for observation \eqn{i}.
#'
#' @param obs vector of observed binary events
#' @param scores vector of scores
#'
#' @references Brier, G. W. (1950). Verification of forecasts expressed in terms
#' of probability. Monthly Weather Review 78: 1–3.
#'
#' @export
brier_score <- function(obs, scores) mean((scores - obs)^2)
```


We will then put in a table all the predictions made in each case: without using counterfactuals, and with using each counterfactual technique applied on women's characteristics. Since we do not get counterfactual values for men, their predictions remain unchanged in each case. We will therefore complete the dataset with their unchanged predictions.
```{r define-tb_complement_men}
tb_complement_men <- 
  factuals_aware |> 
  select(id_indiv, sex, sex_origin, income, pred) |> 
  filter(sex_origin == "Male")
```

We put the predicted values in a table named `tb_pred`.

```{r define-tb_pred}
#| code-fold: true
#| code-summary: Codes to create `tb_pred`.
tb_pred_aware <- 
  factuals_aware |> 
  select(id_indiv, sex, sex_origin, income, pred) |> 
  mutate(type = "factual") |> 
  bind_rows(
    counterfactuals_aware_naive_women |> 
      select(id_indiv, sex, sex_origin, income, pred) |> 
      bind_rows(tb_complement_men) |> 
      mutate(type = "naive")
  ) |> 
  bind_rows(
    counterfactuals_aware_fpt_women |> 
      select(id_indiv, sex, sex_origin, income, pred) |> 
      bind_rows(tb_complement_men) |> 
      mutate(type = "fairadapt")
  ) |> 
  bind_rows(
    counterfactuals_aware_seq_women |> 
      left_join(
        adult |> mutate(id_indiv = row_number()) |> 
          select(id_indiv, income), by = "id_indiv"
      ) |> 
      bind_rows(tb_complement_men) |> 
      select(id_indiv, sex, sex_origin, income, pred) |> 
      mutate(type = "seq")
  ) |> 
  mutate(
    y_binary = as.numeric(income) - 1,
    pred_class = ifelse(
      pred > prob_threshold, levels(adult$income)[2], 
      levels(adult$income)[1]
    ),
    pred_correct = income == pred_class
  )

tb_pred_unaware <- 
  factuals_unaware |> 
  select(id_indiv, sex, sex_origin, income, pred) |> 
  mutate(type = "factual") |> 
  bind_rows(
    counterfactuals_unaware_naive_women |> 
      select(id_indiv, sex, sex_origin, income, pred) |> 
      bind_rows(tb_complement_men) |> 
      mutate(type = "naive")
  ) |> 
  bind_rows(
    counterfactuals_unaware_fpt_women |> 
      select(id_indiv, sex, sex_origin, income, pred) |> 
      bind_rows(tb_complement_men) |> 
      mutate(type = "fairadapt")
  ) |> 
  bind_rows(
    counterfactuals_unaware_seq_women |> 
      left_join(
        adult |> mutate(id_indiv = row_number()) |> 
          select(id_indiv, income), by = "id_indiv") |> 
      bind_rows(tb_complement_men) |> 
      select(id_indiv, sex, sex_origin, income, pred) |> 
      mutate(type = "seq")
  ) |> 
  mutate(
    y_binary = as.numeric(income) - 1,
    pred_class = ifelse(
      pred > prob_threshold, levels(adult$income)[2], 
      levels(adult$income)[1]
    ),
    pred_correct = income == pred_class
  )

tb_pred <- 
  tb_pred_aware |> mutate(model = "aware") |> 
  bind_rows(
    tb_pred_unaware |> mutate(model = "unaware")
  ) |> 
  mutate(
    model = factor(
      model, levels = c("aware", "unaware"),
      labels = c("Aware model", "Unware model")
    ),
    type = factor(type, levels = c("factual", "naive", "fairadapt", "seq"))
  )
```


We compute some metrics on the whole sample, in each case:
```{r define-overall_perf_metrics}
overall_perf_metrics <- 
  tb_pred |> 
  group_by(model, type) |> 
  summarise(
    mean = mean(pred),
    eq_opp_pos = sum(pred * (y_binary == 1)) / (sum(y_binary == 1)),
    eq_opp_neg = sum(pred * (y_binary == 0)) / (sum(y_binary == 0)),
    acc = mean(pred_correct),
    ll = calculate_log_loss(y_binary, pred),
    bs = brier_score(y_binary, pred),
    .groups = "drop"
  ) |> 
  mutate(sex_origin = "Whole")
overall_perf_metrics
```

And then we compute the same metrics but within the group of women and within the group of men.

```{r define-group_perf_metrics}
group_perf_metrics <- 
  tb_pred |> 
  group_by(model, type, sex_origin) |> 
  summarise(
    mean = mean(pred),
    eq_opp_pos = sum(pred * (y_binary == 1)) / (sum(y_binary == 1)),
    eq_opp_neg = sum(pred * (y_binary == 0)) / (sum(y_binary == 0)),
    acc = mean(pred_correct),
    ll = calculate_log_loss(y_binary, pred),
    bs = brier_score(y_binary, pred),
    .groups = "drop"
  )
group_perf_metrics
```


We compute the Counterfactual Demographic Parity:
```{r}
pred_women_factuals <- 
  tb_pred |> filter(type == "factual") |> 
  filter(sex_origin == "Female") |> 
  select(model, id_indiv, pred_origin = pred)

cdp <- tb_pred |> 
  filter(sex_origin == "Female") |> 
  left_join(pred_women_factuals, by = c("id_indiv", "model")) |> 
  group_by(model, type) |> 
  summarise(
    CDP = mean(pred - pred_origin),
    .groups = "drop"
  )
```


The summary of the metrics are shown in @tbl-metrics-adult.

```{r}
#| code-fold: true
#| code-summary: Codes used to create the Table.
#| tbl-cap: Metrics computed on scores predicted by the classifier based on the factuals or the different versions of the counterfactuals, for the aware model (sensitive variable used to train the classifier) and the unaware model (sentitive variable not provided to train the classifier).
#| label: tbl-metrics-adult
tbl_print <- 
  group_perf_metrics |> filter(sex_origin == "Female") |> 
  left_join(cdp, by = c("model", "type")) |> 
  pivot_longer(cols = -c("model", "type", "sex_origin")) |> 
  pivot_wider(names_from = type, values_from = value) |> 
  select(-sex_origin) |> 
  left_join(
    group_perf_metrics |> filter(sex_origin == "Male" & type == "factual") |> 
      pivot_longer(cols = -c("model", "type", "sex_origin"), values_to = "factual_men") |> 
      select(model, name, factual_men),
    by = c("model", "name")
  ) |> 
  left_join(
    overall_perf_metrics |> 
      pivot_longer(cols = -c("model", "type", "sex_origin"), values_to = "factual_whole") |> 
      filter(sex_origin == "Whole", type == "factual") |> 
      select(model, name, factual_whole),
    by = c("model", "name")
  ) |> 
  select(
    model, name, factual_whole, factual_men, factual_women = factual,
    naive, fairadapt, seq
  ) |> 
  mutate(
    name = factor(
      name,
      levels = c("CDP", "mean", "eq_opp_pos", "eq_opp_neg", "acc", "ll", "bs"),
      labels = c("CDP", "Mean", "Eq. Opp. Y=1", "Eq. Opp Y=0", "Accuracy", "Log-loss", "Brier Score")
    )
  ) |> 
  arrange(model, name)

tbl_print[, -1] |> 
  knitr::kable(
    digits = 2,
    col.names = c(
      "Metric", "Factual", "Factual", "Factual", "Naive", "Fairadapt", 
      "Seq. Transport"
    )
  ) |> 
  kableExtra::kable_styling() |> 
  # kableExtra::pack_rows(index = table(tbl_print$sex_origin))
  # kableExtra::collapse_rows(columns = 1, valign = "top")
  kableExtra::add_header_above(
    c(" " = 1, "Whole" = "1", "Men" = 1, "Women" = 4)
  ) |> 
  kableExtra::pack_rows(index = table(tbl_print$model))
```


```{r, eval=FALSE}
#| code-fold: true
#| code-summary: LaTeX code
knitr::kable(
  tbl_print[, -1], format = "latex", booktabs = TRUE, digits = 2,
) |> 
  kableExtra::kable_styling("striped", full_width = F) %>%
  kableExtra::add_header_above(
    c(" " = 1, "Whole" = 1, "Men" = 1, "Women" = 4)
  ) |> 
  kableExtra::pack_rows(index = table(tbl_print$model))
```


```{r}
# Brouillon
tb_pred$type |> unique()

lvl_neg <- levels(tb_pred$income)[1]
lvl_pos <- levels(tb_pred$income)[2]

tb_pred |> 
  group_by(model, type, sex_origin) |> 
  summarise(
    TP = sum(income == lvl_pos & pred_class == lvl_pos),
    FP = sum(income == lvl_neg & pred_class == lvl_pos),
    FN = sum(income == lvl_pos & pred_class == lvl_neg),
    TN = sum(income == lvl_neg & pred_class == lvl_neg),
    P = TP + FN,
    N = FP + TN
  ) |> 
  rowwise() |> 
  mutate(
    TPR = TP/P,
    FPR = FN / N
  ) |> 
  group_by(model, type) |> 
  mutate(
    eq_odds_diff = abs(diff(TPR))
  )
```


