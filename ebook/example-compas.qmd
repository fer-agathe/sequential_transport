# COMPAS Dataset {#sec-compas-dataset}

::: callout-note

## Objectives

In this chapter, we extend the analysis from the previous part to the [COMPAS](https://github.com/propublica/compas-analysis) dataset (@Larson2016). We use a cleaned version of this dataset available in the {[fairadapt](https://github.com/dplecko/fairadapt)} R package.

:::

```{r setup, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: Required packages and definition of colours.

# Required packages----
library(tidyverse)
library(devtools)

# Graphs----
font_main = font_title = 'Times New Roman'
extrafont::loadfonts(quiet = T)
face_text='plain'
face_title='plain'
size_title = 14
size_text = 11
legend_size = 11

global_theme <- function() {
  theme_minimal() %+replace%
    theme(
      text = element_text(family = font_main, size = size_text, face = face_text),
      legend.text = element_text(family = font_main, size = legend_size),
      axis.text = element_text(size = size_text, face = face_text), 
      plot.title = element_text(
        family = font_title, 
        size = size_title, 
        hjust = 0.5
      ),
      plot.subtitle = element_text(hjust = 0.5)
    )
}

# Seed
set.seed(2025)

colours_all <- c(
  "factual" = "black",
  "source" = "#00A08A",
  "reference" = "#F2AD00",
  "naive" = "gray",
  "ot" = "#0072B2",
  "fairadapt" = '#D55E00',
  "seq" = "#CC79A7"
)
```


```{r}
load_all("../seqtransfairness/")
# if the package is installed, it is possible to use
# library(seqtransfairness)
```

The COMPAS (Correctional Offender Management Profiling for Alternative Sanctions) dataset contains information used to predict whether criminal defendants are likely of recidivism (Y). The data contains real observations from Broward County, Florida. Each row gives information on individuals released on parole and whether they reoffended within two years (Y). Other characteristics such as the sex of the individual, the number of juvenile felonies, the number of juvenile misdemeanors, the number of other juvenile offenses, the number of prior offenses and the degree of charge (with two values `F` for felony, and `M` for misdemeanor). We will use the race of individuals as the sensitive attribute (S).


```{r define-vars}
vars <- c(
  "age", "sex", "juv_fel_count",
  "juv_misd_count", "juv_other_count", "priors_count",
  "c_charge_degree", "race", "two_year_recid"
)
s <- "race"
y <- "two_year_recid"
```

The data can be loaded as follows:

```{r compas-dataset}
library(fairadapt)
# reading in the COMPAS data
data("compas", package = "fairadapt")
compas <- 
  compas |> 
  as_tibble() |> 
  select(!!vars) |> 
  mutate(race = fct_relevel(race, "Non-White", "White"))
```


We can have a quick glance at the proportion of Non-White individuals and White individuals among people who reoffended or not.
```{r show-prop-gender-income}
compas |> count(two_year_recid, race) |> 
  group_by(two_year_recid) |> 
  mutate(pct_race = round(100* n / sum(n), 2))
```

We will assume the same causal graph as in @plevcko2020fair (Figure 4, p. 27) and use their [codes from their Github](https://github.com/dplecko/fairadapt/blob/main/jmlr-paper/real-data/Figures-6-7-8-9.R) to create the adjacency matrix.

```{r}
# Adjacency matrix
adj_mat <- matrix(
  0, 
  ncol = ncol(compas), nrow = ncol(compas),
  dimnames = list(vars, vars)
)

# adding the edges to the matrix
adj_mat[
  c("race", "sex", "age"), 
  c("juv_fel_count", "juv_misd_count", "juv_other_count", "priors_count",
    "c_charge_degree", "two_year_recid")
] <- 1
adj_mat[c("juv_fel_count", "juv_misd_count", "juv_other_count"),
        c("priors_count", "c_charge_degree", "two_year_recid")] <- 1
adj_mat["priors_count", c("c_charge_degree", "two_year_recid")] <- 1
adj_mat["c_charge_degree", "two_year_recid"] <- 1

adj_mat
```

```{r}
#| fig-cap: "Assumed Causal Graph"
#| label: fig-causal-graph-compas
causal_graph <- fairadapt::graphModel(adj_mat)
plot(causal_graph)
```

We can visualize this causal graph with a prettier representation, using a tikz picture.

```{r}
#| code-fold: true
#| code-summary: Codes to create Tikz from an adjacency matrix.
#' Add a tikz graph in a quarto HTML document
#'
#' @param tikz_code Tikz code.
add_tikz_graph <- function(tikz_code,
                           label,
                           caption = "Causal Graph",
                           echo = "true",
                           code_fold = "true",
                           fig_ext = "png",
                           code_summary = "Tikz code") {
  
  res <- knitr::knit_child(
    text = glue::glue(r"(
             ```{{tikz}}
             #| echo: {echo}
             #| label: {label}
             #| fig-cap: {caption}
             #| fig-ext: {fig_ext}
             #| code-fold: {code_fold}
             #| code-summary: {code_summary}
             \usetikzlibrary{{arrows}}
             {tikz_code}
             ```)"
    ),
    quiet = TRUE
  )
  knitr::asis_output(res)
}

colour_nodes <- c(
  "age" = "yellow!60", 
  "sex" = "yellow!60", 
  "juv_fel_count" = "yellow!60",
  "juv_misd_count" = "yellow!60", 
  "juv_other_count" = "yellow!60",
  "priors_count" = "yellow!60",
  "c_charge_degree" = "yellow!60", 
  "race" = "red!30",
  "two_year_recid" = "blue!30"
)

# Then, in the document:
# `r add_tikz_graph(tikz_code = causal_graph_tikz(adj_mat, colour_nodes), label = "fig-causal-graph-compas-2", caption = "\"Assumed Causal Graph\"", echo = "true")`
```

`r add_tikz_graph(tikz_code = causal_graph_tikz(adj_mat, colour_nodes), label = "fig-causal-graph-compas-2", caption = "\"Assumed Causal Graph\"", echo = "true")`



## Classifier

We load functions defined in our small package (notably, `split_dataset()`{.R}):

```{r}
library(devtools)
load_all("../seqtransfairness/")
```


We fit a logistic regression model on the data to predict the outcome binary variable. First, we split the dataset into two sets: train (70%) and test (30%).
```{r define-data_train}
seed <- 2025
sets <- split_dataset(compas, seed, train_ratio = 0.7)
data_train <- sets$data_train
data_test <- sets$data_test
```

As in [Chapter -@sec-classifier], we train two models:

1. **unaware logistic regression classifier**: model without including the sensitive attribute.
2. **aware logistic regression classifier**: model with the sensitive attribute included in the set of features.


To do so, we use the training function, `log_reg_train()`{.R}, defined in our small package. When the two models are trained, we extract the predicted values on both the train set and the test set.

```{r define-pred_unaware}
# Unaware logistic regression classifier (model without S)
pred_unaware <- log_reg_train(
  data_train, data_test, s = s, y = y, type = "unaware"
)
pred_unaware_train <- pred_unaware$pred_train
pred_unaware_test <- pred_unaware$pred_test

# Aware logistic regression classifier (model with S)
pred_aware <- log_reg_train(
  data_train, data_test, s = s, y = y, type = "aware"
)
pred_aware_train <- pred_aware$pred_train
pred_aware_test <- pred_aware$pred_test
```

We create a table for each model, with the sensitive attribute and the predicted value by the model ($\hat{y}$), only for observations from the test set.

```{r define-df_test_unaware}
df_test_unaware <- tibble(
  S = data_test |> pull(!!s),
  pred = pred_unaware_test
)

df_test_aware <- tibble(
  S = data_test |> pull(!!s),
  pred = pred_aware_test
)
```


### Predictions

We predict values with the unaware model on the factuals:

```{r define-model_unaware}
model_unaware <- pred_unaware$model
pred_unaware_all <- predict(
  model_unaware,
  newdata = compas,
  type = "response"
)
```

And with the aware model:
```{r define-model_aware}
model_aware <- pred_aware$model
pred_aware_all <- predict(
  model_aware,
  newdata = compas,
  type = "response"
)
```

### Saving Objects

```{r save-classifier-results}
save(pred_aware, file = "../data/pred_aware_compas.rda")
save(pred_unaware, file = "../data/pred_unaware_compas.rda")
save(pred_unaware_all, file = "../data/pred_unaware_all_compas.rda")
save(pred_aware_all, file = "../data/pred_aware_all_compas.rda")
```

## Naive approach: _ceteris paribus_

Let us change the sensitive attribute of individuals from the source group (Non-White) to the target group (White). Then, we use both models (unaware and aware) to predict the target binary variable.

```{r define-pred_unaware_naive}
pred_unaware_naive_nonwhite <- predict(
  model_unaware,
  newdata = compas |> filter(race == "Non-White") |> mutate(race = "White"),
  type = "response"
)
pred_aware_naive_nonwhite <- predict(
  model_aware,
  newdata = compas |> filter(race == "Non-White") |>  mutate(race = "White"),
  type = "response"
)

ind_nonwhite <- which(compas$race == "Non-White")
ind_white <- which(compas$race == "White")

counterfactuals_unaware_naive_nonwhite <- 
  compas |> filter(race == "Non-White") |> 
  mutate(
    race_origin = race,
    race = "White",
    pred = pred_unaware_naive_nonwhite,
    type = "counterfactual",
    id_indiv = ind_nonwhite
  )
counterfactuals_aware_naive_nonwhite <- 
  compas |> filter(race == "Non-White") |> 
  mutate(
    race_origin = race,
    race = "White",
    pred = pred_aware_naive_nonwhite,
    type = "counterfactual",
    id_indiv = ind_nonwhite
  )
```

### Unaware Model

Let us have a look at the distribution of the predicted scores of the classifier in both groups, when the predictions are made after setting the race attribute of all Non-White to White. Since the model does not use the sensitive attribute, changing it will result in absolutely no change in its predictions in this case.

The predicted values using the initial characteristics (the factuals), for the unaware model are stored in the object `pred_unaware_all`. We put in a table the initial characteristics (factuals) and the prediction made by the unaware model:

```{r define-factuals_unaware}
factuals_unaware <-
  compas |> 
  as_tibble() |>
  mutate(
    race_origin = race,
    pred = pred_unaware_all,
    type = "factual"
  ) |> 
    mutate(id_indiv = row_number())
```


```{r define-unaware_naive}
unaware_naive_nonwhite <- 
  factuals_unaware |> mutate(race_origin = race) |> 
  bind_rows(counterfactuals_unaware_naive_nonwhite)
```

The unaware model is blind to the sensitive attribute. Hence, changing the sensitive attribute does not affect the predicted scores.

```{r, message=FALSE, warning=FALSE}
#| fig-cap: "Unaware model, Sensitive: Race, Non-White -> White"
#| label: fig-naive-unaware-compas-ref-white
#| fig-width: 8
ggplot(
  unaware_naive_nonwhite |> mutate(
    group = case_when(
      race_origin =="Non-White" & race == "Non-White" ~ "Non-White (Original)",
      race_origin =="Non-White" & race == "White" ~ "Non-White -> White (Counterfactual)",
      race_origin =="White" & race == "White" ~ "White (Original)"
    ),
    group = factor(
      group, 
      levels = c(
        "Non-White (Original)", "Non-White -> White (Counterfactual)", "White (Original)"
      )
    )
  ),
  aes(x = pred, fill = group, colour = group)
) +
  geom_histogram(
    mapping = aes(
      y = after_stat(density)), alpha = 0.5, colour = NA,
    position = "identity", binwidth = 0.05
  ) +
  geom_density(alpha = 0.3, linewidth = 1) +
  facet_wrap(~race) +
  scale_fill_manual(
    NULL, values = c(
      "Non-White (Original)" = colours_all[["source"]],
      "Non-White -> White (Counterfactual)" = colours_all[["naive"]],
      "White (Original)" = colours_all[["reference"]]
    )
  ) +
  scale_colour_manual(
    NULL, values = c(
      "Non-White (Original)" = colours_all[["source"]],
      "Non-White -> White (Counterfactual)" = colours_all[["naive"]],
      "White (Original)" = colours_all[["reference"]]
    )
  ) +
  labs(
    x = "Predictions for Y",
    y = "Density"
  ) +
  global_theme() +
  theme(legend.position = "bottom")
```

Then, we focus on the distribution of predicted scores for ccounterfactual of Non-White individuals and factuals of White individuals Again, since the model is blind to the sensitive attribute, the distributions are perfectly aligned.

```{r, message=FALSE, warning=FALSE}
#| fig-cap: "Distribution of Predicted Scores for Minority Class (Non-White), Unaware model, Sensitive: Race, Non-White -> White"
#| label: fig-naive-unaware-race-ref-white-source-only
#| code-fold: true
#| fig-width: 7
#| code-summary: Codes used to create the Figure.
ggplot(
  data = unaware_naive_nonwhite |> 
    mutate(
      group = case_when(
        race_origin =="Non-White" & race == "Non-White" ~ "Non-White (Original)",
        race_origin =="Non-White" & race == "White" ~ "Non-White -> White (Counterfactual)",
        race_origin =="White" & race == "White" ~ "White (Original)"
      ),
      group = factor(
        group, 
        levels = c(
          "Non-White (Original)", "Non-White -> White (Counterfactual)", "White (Original)"
        )
      )
    ) |> 
    filter(race_origin =="Non-White"),
  mapping = aes(x = pred, fill = group)
) +
  geom_histogram(
    mapping = aes(y = after_stat(density)), 
    alpha = 0.5, position = "identity", binwidth = 0.05
  ) +
  geom_density(alpha = 0.5) +
  scale_fill_manual(
    NULL, values = c(
      "Non-White (Original)" = colours_all[["source"]],
      "Non-White -> White (Counterfactual)" = colours_all[["naive"]],
      "White (Original)" = colours_all[["reference"]]
    )
  ) +
  scale_colour_manual(
    NULL, values = c(
      "Non-White (Original)" = colours_all[["source"]],
      "Non-White -> White (Counterfactual)" = colours_all[["naive"]],
      "White (Original)" = colours_all[["reference"]]
    )
  ) +
  labs(
    x = "Predictions for Y",
    y = "Density"
  ) +
  global_theme() +
  theme(legend.position = "bottom")
```



### Aware Model

We turn to the aware model. This time, the sensitive attribute is used by the classifier when it is trained. Hence, changing the sensitive attribute of individuals in the source group to that of the target group may change the predicted values for the binary outcome variable.

The predicted values by the model, on the initial characteristics (on the factuals) are stored in the `pred_aware_all` object.

We create a tibble with the factuals and the predictions by the aware model:
```{r define-fairadapt-factuals_aware}
factuals_aware <-
  compas |> 
  as_tibble() |>
  mutate(
    race_origin = race,
    pred = pred_aware_all,
    type = "factual"
  ) |> 
    mutate(id_indiv = row_number())
```

```{r define-aware_naive}
aware_naive_nonwhite <- 
  factuals_aware |> mutate(race_origin = race) |> 
  bind_rows(counterfactuals_aware_naive_nonwhite)
```

```{r, message=FALSE, warning=FALSE}
#| fig-cap: "Aware model, Sensitive: Race, Non-White -> White"
#| label: fig-naive-aware-compas-ref-white
#| fig-width: 8
ggplot(
  aware_naive_nonwhite |> mutate(
    group = case_when(
      race_origin =="Non-White" & race == "Non-White" ~ "Non-White (Original)",
      race_origin =="Non-White" & race == "White" ~ "Non-White -> White (Counterfactual)",
      race_origin =="White" & race == "White" ~ "White (Original)"
    ),
    group = factor(
      group, 
      levels = c(
        "Non-White (Original)", "Non-White -> White (Counterfactual)", "White (Original)"
      )
    )
  ),
  aes(x = pred, fill = group, colour = group)
) +
  geom_histogram(
    mapping = aes(
      y = after_stat(density)), alpha = 0.5, colour = NA,
    position = "identity", binwidth = 0.05
  ) +
  geom_density(alpha = 0.3, linewidth = 1) +
  facet_wrap(~race) +
  scale_fill_manual(
    NULL, values = c(
      "Non-White (Original)" = colours_all[["source"]],
      "Non-White -> White (Counterfactual)" = colours_all[["naive"]],
      "White (Original)" = colours_all[["reference"]]
    )
  ) +
  scale_colour_manual(
    NULL, values = c(
      "Non-White (Original)" = colours_all[["source"]],
      "Non-White -> White (Counterfactual)" = colours_all[["naive"]],
      "White (Original)" = colours_all[["reference"]]
    )
  ) +
  labs(
    x = "Predictions for Y",
    y = "Density"
  ) +
  global_theme() +
  theme(legend.position = "bottom")
```

Then, we focus on the distribution of predicted scores for counterfactual of Non-White individuals and factuals of White individuals

```{r, message=FALSE, warning=FALSE}
#| fig-cap: "Distribution of Predicted Scores for Minority Class (Non-White), Aware model, Sensitive: Race, Non-White -> White"
#| label: fig-naive-aware-race-ref-white-source-only
#| code-fold: true
#| fig-width: 7
#| code-summary: Codes used to create the Figure.
ggplot(
  data = aware_naive_nonwhite |> 
    mutate(
      group = case_when(
        race_origin =="Non-White" & race == "Non-White" ~ "Non-White (Original)",
        race_origin =="Non-White" & race == "White" ~ "Non-White -> White (Counterfactual)",
        race_origin =="White" & race == "White" ~ "White (Original)"
      ),
      group = factor(
        group, 
        levels = c(
          "Non-White (Original)", "Non-White -> White (Counterfactual)", "White (Original)"
        )
      )
    ) |> 
    filter(race_origin =="Non-White"),
  mapping = aes(x = pred, fill = group)
) +
  geom_histogram(
    mapping = aes(y = after_stat(density)), 
    alpha = 0.5, position = "identity", binwidth = 0.05
  ) +
  geom_density(alpha = 0.5) +
  scale_fill_manual(
    NULL, values = c(
      "Non-White (Original)" = colours_all[["source"]],
      "Non-White -> White (Counterfactual)" = colours_all[["naive"]],
      "White (Original)" = colours_all[["reference"]]
    )
  ) +
  scale_colour_manual(
    NULL, values = c(
      "Non-White (Original)" = colours_all[["source"]],
      "Non-White -> White (Counterfactual)" = colours_all[["naive"]],
      "White (Original)" = colours_all[["reference"]]
    )
  ) +
  labs(
    x = "Predictions for Y",
    y = "Density"
  ) +
  global_theme() +
  theme(legend.position = "bottom")
```

## Fairadapt {#sec-compas-dataset-fairadapt}

We have already assumed a causal graph (see @fig-causal-graph-compas-2).

Let us consider that we want to build counterfactuals for Non-White individuals: what if the individual had been White and not Non-White?

Let us have a look at the levels of our sensitive variable:
```{r levels-sensitive}
levels(compas |> pull(!!s))
```

Two configurations will be considered in turn:

1. The reference class consists of White individuals, and fairadapt will be used to obtain the counterfactual values for Non-White individuals as if they had been White individuals.
1. The reference class consists of Non-White individuals, and fairadapt will be used to obtain the counterfactual values for White individuals as if they had been Non-White individuals.


```{r define-adapt_df_nonwhite}
# Non-White (factuals) --> White (counterfactuals)
df_fpt <- compas |> mutate(race = fct_relevel(race, "Non-White", after = Inf))
fpt_model_nonwhite <- fairadapt(
  two_year_recid ~ .,
  train.data = df_fpt,
  prot.attr = "race", adj.mat = adj_mat,
  quant.method = rangerQuants
)
adapt_df_nonwhite <- adaptedData(fpt_model_nonwhite)

# White (factuals) --> Non-White (counterfactuals)
df_fpt <- df_fpt |> mutate(race = fct_relevel(race, "White", after = Inf))
fpt_model_white <- fairadapt(
  two_year_recid ~ .,
  train.data = df_fpt,
  prot.attr = "race", adj.mat = adj_mat,
  quant.method = rangerQuants
)
adapt_df_white <- adaptedData(fpt_model_white)
```


Let us wrap up:

- we have **two predictive models** for the target variable (whether the person has re-offended within two years): 

  - **unaware** (without S)
  - **aware** (with S)

- we have the **counterfactual characteristics** obtained with fairadapt in two situations depending on the reference class:

  - **Non-White** individuals as **reference**
  - **White** individuals as **reference**.
  
The predictive models will be used to **compare predictions** made using:

- Raw characteristics (initial characteristics).
- Characteristics possibly altered through fairadapt for individuals who were not in the reference group (i.e., using counterfactuals).

### Unaware Model

Let us build a dataset containing only counterfactual characteristics obtained with fairadapt.

```{r define-df_counterfactuals_fpt, message=FALSE, warning=FALSE}
pred_unaware_fpt_nonwhite <- predict(
  model_unaware, 
  newdata = adapt_df_nonwhite[ind_nonwhite, ], 
  type = "response"
)
pred_unaware_fpt_white <- predict(
  model_unaware, 
  newdata = adapt_df_white[ind_white, ],
  type = "response"
)
```

We create a table with the counterfactual characteristics and the prediction by the unaware model:

```{r define-pred_unaware_fpt}
counterfactuals_unaware_fpt_nonwhite <- 
  as_tibble(adapt_df_nonwhite[ind_nonwhite, ]) |> 
  mutate(
    race_origin = compas$race[ind_nonwhite],
    pred = pred_unaware_fpt_nonwhite,
    type = "counterfactual",
    id_indiv = ind_nonwhite
  )

counterfactuals_unaware_fpt_white <- 
  as_tibble(adapt_df_white[ind_white, ]) |> 
  mutate(
    race_origin = compas$race[ind_white],
    pred = pred_unaware_fpt_white,
    type = "counterfactual",
    id_indiv = ind_white
  )
```


We merge the two datasets, `factuals_unaware` and `counterfactuals_unaware_fpt_nonwhite` (or `counterfactuals_unaware_fpt_white`) in a single one.
```{r define-unaware_fpt}
unaware_fpt_nonwhite <- 
  factuals_unaware |> mutate(race_origin = race) |> 
  bind_rows(counterfactuals_unaware_fpt_nonwhite)
  
unaware_fpt_white <- 
  factuals_unaware |> mutate(race_origin = race) |> 
  bind_rows(counterfactuals_unaware_fpt_white)
```


:::{.panel-tabset}

#### Non-White -> White

```{r, message=FALSE, warning=FALSE}
#| fig-cap: "Unaware model, Sensitive: Race, Non-White -> White"
#| label: fig-fpt-unaware-race-ref-white
#| code-fold: true
#| fig-width: 7
#| code-summary: Codes used to create the Figure.
ggplot(
  data = unaware_fpt_nonwhite |> 
    mutate(
      group = case_when(
        race_origin =="Non-White" & race == "Non-White" ~ "Non-White (Original)",
        race_origin =="Non-White" & race == "White" ~ "Non-White -> White (Counterfactual)",
        race_origin =="White" & race == "White" ~ "White (Original)"
      ),
      group = factor(
        group, 
        levels = c(
          "Non-White (Original)", "Non-White -> White (Counterfactual)", "White (Original)"
        )
      )
    ),
  aes(x = pred, fill = group, colour = group)
) +
  geom_histogram(
    mapping = aes(
      y = after_stat(density)), alpha = 0.5, colour = NA,
    position = "identity", binwidth = 0.05
  ) +
  geom_density(alpha = 0.3, linewidth = 1) +
  facet_wrap(~race) +
  scale_fill_manual(
    NULL, values = c(
      "Non-White (Original)" = colours_all[["source"]],
      "Non-White -> White (Counterfactual)" = colours_all[["fairadapt"]],
      "White (Original)" = colours_all[["reference"]]
    )
  ) +
  scale_colour_manual(
    NULL, values = c(
      "Non-White (Original)" = colours_all[["source"]],
      "Non-White -> White (Counterfactual)" = colours_all[["fairadapt"]],
      "White (Original)" = colours_all[["reference"]]
    )
  ) +
  labs(
    x = "Predictions for Y",
    y = "Density"
  ) +
  global_theme() +
  theme(legend.position = "bottom")
```

#### White -> Non-White

```{r, message=FALSE, warning=FALSE}
#| fig-cap: "Unaware model, Sensitive: Race, White -> Non-White"
#| label: fig-fpt-unaware-race-ref-nonwhite
#| code-fold: true
#| fig-width: 7
#| code-summary: Codes used to create the Figure.
ggplot(
  data = unaware_fpt_white |> 
    mutate(
      group = case_when(
        race_origin =="White" & race == "White" ~ "White (Original)",
        race_origin =="White" & race == "Non-White" ~ "White -> Non-White (Counterfactual)",
        race_origin =="Non-White" & race == "Non-White" ~ "Non-White (Original)"
      ),
      group = factor(
        group, 
        levels = c(
          "White (Original)", "White -> Non-White (Counterfactual)", "Non-White (Original)"
        )
      )
    ),
  aes(x = pred, fill = group, colour = group)
) +
  geom_histogram(
    mapping = aes(
      y = after_stat(density)), alpha = 0.5, colour = NA,
    position = "identity", binwidth = 0.05
  ) +
  geom_density(alpha = 0.3, linewidth = 1) +
  facet_wrap(~race) +
  scale_fill_manual(
    NULL, values = c(
      "White (Original)" = colours_all[["source"]],
      "White -> Non-White (Counterfactual)" = colours_all[["fairadapt"]],
      "Non-White (Original)" = colours_all[["reference"]]
    )
  ) +
  scale_colour_manual(
    NULL, values = c(
      "White (Original)" = colours_all[["source"]],
      "White -> Non-White (Counterfactual)" = colours_all[["fairadapt"]],
      "Non-White (Original)" = colours_all[["reference"]]
    )
  ) +
  labs(
    x = "Predictions for Y",
    y = "Density"
  ) +
  global_theme() +
  theme(legend.position = "bottom")
```

:::

Then, we focus on the distribution of predicted scores for counterfactual of Non-White individuals and factuals of White individuals.


:::{.panel-tabset}

#### Non-White -> White

```{r, message=FALSE, warning=FALSE}
#| fig-cap: "Distribution of Predicted Scores for Minority Class (Non-White), Unaware model, Sensitive: Race, Non-White -> White"
#| label: fig-fpt-unaware-race-ref-white-source-only
#| code-fold: true
#| fig-width: 7
#| code-summary: Codes used to create the Figure.
ggplot(
  data = unaware_fpt_nonwhite |> 
    mutate(
      group = case_when(
        race_origin =="Non-White" & race == "Non-White" ~ "Non-White (Original)",
        race_origin =="Non-White" & race == "White" ~ "Non-White -> White (Counterfactual)",
        race_origin =="White" & race == "White" ~ "White (Original)"
      ),
      group = factor(
        group, 
        levels = c(
          "Non-White (Original)", "Non-White -> White (Counterfactual)", "White (Original)"
        )
      )
    ) |> 
    filter(race_origin =="Non-White"),
  mapping = aes(x = pred, fill = group)
) +
  geom_histogram(
    mapping = aes(y = after_stat(density)), 
    alpha = 0.5, position = "identity", binwidth = 0.05
  ) +
  geom_density(alpha = 0.5) +
  scale_fill_manual(
    NULL, values = c(
      "Non-White (Original)" = colours_all[["source"]],
      "Non-White -> White (Counterfactual)" = colours_all[["fairadapt"]],
      "White (Original)" = colours_all[["reference"]]
    )
  ) +
  scale_colour_manual(
    NULL, values = c(
      "Non-White (Original)" = colours_all[["source"]],
      "Non-White -> White (Counterfactual)" = colours_all[["fairadapt"]],
      "White (Original)" = colours_all[["reference"]]
    )
  ) +
  labs(
    x = "Predictions for Y",
    y = "Density"
  ) +
  global_theme() +
  theme(legend.position = "bottom")
```

#### White -> Non-White

```{r, message=FALSE, warning=FALSE}
#| fig-cap: "Distribution of Predicted Scores for Minority Class (White), Unaware model, Sensitive: Race, White -> Non-White"
#| label: fig-fpt-unaware-race-ref-nonwhite-source-only
#| code-fold: true
#| fig-width: 7
#| code-summary: Codes used to create the Figure.
ggplot(
  data = unaware_fpt_white |> 
    mutate(
      group = case_when(
        race_origin =="White" & race == "White" ~ "White (Original)",
        race_origin =="White" & race == "Non-White" ~ "White -> Non-White (Counterfactual)",
        race_origin =="Non-White" & race == "Non-White" ~ "Non-White (Original)"
      ),
      group = factor(
        group, 
        levels = c(
          "White (Original)", "White -> Non-White (Counterfactual)", "Non-White (Original)"
        )
      )
    ) |> 
    filter(race_origin =="White"),
  mapping = aes(x = pred, fill = group)) +
  geom_histogram(
    mapping = aes(y = after_stat(density)), 
    alpha = 0.5, position = "identity", binwidth = 0.05
  ) +
  geom_density(alpha = 0.5) +
  scale_fill_manual(
    NULL, values = c(
      "White (Original)" = colours_all[["source"]],
      "White -> Non-White (Counterfactual)" = colours_all[["fairadapt"]]
    )
  ) +
  scale_colour_manual(
    NULL, values = c(
      "White (Original)" = colours_all[["source"]],
      "White -> Non-White (Counterfactual)" = colours_all[["fairadapt"]]
    )
  ) +
  labs(
    x = "Predictions for Y",
    y = "Density"
  ) +
  global_theme() +
  theme(legend.position = "bottom")
```

:::


### Aware Model

Now, we turn to the model that includes the sensitive attribute, i.e., the aware model. Let us get the predicted values for the counterfactuals, using the aware model:

```{r predict-fairadapt-aware-counterfactuals, message=FALSE, warning=FALSE}
pred_aware_fpt_nonwhite <- predict(
  model_aware, 
  newdata = adapt_df_nonwhite[ind_nonwhite, ], 
  type = "response"
)
pred_aware_fpt_white <- predict(
  model_aware, 
  newdata = adapt_df_white[ind_white, ],
  type = "response"
)
```

Then, we create a table with the counterfactuals and the predicted value by the aware model:
```{r define-fairadapt-counterfactuals_aware}
counterfactuals_aware_fpt_nonwhite <- 
  as_tibble(adapt_df_nonwhite[ind_nonwhite, ]) |> 
  mutate(
    race_origin = compas$race[ind_nonwhite],
    pred = pred_aware_fpt_nonwhite,
    type = "counterfactual",
    id_indiv = ind_nonwhite
  )

counterfactuals_aware_fpt_white <- 
  as_tibble(adapt_df_white[ind_white, ]) |> 
  mutate(
    race_origin = compas$race[ind_white],
    pred = pred_aware_fpt_white,
    type = "counterfactual",
    id_indiv = ind_white
  )
```

We merge the two datasets, `factuals_unaware` and `counterfactuals_aware_fpt_nonwhite` (or `counterfactuals_aware_fpt_white`) in a single one.

```{r define-aware_fpt_nonwhite}
# dataset with counterfactuals, for aware model
aware_fpt_nonwhite <- 
  factuals_aware |> mutate(rac_origin = race) |> 
  bind_rows(counterfactuals_aware_fpt_nonwhite)
  
aware_fpt_white <- 
  factuals_aware |> mutate(race_origin = race) |> 
  bind_rows(counterfactuals_aware_fpt_white)
```


:::{.panel-tabset}

#### Non-White -> White

```{r, message=FALSE, warning=FALSE}
#| fig-cap: "Aware model, Sensitive: Race, Reference: White individuals"
#| label: fig-fpt-aware-race-ref-white
#| code-fold: true
#| fig-width: 7
#| code-summary: Codes used to create the Figure.
ggplot(
  data = aware_fpt_nonwhite |> 
    mutate(
      group = case_when(
        race_origin =="Non-White" & race == "Non-White" ~ "Non-White (Original)",
        race_origin =="Non-White" & race == "White" ~ "Non-White -> White (Counterfactual)",
        race_origin =="White" & race == "White" ~ "White (Original)"
      ),
      group = factor(
        group, 
        levels = c(
          "Non-White (Original)", "Non-White -> White (Counterfactual)", "White (Original)"
        )
      )
    ),
  aes(x = pred, fill = group, colour = group)
) +
  geom_histogram(
    mapping = aes(
      y = after_stat(density)), alpha = 0.5, colour = NA,
    position = "identity", binwidth = 0.05
  ) +
  geom_density(alpha = 0.3, linewidth = 1) +
  facet_wrap(~race) +
  scale_fill_manual(
    NULL, values = c(
      "Non-White (Original)" = colours_all[["source"]],
      "Non-White -> White (Counterfactual)" = colours_all[["fairadapt"]],
      "White (Original)" = colours_all[["reference"]]
    )
  ) +
  scale_colour_manual(
    NULL, values = c(
      "Non-White (Original)" = colours_all[["source"]],
      "Non-White -> White (Counterfactual)" = colours_all[["fairadapt"]],
      "White (Original)" = colours_all[["reference"]]
    )
  ) +
  labs(
    x = "Predictions for Y",
    y = "Density"
  ) +
  global_theme() +
  theme(legend.position = "bottom")
```

#### White -> Non-White

```{r, message=FALSE, warning=FALSE}
#| fig-cap: "Aware model, Sensitive: Race, Reference: Non-White individuals"
#| label: fig-fpt-aware-race-ref-nonwhite
#| code-fold: true
#| fig-width: 7
#| code-summary: Codes used to create the Figure.
ggplot(
  data = aware_fpt_white |> 
    mutate(
      group = case_when(
        race_origin =="White" & race == "White" ~ "White (Original)",
        race_origin =="White" & race == "Non-White" ~ "White -> Non-White (Counterfactual)",
        race_origin =="Non-White" & race == "Non-White" ~ "Non-White (Original)"
      ),
      group = factor(
        group, 
        levels = c(
          "White (Original)", "White -> Non-White (Counterfactual)", "Non-White (Original)"
        )
      )
    ),
  aes(x = pred, fill = group, colour = group)
) +
  geom_histogram(
    mapping = aes(
      y = after_stat(density)), alpha = 0.5, colour = NA,
    position = "identity", binwidth = 0.05
  ) +
  geom_density(alpha = 0.3, linewidth = 1) +
  facet_wrap(~race) +
  scale_fill_manual(
    NULL, values = c(
      "White (Original)" = colours_all[["source"]],
      "White -> Non-White (Counterfactual)" = colours_all[["fairadapt"]],
      "Non-White (Original)" = colours_all[["reference"]]
    )
  ) +
  scale_colour_manual(
    NULL, values = c(
      "White (Original)" = colours_all[["source"]],
      "White -> Non-White (Counterfactual)" = colours_all[["fairadapt"]],
      "Non-White (Original)" = colours_all[["reference"]]
    )
  ) +
  labs(
    x = "Predictions for Y",
    y = "Density"
  ) +
  global_theme() +
  theme(legend.position = "bottom")
```

:::
  
Then, we focus on the distribution of predicted scores for counterfactual of Non-White individuals and factuals of White individuals.


:::{.panel-tabset}

#### Non-White -> White

```{r, message=FALSE, warning=FALSE}
#| fig-cap: "Distribution of Predicted Scores for Minority Class (Non-White), Aware model, Sensitive: Race, Reference: White individuals"
#| label: fig-fpt-aware-race-ref-white-source-only
#| code-fold: true
#| fig-width: 7
#| code-summary: Codes used to create the Figure.
ggplot(
  data = aware_fpt_nonwhite |> 
    mutate(
      group = case_when(
        race_origin =="Non-White" & race == "Non-White" ~ "Non-White (Original)",
        race_origin =="Non-White" & race == "White" ~ "Non-White -> White (Counterfactual)",
        race_origin =="White" & race == "White" ~ "White (Original)"
      ),
      group = factor(
        group, 
        levels = c(
          "Non-White (Original)", "Non-White -> White (Counterfactual)", "White (Original)"
        )
      )
    ) |> 
    filter(race_origin =="Non-White"),
  mapping = aes(x = pred, fill = group)
) +
  geom_histogram(
    mapping = aes(y = after_stat(density)), 
    alpha = 0.5, position = "identity", binwidth = 0.05
  ) +
  geom_density(alpha = 0.5) +
  scale_fill_manual(
    NULL, values = c(
      "Non-White (Original)" = colours_all[["source"]],
      "Non-White -> White (Counterfactual)" = colours_all[["fairadapt"]],
      "White (Original)" = colours_all[["reference"]]
    )
  ) +
  scale_colour_manual(
    NULL, values = c(
      "Non-White (Original)" = colours_all[["source"]],
      "Non-White -> White (Counterfactual)" = colours_all[["fairadapt"]],
      "White (Original)" = colours_all[["reference"]]
    )
  ) +
  labs(
    x = "Predictions for Y",
    y = "Density"
  ) +
  global_theme() +
  theme(legend.position = "bottom")
```

#### White -> Non-White

```{r, message=FALSE, warning=FALSE}
#| fig-cap: "Distribution of Predicted Scores for Minority Class (White), Aware model, Sensitive: Race, Reference: Non-White individuals"
#| label: fig-fpt-aware-race-ref-nonwhite-source-only
#| code-fold: true
#| fig-width: 7
#| code-summary: Codes used to create the Figure.
ggplot(
  data = aware_fpt_white |> 
    mutate(
      group = case_when(
        race_origin =="White" & race == "White" ~ "White (Original)",
        race_origin =="White" & race == "Non-White" ~ "White -> Non-White (Counterfactual)",
        race_origin =="Non-White" & race == "Non-White" ~ "Non-White (Original)"
      ),
      group = factor(
        group, 
        levels = c(
          "White (Original)", "White -> Non-White (Counterfactual)", "Non-White (Original)"
        )
      )
    ) |> 
    filter(race_origin =="White"),
  mapping = aes(x = pred, fill = group)) +
  geom_histogram(
    mapping = aes(y = after_stat(density)), 
    alpha = 0.5, position = "identity", binwidth = 0.05
  ) +
  geom_density(alpha = 0.5) +
  scale_fill_manual(
    NULL, values = c(
      "White (Original)" = colours_all[["source"]],
      "White -> Non-White (Counterfactual)" = colours_all[["fairadapt"]]
    )
  ) +
  scale_colour_manual(
    NULL, values = c(
      "White (Original)" = colours_all[["source"]],
      "White -> Non-White (Counterfactual)" = colours_all[["fairadapt"]]
    )
  ) +
  labs(
    x = "Predictions for Y",
    y = "Density"
  ) +
  global_theme() +
  theme(legend.position = "bottom")
```

:::
  

## Sequential Transport

We now turn to sequential transport (the methodology developed in our paper). We use the `seq_trans()`{.R} function defined in our small package to perform a fast sequential transport on causal graph.

We use the same causal graph as in @sec-compas-dataset-fairadapt.

```{r define-trans_x1_then_x2}
sequential_transport <- seq_trans(
  data = compas, adj = adj_mat,
  s = "race", S_0 = "Non-White", y = "two_year_recid"
)
```

We build a dataset with the sensitive attribute of Non-White individuals changed to White individuals, and their characteristics changed to their transported characteristics:

```{r define-df_counterfactuals_seq_nonwhite}
df_counterfactuals_seq_nonwhite <- 
  as_tibble(sequential_transport$transported) |> 
  mutate(
    id_indiv = ind_nonwhite,
    race_origin = "Non-White",
    race = "White"
  )
```

We make predictions based on those counterfactuals obtained with sequential transport, on both models (the unaware model, and the aware model):
```{r seqt-pred_seqt_unaware, warning=FALSE}
pred_seq_unaware <- predict(
  model_unaware, newdata = df_counterfactuals_seq_nonwhite, type = "response"
)

pred_seq_aware <- predict(
  model_aware, newdata = df_counterfactuals_seq_nonwhite, type = "response"
)
```

```{r define-counterfactuals_unaware_seq_nonwhite}
counterfactuals_unaware_seq_nonwhite <- 
  df_counterfactuals_seq_nonwhite |> 
  mutate(pred = pred_seq_unaware, type = "counterfactual")
counterfactuals_aware_seq_nonwhite <- 
  df_counterfactuals_seq_nonwhite |> 
  mutate(pred = pred_seq_aware, type = "counterfactual")
```

Let us put in a single table the predictions made by the classifier (either aware or unaware) on Non-White individuals based on their factual characteristics, and those made based on the counterfactuals:
```{r define-aware_seq_black}
aware_seq_nonwhite <- bind_rows(
  factuals_aware |> mutate(id_indiv = row_number(), race_origin = race), 
  counterfactuals_aware_seq_nonwhite |> mutate(S_origin = "Non-White")
)
unaware_seq_nonwhite <- bind_rows(
  factuals_unaware |> mutate(id_indiv = row_number(), race_origin = race), 
  counterfactuals_unaware_seq_nonwhite |> mutate(S_origin = "Non-White")
)
```

:::{.panel-tabset}


### Unaware

```{r, message=FALSE, warning=FALSE}
#| fig-cap: "Unaware model, Sensitive: Race, Non-White -> White"
#| label: fig-seq-unaware-race-ref-white
#| code-fold: true
#| fig-width: 7
#| code-summary: Codes used to create the Figure.
ggplot(
  data = unaware_seq_nonwhite |> 
    mutate(
      group = case_when(
        race_origin =="Non-White" & race == "Non-White" ~ "Non-White (Original)",
        race_origin =="Non-White" & race == "White" ~ "Non-White -> White (Counterfactual)",
        race_origin =="White" & race == "White" ~ "White (Original)"
      ),
      group = factor(
        group, 
        levels = c(
          "Non-White (Original)", "Non-White -> White (Counterfactual)", "White (Original)"
        )
      )
    ),
  aes(x = pred, fill = group, colour = group)
) +
  geom_histogram(
    mapping = aes(
      y = after_stat(density)), alpha = 0.5, colour = NA,
    position = "identity", binwidth = 0.05
  ) +
  geom_density(alpha = 0.3, linewidth = 1) +
  facet_wrap(~race) +
  scale_fill_manual(
    NULL, values = c(
      "Non-White (Original)" = colours_all[["source"]],
      "Non-White -> White (Counterfactual)" = colours_all[["seq"]],
      "White (Original)" = colours_all[["reference"]]
    )
  ) +
  scale_colour_manual(
    NULL, values = c(
      "Non-White (Original)" = colours_all[["source"]],
      "Non-White -> White (Counterfactual)" = colours_all[["seq"]],
      "White (Original)" = colours_all[["reference"]]
    )
  ) +
  labs(
    x = "Predictions for Y",
    y = "Density"
  ) +
  global_theme() +
  theme(legend.position = "bottom")
```

### Aware

```{r}
#| fig-cap: "Aware model, Sensitive: Race, Non-White -> White"
#| label: fig-seq-aware-race-ref-white
#| code-fold: true
#| fig-width: 7
#| code-summary: Codes used to create the Figure.
ggplot(
  data = aware_seq_nonwhite |> 
    mutate(
      group = case_when(
        race_origin =="Non-White" & race == "Non-White" ~ "Non-White (Original)",
        race_origin =="Non-White" & race == "White" ~ "Non-White -> White (Counterfactual)",
        race_origin =="White" & race == "White" ~ "White (Original)"
      ),
      group = factor(
        group, 
        levels = c(
          "Non-White (Original)", "Non-White -> White (Counterfactual)", "White (Original)"
        )
      )
    ),
  aes(x = pred, fill = group, colour = group)
) +
  geom_histogram(
    mapping = aes(
      y = after_stat(density)), alpha = 0.5, colour = NA,
    position = "identity", binwidth = 0.05
  ) +
  geom_density(alpha = 0.3, linewidth = 1) +
  facet_wrap(~race) +
  scale_fill_manual(
    NULL, values = c(
      "Non-White (Original)" = colours_all[["source"]],
      "Non-White -> White (Counterfactual)" = colours_all[["seq"]],
      "White (Original)" = colours_all[["reference"]]
    )
  ) +
  scale_colour_manual(
    NULL, values = c(
      "Non-White (Original)" = colours_all[["source"]],
      "Non-White -> White (Counterfactual)" = colours_all[["seq"]],
      "White (Original)" = colours_all[["reference"]]
    )
  ) +
  labs(
    x = "Predictions for Y",
    y = "Density"
  ) +
  global_theme() +
  theme(legend.position = "bottom")
```


:::
  
Then, we focus on the distribution of predicted scores forcounterfactual of Non-White individuals and factuals of White individuals.

:::{.panel-tabset}

### Unaware

```{r, message=FALSE, warning=FALSE}
#| fig-cap: "Distribution of Predicted Scores for Minority Class (Non-White), Unaware model, Sensitive: Race, Non-White -> White"
#| label: fig-seq-unaware-race-ref-white-source-only
#| code-fold: true
#| fig-width: 7
#| code-summary: Codes used to create the Figure.
ggplot(
  data = unaware_seq_nonwhite |> 
    mutate(
      group = case_when(
        race_origin =="Non-White" & race == "Non-White" ~ "Non-White (Original)",
        race_origin =="Non-White" & race == "White" ~ "Non-White -> White (Counterfactual)",
        race_origin =="White" & race == "White" ~ "White (Original)"
      ),
      group = factor(
        group, 
        levels = c(
          "Non-White (Original)", "Non-White -> White (Counterfactual)", "White (Original)"
        )
      )
    ) |> 
    filter(race_origin =="Non-White"),
  mapping = aes(x = pred, fill = group)
) +
  geom_histogram(
    mapping = aes(y = after_stat(density)), 
    alpha = 0.5, position = "identity", binwidth = 0.05
  ) +
  geom_density(alpha = 0.5) +
  scale_fill_manual(
    NULL, values = c(
      "Non-White (Original)" = colours_all[["source"]],
      "Non-White -> White (Counterfactual)" = colours_all[["seq"]],
      "White (Original)" = colours_all[["reference"]]
    )
  ) +
  scale_colour_manual(
    NULL, values = c(
      "Non-White (Original)" = colours_all[["source"]],
      "Non-White -> White (Counterfactual)" = colours_all[["seq"]],
      "White (Original)" = colours_all[["reference"]]
    )
  ) +
  labs(
    x = "Predictions for Y",
    y = "Density"
  ) +
  global_theme() +
  theme(legend.position = "bottom")
```

### Aware

```{r, message=FALSE, warning=FALSE}
#| fig-cap: "Distribution of Predicted Scores for Minority Class (Non-White), Aware model, Sensitive: Race, Non-White -> White"
#| label: fig-seq-aware-race-ref-white-source-only
#| code-fold: true
#| fig-width: 7
#| code-summary: Codes used to create the Figure.
ggplot(
  data = aware_seq_nonwhite |> 
    mutate(
      group = case_when(
        race_origin =="Non-White" & race == "Non-White" ~ "Non-White (Original)",
        race_origin =="Non-White" & race == "White" ~ "Non-White -> White (Counterfactual)",
        race_origin =="White" & race == "White" ~ "White (Original)"
      ),
      group = factor(
        group, 
        levels = c(
          "Non-White (Original)", "Non-White -> White (Counterfactual)", "White (Original)"
        )
      )
    ) |> 
    filter(race_origin =="Non-White"),
  mapping = aes(x = pred, fill = group)
) +
  geom_histogram(
    mapping = aes(y = after_stat(density)), 
    alpha = 0.5, position = "identity", binwidth = 0.05
  ) +
  geom_density(alpha = 0.5) +
  scale_fill_manual(
    NULL, values = c(
      "Non-White (Original)" = colours_all[["source"]],
      "Non-White -> White (Counterfactual)" = colours_all[["seq"]],
      "White (Original)" = colours_all[["reference"]]
    )
  ) +
  scale_colour_manual(
    NULL, values = c(
      "Non-White (Original)" = colours_all[["source"]],
      "Non-White -> White (Counterfactual)" = colours_all[["seq"]],
      "White (Original)" = colours_all[["reference"]]
    )
  ) +
  labs(
    x = "Predictions for Y",
    y = "Density"
  ) +
  global_theme() +
  theme(legend.position = "bottom")
```

:::


## Comparison

Let us now compare the results.


:::{.panel-tabset}

### Unaware Model

```{r}
tb_unaware <- 
  factuals_unaware |> mutate(counterfactual = "none") |>
  # Naive
  bind_rows(
    counterfactuals_unaware_naive_nonwhite |> mutate(counterfactual = "naive")
  ) |> 
  # Fairadapt
  bind_rows(
    counterfactuals_unaware_fpt_nonwhite |> mutate(counterfactual = "fpt")
  ) |> 
  # Sequential transport
  bind_rows(
    counterfactuals_unaware_seq_nonwhite |> mutate(counterfactual = "seq")
  )
```

### Aware Model

```{r}
tb_aware <- 
  factuals_aware |> mutate(counterfactual = "none") |> 
  # Naive
  bind_rows(
    counterfactuals_aware_naive_nonwhite |> mutate(counterfactual = "naive")
  ) |> 
  # Fairadapt
  bind_rows(
    counterfactuals_aware_fpt_nonwhite |> mutate(counterfactual = "fpt")
  ) |> 
  # Sequential transport
  bind_rows(
    counterfactuals_aware_seq_nonwhite |> mutate(counterfactual = "seq")
  )
```

:::


Let us compare the densities of the predicted values.


:::{.panel-tabset}

### Unaware model

```{r}
#| fig-cap: Densities of predicted scores for Non-White individuals with factuals and White individuals counterfactuals. The yellow dashed line corresponds to the density of predicted scores for Non-White individuals, using factuals.
#| label: fig-densities-counterfactuals-unaware-compas
#| fig-width: 4
#| fig-height: 4
#| code-fold: true
#| code-summary: Codes used to create the Figure.
# Factuals
tb_unaware_factuals <- tb_unaware |> filter(counterfactual == "none")
# Predicted values
pred_unaware_factuals_nonwhite <- tb_unaware_factuals |> filter(race == "Non-White") |> pull("pred")
pred_unaware_factuals_white <- tb_unaware_factuals |> filter(race == "White") |> pull("pred")
# Estimated densities
d_unaware_factuals_nonwhite <- density(pred_unaware_factuals_nonwhite)
d_unaware_factuals_white <- density(pred_unaware_factuals_white)

par(mfrow = c(3, 1), mar = c(2, 2, 0, 0))
x_lim <- c(0, .8)
y_lim <- c(0, 10)

# Naive
tb_unaware_naive <- tb_unaware |> filter(counterfactual == "naive")
# Predicted values, focusing on Non-White --> White
pred_unaware_naive_nonwhite_star <- tb_unaware_naive |> filter(race == "White") |> pull("pred")
# Estimated densities
d_unaware_naive_nonwhite_star <- density(pred_unaware_naive_nonwhite_star)

plot(
  d_unaware_factuals_nonwhite,
  main = "", xlab = "", ylab = "",
  axes = FALSE, col = NA,
  xlim = x_lim, ylim = y_lim
)
axis(1)
axis(2)
polygon(d_unaware_factuals_nonwhite, col = alpha(colours_all[["source"]], .5), border = NA)
lines(d_unaware_factuals_white, col = colours_all[["reference"]], lty = 2, lwd = 2)
polygon(d_unaware_naive_nonwhite_star, col = alpha(colours_all[["naive"]], .5), border = NA)
pos_arrow_ref <- .6
text(x = pos_arrow_ref, y = 8, "Factuals - White", col = colours_all[["reference"]])
ind_min_ref <- which.min(abs(d_unaware_factuals_white$x - pos_arrow_ref))
arrows(
  x1 = d_unaware_factuals_white$x[ind_min_ref],
  y1 = d_unaware_factuals_white$y[ind_min_ref],
  x0 = pos_arrow_ref, 
  y0 = 7,
  length = 0.05, col = colours_all[["reference"]]
)
text(x = .09, y = 8, "Naive", col = colours_all[["naive"]])


# Fairadapt
tb_unaware_fpt <- tb_unaware |> filter(counterfactual == "fpt")
# Predicted values, focusing on Non-White --> White
pred_unaware_fpt_nonwhite_star <- 
  tb_unaware_fpt |> filter(race == "White") |> pull("pred")
# Estimated densities
d_unaware_fpt_nonwhite_star <- density(pred_unaware_fpt_nonwhite_star)

plot(
  d_unaware_factuals_nonwhite,
  main = "", xlab = "", ylab = "",
  axes = FALSE, col = NA,
  xlim = x_lim, ylim = y_lim
)
axis(1)
axis(2)
polygon(d_unaware_factuals_nonwhite, col = alpha(colours_all[["source"]], .5), border = NA)
lines(d_unaware_factuals_white, col = colours_all[["reference"]], lty = 2, lwd = 2)
polygon(d_unaware_fpt_nonwhite_star, col = alpha(colours_all[["fairadapt"]], .5), border = NA)
text(x = .15, y = 6, "Factuals - Non-White", col = colours_all[["source"]])
pos_arrow <- .07
ind_min <- which.min(abs(d_unaware_factuals_nonwhite$x - pos_arrow))
arrows(
  x1 = d_unaware_factuals_nonwhite$x[ind_min],
  y1 = d_unaware_factuals_nonwhite$y[ind_min],
  x0 = .15, 
  y0 = 5,
  length = 0.05, col = colours_all[["source"]]
)
text(x = .4, y = 6, "fairadapt", col = colours_all[["fairadapt"]])


# Sequential transport
tb_unaware_seq <- tb_unaware |> filter(counterfactual == "seq")
# Predicted values, focusing on Non-White --> White
pred_unaware_seq_nonwhite_star <- tb_unaware_seq |> filter(race == "White") |> pull("pred")
# Estimated densities
d_unaware_seq_nonwhite_star <- density(pred_unaware_seq_nonwhite_star)

plot(
  d_unaware_factuals_nonwhite,
  main = "", xlab = "", ylab = "",
  axes = FALSE, col = NA,
  xlim = x_lim, ylim = y_lim
)
axis(1)
axis(2)
polygon(d_unaware_factuals_nonwhite, col = alpha(colours_all[["source"]], .5), border = NA)
lines(d_unaware_factuals_white, col = colours_all[["reference"]], lty = 2, lwd = 2)
polygon(d_unaware_seq_nonwhite_star, col = alpha(colours_all[["seq"]], .5), border = NA)
text(x = .4, y = 6, "Seq. T.", col = colours_all[["seq"]])
```

### Aware model

```{r}
#| fig-cap: Densities of predicted scores for Non-White individuals with factuals and with counterfactuals. The yellow dashed line corresponds to the density of predicted scores for Non-White individuals, using factuals.
#| label: fig-densities-counterfactuals-aware-compas
#| fig-width: 4
#| fig-height: 4
#| code-fold: true
#| code-summary: Codes used to create the Figure.
# Factuals
tb_aware_factuals <- tb_aware |> filter(counterfactual == "none")
# Predicted values
pred_aware_factuals_nonwhite <- tb_aware_factuals |> filter(race == "Non-White") |> pull("pred")
pred_aware_factuals_white <- tb_aware_factuals |> filter(race == "White") |> pull("pred")
# Estimated densities
d_aware_factuals_nonwhite <- density(pred_aware_factuals_nonwhite)
d_aware_factuals_white <- density(pred_aware_factuals_white)

par(mfrow = c(3, 1), mar = c(2, 2, 0, 0))
x_lim <- c(0, .8)
y_lim <- c(0, 16)

# Naive
tb_aware_naive <- tb_aware |> filter(counterfactual == "naive")
# Predicted values, focusing on Non-White --> White
pred_aware_naive_nonwhite_star <- tb_aware_naive |> filter(race == "White") |> pull("pred")
# Estimated densities
d_aware_naive_nonwhite_star <- density(pred_aware_naive_nonwhite_star)

plot(
  d_aware_factuals_nonwhite,
  main = "", xlab = "", ylab = "",
  axes = FALSE, col = NA,
  xlim = x_lim, ylim = y_lim
)
axis(1)
axis(2)
polygon(d_aware_factuals_nonwhite, col = alpha(colours_all[["source"]], .5), border = NA)
lines(d_aware_factuals_white, col = colours_all[["reference"]], lty = 2, lwd = 2)
polygon(d_aware_naive_nonwhite_star, col = alpha(colours_all[["naive"]], .5), border = NA)
text(x = .15, y = 13, "Factuals - Non-White", col = colours_all[["source"]])
pos_arrow <- .03
ind_min <- which.min(abs(d_aware_factuals_nonwhite$x - pos_arrow))
arrows(
  x1 = d_aware_factuals_nonwhite$x[ind_min],
  y1 = d_aware_factuals_nonwhite$y[ind_min],
  x0 = .15, 
  y0 = 11,
  length = 0.05, col = colours_all[["source"]]
)
pos_arrow_ref <- .6
text(x = pos_arrow_ref, y = 13, "Factuals - White", col = colours_all[["reference"]])
ind_min_ref <- which.min(abs(d_aware_factuals_white$x - pos_arrow_ref))
arrows(
  x1 = d_aware_factuals_white$x[ind_min_ref],
  y1 = d_aware_factuals_white$y[ind_min_ref],
  x0 = pos_arrow_ref, 
  y0 = 11,
  length = 0.05, col = colours_all[["reference"]]
)
text(x = .4, y = 6, "Naive", col = colours_all[["naive"]])


# Fairadapt
tb_aware_fpt <- tb_aware |> filter(counterfactual == "fpt")
# Predicted values, focusing on Non-White --> White
pred_aware_fpt_nonwhite_star <- 
  tb_aware_fpt |> filter(race == "White") |> pull("pred")
# Estimated densities
d_aware_fpt_nonwhite_star <- density(pred_aware_fpt_nonwhite_star)

plot(
  d_aware_factuals_nonwhite,
  main = "", xlab = "", ylab = "",
  axes = FALSE, col = NA,
  xlim = x_lim, ylim = y_lim
)
axis(1)
axis(2)
polygon(d_aware_factuals_nonwhite, col = alpha(colours_all[["source"]], .5), border = NA)
lines(d_aware_factuals_white, col = colours_all[["reference"]], lty = 2, lwd = 2)
polygon(d_aware_fpt_nonwhite_star, col = alpha(colours_all[["fairadapt"]], .5), border = NA)
text(x = .4, y = 6, "fairadapt", col = colours_all[["fairadapt"]])


# Sequential transport
tb_aware_seq <- tb_aware |> filter(counterfactual == "seq")
# Predicted values, focusing on Non-White --> White
pred_aware_seq_nonwhite_star <- tb_aware_seq |> filter(race == "White") |> pull("pred")
# Estimated densities
d_aware_seq_nonwhite_star <- density(pred_aware_seq_nonwhite_star)

plot(
  d_aware_factuals_nonwhite,
  main = "", xlab = "", ylab = "",
  axes = FALSE, col = NA,
  xlim = x_lim, ylim = y_lim
)
axis(1)
axis(2)
polygon(d_aware_factuals_nonwhite, col = alpha(colours_all[["source"]], .5), border = NA)
lines(d_aware_factuals_white, col = colours_all[["reference"]], lty = 2, lwd = 2)
polygon(d_aware_seq_nonwhite_star, col = alpha(colours_all[["seq"]], .5), border = NA)
text(x = .4, y = 6, "Seq. T.", col = colours_all[["seq"]])
```

:::


## Metrics


:::{.callout-warning}

This section is still under construction. Results may not correct. The metrics used should be changed soon.

:::

Let us compute a few metrics metrics, such as the accuracy, the log-loss, and the Brier Score, as well as the counterfactual demographic parity. For the accuracy, we define the set the probability threshold to .5.



The **counterfactual demographic** parity writes:

$$
\mathrm{CDP}=\frac{1}{n_0}\sum_{i\in\mathcal{D}_0}m(1,\boldsymbol{x}_{i}^\star) - m(0,\boldsymbol{x}_{i}),
$$
where $n_0$ is the number of Non-White individuals in the sample, $m()$ is the classifier, with $m(1,\boldsymbol{x}_{i}^\star)$ the score returned when the sensitive attribute is $S=1$, i.e., "White" and $\boldsymbol{x}_{i}^\star$ are the counterfactual values, $m(0,\boldsymbol{x}_{i})$ is the score returned by the model when using the factuals.

We compute the Equalized Odds criterion as the absolute difference between true positive rate (TPR) across the two groups (Non-White/White):

$$
EO = | TPR_{\text{Non-White}} - TPR_{\text{White}} |
$$


A binary predictor $\hat{Y}$ satisfies **equal opportunity** with respect to $S$ and $Y$ if @hardt2016equality:
$$
P\big(\hat{Y} = 1 | S=0, Y=1 \big) = P\big(\hat{Y} = 1 | S=1, Y=1 \big)
$$



```{r}
prob_threshold <- .5

#' Log loss
#' 
#' @param y vector or binary obsevations
#' @param s vector of predicted scores
calculate_log_loss <- function(y, s){
  s_pred <- pmin(pmax(s, 1e-15), 1 - 1e-15)
  mean(-y*log(s_pred) - (1-y)*log(1-s_pred))
}

#' Brier Score
#'
#' The Brier Score \citep{brier_1950}, is expressed as: \deqn{\text{BS} =
#' \frac{1}{n}\sum_{i=1}^{n} \big(\hat{s}(\mathbf{x}_i) - d_i\big)^{2}} where
#' \eqn{d_i \in \{0,1\}} is the observed event for observation \eqn{i}.
#'
#' @param obs vector of observed binary events
#' @param scores vector of scores
#'
#' @references Brier, G. W. (1950). Verification of forecasts expressed in terms
#' of probability. Monthly Weather Review 78: 1–3.
#'
#' @export
brier_score <- function(obs, scores) mean((scores - obs)^2)
```


We will then put in a table all the predictions made in each case: without using counterfactuals, and with using each counterfactual technique applied on Non-White individuals' characteristics. Since we do not get counterfactual values for White individuals, their predictions remain unchanged in each case. We will therefore complete the dataset with their unchanged predictions.
```{r define-tb_complement_white}
tb_complement_white <- 
  factuals_aware |> 
  select(id_indiv, race, race_origin, two_year_recid, pred) |> 
  filter(race_origin =="White")
```

We put the predicted values in a table named `tb_pred`.

```{r define-tb_pred}
#| code-fold: true
#| code-summary: Codes to create `tb_pred`.
tb_pred_aware <- 
  factuals_aware |> 
  select(id_indiv, race, race_origin, two_year_recid, pred) |> 
  mutate(type = "factual") |> 
  bind_rows(
    counterfactuals_aware_naive_nonwhite |> 
      select(id_indiv, race, race_origin, two_year_recid, pred) |> 
      bind_rows(tb_complement_white) |> 
      mutate(type = "naive")
  ) |> 
  bind_rows(
    counterfactuals_aware_fpt_nonwhite |> 
      select(id_indiv, race, race_origin, two_year_recid, pred) |> 
      bind_rows(tb_complement_white) |> 
      mutate(type = "fairadapt")
  ) |> 
  bind_rows(
    counterfactuals_aware_seq_nonwhite |> 
      left_join(
        compas |> mutate(id_indiv = row_number()) |> 
          select(id_indiv, two_year_recid), by = "id_indiv"
      ) |> 
      bind_rows(tb_complement_white) |> 
      select(id_indiv, race, race_origin, two_year_recid, pred) |> 
      mutate(type = "seq")
  ) |> 
  mutate(
    y_binary = as.numeric(two_year_recid),
    pred_class = ifelse(pred > prob_threshold, 1, 0),
    pred_correct = two_year_recid == pred_class
  )

tb_pred_unaware <- 
  factuals_unaware |> 
  select(id_indiv, race, race_origin, two_year_recid, pred) |> 
  mutate(type = "factual") |> 
  bind_rows(
    counterfactuals_unaware_naive_nonwhite |> 
      select(id_indiv, race, race_origin, two_year_recid, pred) |> 
      bind_rows(tb_complement_white) |> 
      mutate(type = "naive")
  ) |> 
  bind_rows(
    counterfactuals_unaware_fpt_nonwhite |> 
      select(id_indiv, race, race_origin, two_year_recid, pred) |> 
      bind_rows(tb_complement_white) |> 
      mutate(type = "fairadapt")
  ) |> 
  bind_rows(
    counterfactuals_unaware_seq_nonwhite |> 
      left_join(
        compas |> mutate(id_indiv = row_number()) |> 
          select(id_indiv, two_year_recid), by = "id_indiv") |> 
      bind_rows(tb_complement_white) |> 
      select(id_indiv, race, race_origin, two_year_recid, pred) |> 
      mutate(type = "seq")
  ) |> 
  mutate(
    y_binary = as.numeric(two_year_recid),
    pred_class = ifelse(pred > prob_threshold, 1, 0),
    pred_correct = two_year_recid == pred_class
  )

tb_pred <- 
  tb_pred_aware |> mutate(model = "aware") |> 
  bind_rows(
    tb_pred_unaware |> mutate(model = "unaware")
  ) |> 
  mutate(
    model = factor(
      model, levels = c("aware", "unaware"),
      labels = c("Aware model", "Unware model")
    ),
    type = factor(type, levels = c("factual", "naive", "fairadapt", "seq"))
  )
```


We compute some metrics on the whole sample, in each case:
```{r define-overall_perf_metrics}
overall_perf_metrics <- 
  tb_pred |> 
  group_by(model, type) |> 
  summarise(
    mean = mean(pred),
    eq_opp_pos = sum(pred * (y_binary == 1)) / (sum(y_binary == 1)),
    eq_opp_neg = sum(pred * (y_binary == 0)) / (sum(y_binary == 0)),
    acc = mean(pred_correct),
    ll = calculate_log_loss(y_binary, pred),
    bs = brier_score(y_binary, pred),
    .groups = "drop"
  ) |> 
  mutate(race_origin = "Whole")
overall_perf_metrics
```

And then we compute the same metrics but within the group of Non-White individuals and within the group of White individuals.

```{r define-group_perf_metrics}
group_perf_metrics <- 
  tb_pred |> 
  group_by(model, type, race_origin) |> 
  summarise(
    mean = mean(pred),
    eq_opp_pos = sum(pred * (y_binary == 1)) / (sum(y_binary == 1)),
    eq_opp_neg = sum(pred * (y_binary == 0)) / (sum(y_binary == 0)),
    acc = mean(pred_correct),
    ll = calculate_log_loss(y_binary, pred),
    bs = brier_score(y_binary, pred),
    .groups = "drop"
  )
group_perf_metrics
```


We compute the Counterfactual Demographic Parity:
```{r}
pred_nonwhite_factuals <- 
  tb_pred |> filter(type == "factual") |> 
  filter(race_origin =="Non-White") |> 
  select(model, id_indiv, pred_origin = pred)

cdp <- tb_pred |> 
  filter(race_origin =="Non-White") |> 
  left_join(pred_nonwhite_factuals, by = c("id_indiv", "model")) |> 
  group_by(model, type) |> 
  summarise(
    CDP = mean(pred - pred_origin),
    .groups = "drop"
  )
```


The summary of the metrics are shown in @tbl-metrics-compas.

```{r}
#| code-fold: true
#| code-summary: Codes used to create the Table.
#| tbl-cap: Metrics computed on scores predicted by the classifier based on the factuals or the different versions of the counterfactuals, for the aware model (sensitive variable used to train the classifier) and the unaware model (sentitive variable not provided to train the classifier).
#| label: tbl-metrics-compas
tbl_print <- 
  group_perf_metrics |> filter(race_origin =="Non-White") |> 
  left_join(cdp, by = c("model", "type")) |> 
  pivot_longer(cols = -c("model", "type", "race_origin")) |> 
  pivot_wider(names_from = type, values_from = value) |> 
  select(-race_origin) |> 
  left_join(
    group_perf_metrics |> filter(race_origin =="White" & type == "factual") |> 
      pivot_longer(cols = -c("model", "type", "race_origin"), values_to = "factual_white") |> 
      select(model, name, factual_white),
    by = c("model", "name")
  ) |> 
  left_join(
    overall_perf_metrics |> 
      pivot_longer(cols = -c("model", "type", "race_origin"), values_to = "factual_whole") |> 
      filter(race_origin =="Whole", type == "factual") |> 
      select(model, name, factual_whole),
    by = c("model", "name")
  ) |> 
  select(
    model, name, factual_whole, factual_white, factual_nonwhite = factual,
    naive, fairadapt, seq
  ) |> 
  mutate(
    name = factor(
      name,
      levels = c("CDP", "mean", "eq_opp_pos", "eq_opp_neg", "acc", "ll", "bs"),
      labels = c("CDP", "Mean", "Eq. Opp. Y=1", "Eq. Opp Y=0", "Accuracy", "Log-loss", "Brier Score")
    )
  ) |> 
  arrange(model, name)

tbl_print[, -1] |> 
  knitr::kable(
    digits = 2,
    col.names = c(
      "Metric", "Factual", "Factual", "Factual", "Naive", "Fairadapt", 
      "Seq. Transport"
    )
  ) |> 
  kableExtra::kable_styling() |> 
  # kableExtra::pack_rows(index = table(tbl_print$race_origin))
  # kableExtra::collapse_rows(columns = 1, valign = "top")
  kableExtra::add_header_above(
    c(" " = 1, "Whole" = "1", "White" = 1, "Non-White" = 4)
  ) |> 
  kableExtra::pack_rows(index = table(tbl_print$model))
```


```{r, eval=FALSE}
#| code-fold: true
#| code-summary: LaTeX code
knitr::kable(
  tbl_print[, -1], format = "latex", booktabs = TRUE, digits = 2,
) |> 
  kableExtra::kable_styling("striped", full_width = F) %>%
  kableExtra::add_header_above(
    c(" " = 1, "Whole" = 1, "White" = 1, "Non-White" = 4)
  ) |> 
  kableExtra::pack_rows(index = table(tbl_print$model))
```


```{r}
# Brouillon
tb_pred$type |> unique()

lvl_neg <- 0
lvl_pos <- 1

tb_pred |> 
  group_by(model, type, race_origin) |> 
  summarise(
    TP = sum(two_year_recid == lvl_pos & pred_class == lvl_pos),
    FP = sum(two_year_recid == lvl_neg & pred_class == lvl_pos),
    FN = sum(two_year_recid == lvl_pos & pred_class == lvl_neg),
    TN = sum(two_year_recid == lvl_neg & pred_class == lvl_neg),
    P = TP + FN,
    N = FP + TN
  ) |> 
  rowwise() |> 
  mutate(
    TPR = TP/P,
    FPR = FN / N
  ) |> 
  group_by(model, type) |> 
  mutate(
    eq_odds_diff = abs(diff(TPR))
  )
```


