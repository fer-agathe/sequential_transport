% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/classifier.R
\name{log_reg_train}
\alias{log_reg_train}
\title{Fit a Logistic Regression Model to a Binary Outcome With or Without a
Sensitive Attribute.}
\usage{
log_reg_train(train_data, test_data, s, y, type = c("aware", "unaware"))
}
\arguments{
\item{train_data}{Train set.}

\item{test_data}{Test set.}

\item{s}{Name of the sensitive attribute.}

\item{y}{Name of the target variable.}

\item{type}{If `"type=aware"`, the model includes the sensitive attributes,
otherwise, if `type=unaware`, it does not.}
}
\value{
A list with three elements:
* `model`: The estimated logistic regression model.
* `pred_train`: Estimated scores on the train set.
* `pred_test`: Estimated scores on the test set.
}
\description{
The aim is to predict a binary outcome (Y) using a set of predictors (X)
that may include (aware model) or may not include (unaware model) a sensitive
binary attribute (S). A logistic regression is used to to so. It is fitted on
a train set. Predicted scores are then returned on both the train and the
test set.

WARNING
This function is used to illustrate the method. We do not recommend
using it for other purposes.
}
\examples{
# WARNING: this function is used to illustrate the method. We do not recommend
# using it for other purposes.

# Simulate data
df <- simul_dataset()
# Split: train (70\%) / test (30\%)
sets <- split_dataset(df, train_ratio = 0.7)
data_train <- sets$data_train
data_test <- sets$data_test
# Logistic regression to predict Y, making the model blind to S
pred_unaware <- log_reg_train(
  data_train, data_test, s = "S", y = "Y", type = "unaware"
)
# Fitted model:
pred_unaware$model
# Predicted values on train set
head(pred_unaware$pred_train)
# Predicted values on test set
head(pred_unaware$pred_test)
}
\seealso{
[simul_dataset()], [split_dataset()]
}
