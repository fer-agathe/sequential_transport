[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Sequential Conditional (Marginally Optimal) Transport on Probabilistic Graphs for Interpretable Counterfactual Fairness",
    "section": "",
    "text": "Introduction\nThis ebook provides the replication codes to the project titled ‘Sequential Conditional (Marginally Optimal) Transport on Probabilistic Graphs for Interpretable Counterfactual Fairness.’\nxxx\n\n\n\n\n\n\nNote\n\n\n\nAll the codes are written in R. The codes were adapted from Plečko, Bennett, and Meinshausen (2021).\n\n\n\n\nAbstract\nxxx\nKeywords: xxx\n\n\n\n\nPlečko, Drago, Nicolas Bennett, and Nicolai Meinshausen. 2021. “Fairadapt: Causal Reasoning for Fair Data Pre-Processing.” arXiv Preprint arXiv:2110.10200.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "law_dataset.html",
    "href": "law_dataset.html",
    "title": "1  Law Dataset",
    "section": "",
    "text": "1.1 Data Pre-Processing\nWe load the data:\ndf &lt;- read_csv('data/law_data.csv')\nThen, we focus on a subset of variables of interest:\ndf &lt;- df |&gt; \n  select(\n    race,\n    sex, # we can take S = gender\n    LSAT, # or S = race (white/black)\n    UGPA,\n    ZFYA # Y\n  )\nWe create a dataset where the only protected class is the race:\n# Table for S = race\ndf_race &lt;- df |&gt; \n  select(\n    race,\n    UGPA,\n    LSAT,\n    ZFYA\n  ) |&gt; \n  filter(\n    race %in% c(\"White\", \"Black\")\n  ) |&gt; \n  rename(\n    S = race,\n    X1 = UGPA,\n    X2 = LSAT,\n    Y = ZFYA\n  ) |&gt;  # no NA values\n  mutate(\n    S = as.factor(S)\n  )\nAnd another dataset in which the only protected class is the sex:\n# Table for S = gender\ndf_gender &lt;- df |&gt; \n  select(\n    sex,\n    UGPA,\n    LSAT,\n    ZFYA\n  ) |&gt; \n  rename(\n    S = sex,\n    X1 = UGPA,\n    X2 = LSAT,\n    Y = ZFYA\n  ) |&gt;  # no NA values\n  mutate(\n    S = as.factor(S)\n  )",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Law Dataset</span>"
    ]
  },
  {
    "objectID": "law_dataset.html#data-pre-processing",
    "href": "law_dataset.html#data-pre-processing",
    "title": "1  Law Dataset",
    "section": "",
    "text": "1.1.1 S = Race\n\nggplot(\n  data = df_race, \n  mapping = aes(x = Y, fill = S)\n) +\n  geom_histogram(\n    mapping = aes(y = ..density..), \n    alpha = 0.5, position = \"identity\", binwidth = 0.5\n  ) +\n  geom_density(alpha = 0.5) +\n  labs(\n    title = \"Race\",\n    x = \"Y\",\n    y = \"Density\"\n  ) +\n  global_theme()\n\n\n\n\nFigure 1.1: Distribution of the standardized first-year law school grades among the two groups, when \\(S\\) is the race\n\n\n\n\n\n\n\n\n\n\n1.1.2 S = Gender\n\nggplot(\n  data = df_gender, \n  mapping = aes(x = Y, fill = S)) +\n  geom_histogram(\n    mapping = aes(y = ..density..), \n    alpha = 0.5, position = \"identity\", binwidth = 0.5\n  ) +\n  geom_density(alpha = 0.5) +\n  labs(\n    title = \"Gender\",\n    x = \"Y\",\n    y = \"Density\"\n  ) +\n  global_theme()\n\n\n\n\nFigure 1.2: Distribution of the standardized first-year law school grades among the two groups, when \\(S\\) is the gender",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Law Dataset</span>"
    ]
  },
  {
    "objectID": "law_dataset.html#causal-graph",
    "href": "law_dataset.html#causal-graph",
    "title": "1  Law Dataset",
    "section": "1.2 Causal graph",
    "text": "1.2 Causal graph\nThe assumed causal graph we use here is different from that of the different papers De Lara et al. (2024), Kusner et al. (2017), Black, Yeom, and Fredrikson (2020) using the same dataset.\nWe make the following assumptions:\n\nThe sensitive attribute, (S) (race), has no parents.\nThe two other explanatory variables, (X_1) (UGPA) and (X_2) (LSAT), both directly depend on the sensitive attribute.\nThe second variable, (X_2) (LSAT), also depends on the first variable, (X_1) (UGPA). This is done for illustrative purposes, assuming that the score obtained on the LSAT is influenced by the UGPA.\nThe two variables, (X_1) (UGPA) and (X_2) (LSAT), cause the target variable (Y), i.e., whether the student obtained a high standardized first-year average (ZFYA).\n\nThe corresponding Structural Equation Model writes:\n\\[\n\\begin{cases}\nS: \\text{ sensitive attribute (race)} \\\\\nX_1 = h_1(S, U_1): \\text{ UGPA, dependent on } S \\\\\nX_2 = h_2(S, X_1, U_2): \\text{ LSAT, dependent on } S \\text{ and } X_1 \\\\\nY = h_3(X_1, X_2, U_Y): \\text{ ZFYA, dependent on } X_1 \\text{ and } X_2 \\\\\n\\end{cases}\n\\]\nwhere (U_1), (U_2), and (U_Y) are independent error terms.\nIn R, we construct the upper triangular adjacency matrix to reflect our assumed causal structure:\n\nvariables &lt;- colnames(df_race)\n# Adjacency matrix: upper triangular\nadj &lt;- matrix(\n  c(0, 1, 1, 1,\n    0, 0, 1, 1,\n    0, 0, 0, 1,\n    0, 0, 0, 0),\n  ncol = length(variables), \n  dimnames = rep(list(variables), 2),\n  byrow = TRUE\n)\n\nWhich can be visualized as follows:\n\ncausal_graph &lt;- fairadapt::graphModel(adj)\nplot(causal_graph)\n\n\n\n\nFigure 1.3: Causal Graph\n\n\n\n\n\n\n\n\nThe topological order:\n\ntop_order &lt;- variables\ntop_order\n\n[1] \"S\"  \"X1\" \"X2\" \"Y\"",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Law Dataset</span>"
    ]
  },
  {
    "objectID": "law_dataset.html#classification",
    "href": "law_dataset.html#classification",
    "title": "1  Law Dataset",
    "section": "1.3 Classification",
    "text": "1.3 Classification\nFollowing Kusner et al. (2017), a logistic regression model is trained. To convert (Y) into a categorical variable, the median is used as a threshold, in line with Black, Yeom, and Fredrikson (2020). The race, denoted as the sensitive attribute (S), has two categories: White and Black. The dataset is divided into training and testing sets. The classifier is first trained and used to compute the necessary quantities for counterfactual inference on the training set. Subsequently, the trained classifier is applied to the test set to make predictions and perform counterfactual analyses. The results of the counterfactuals will also be evaluated on the training set due to the limitation that Optimal Transport in the multivariate case cannot be computed for new samples, unlike the methodologies used in FairAdapt (Plečko, Bennett, and Meinshausen (2021)) and the approach developed in this paper.\nFirst, we transform \\(Y\\) into a binary variable:\n\nmed &lt;- median(df_race$Y)\ndf_race_c &lt;- df_race |&gt; \n  mutate(\n    Y_c = ifelse(Y &gt; med, 1, 0)\n  ) |&gt; \n  select(S, X1, X2, Y = Y_c)\n\nWe turn the response variable to a factor:\n\ndf_race_c$Y &lt;- as.factor(df_race_c$Y)\nlevels(df_race_c$Y)\n\n[1] \"0\" \"1\"\n\n\nLet us split the dataset into train/test sets (we use the split_dataset() function defined in functions/utils.R):\n\nseed &lt;- 2025\nsets &lt;- split_dataset(df_race_c, seed)\ndata_train &lt;- sets$data_train\ndata_test &lt;- sets$data_test\n\nThen, we train two models:\n\nunaware logistic regression classifier: model without including the sensitive attribute.\naware logistic regression classifier: model with the sensitive attribute included in the set of features.\n\nThe model is trained using the log_reg_train() function defined in functions/utils.R:\n\nlog_reg_train\n\nfunction (train_data, test_data, type = c(\"aware\", \"unaware\")) \n{\n    if (type == \"unaware\") {\n        train_data_ &lt;- train_data %&gt;% select(-S)\n        test_data_ &lt;- test_data %&gt;% select(-S)\n    }\n    else {\n        train_data_ &lt;- train_data\n        test_data_ &lt;- test_data\n    }\n    model &lt;- glm(Y ~ ., data = train_data_, family = binomial)\n    pred_train &lt;- predict(model, newdata = train_data_, type = \"response\")\n    pred_test &lt;- predict(model, newdata = test_data_, type = \"response\")\n    list(model = model, pred_train = pred_train, pred_test = pred_test)\n}\n\n\nLet us train the two models. Then, we extract the predicted values on both the train set and the test set.\n\n# Unaware logistic regression classifier (model without S)\npred_unaware &lt;- log_reg_train(data_train, data_test, type = \"unaware\")\npred_unaware_train &lt;- pred_unaware$pred_train\npred_unaware_test &lt;- pred_unaware$pred_test\n\n# Aware logistic regression classifier (model with S)\npred_aware &lt;- log_reg_train(data_train, data_test, type = \"aware\")\npred_aware_train &lt;- pred_aware$pred_train\npred_aware_test &lt;- pred_aware$pred_test\n\nWe create a table for each model, with the sensitive attribute and the predicted value by the model (()), only for observations from the test set.\n\ndf_test_unaware &lt;- tibble(\n  S = data_test$S, \n  pred = pred_unaware_test\n)\n\ndf_test_aware &lt;- tibble(\n  S = data_test$S, \n  pred = pred_aware_test\n)\n\n\n\n1.3.1 Unaware\n\nggplot(\n  data = df_test_unaware, \n  mapping = aes(x = pred, fill = S)) +\n  geom_histogram(\n    mapping = aes(y = ..density..), \n    alpha = 0.5, position = \"identity\", binwidth = 0.05\n  ) +\n  geom_density(alpha = 0.5) +\n  labs(\n    title = \"Unaware Model, with S being Race\",\n    x = \"Predictions for Y\",\n    y = \"Density\"\n  ) +\n  global_theme()\n\n\n\n\nFigure 1.4: Density of predictions on the test set, for the unaware model, when the sensitive attribute is the race\n\n\n\n\n\n\n\n\n\n\n1.3.2 Aware\n\nggplot(\n  data = df_test_aware,\n  mapping = aes(x = pred, fill = S)) +\n  geom_histogram(\n    mapping = aes(y = ..density..), \n    alpha = 0.5, position = \"identity\", binwidth = 0.05\n  ) +\n  geom_density(alpha = 0.5) +\n  labs(\n    title = \"Aware Model, with S being Race\",\n    x = \"Predictions for Y\",\n    y = \"Density\"\n  ) +\n  global_theme()\n\n\n\n\nFigure 1.5: Density of predictions on the test set, for the aware model, when the sensitive attribute is the race",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Law Dataset</span>"
    ]
  },
  {
    "objectID": "law_dataset.html#counterfactual-inference",
    "href": "law_dataset.html#counterfactual-inference",
    "title": "1  Law Dataset",
    "section": "1.4 Counterfactual inference",
    "text": "1.4 Counterfactual inference\nLet us now turn to counterfactual inference. We will use three methods:\n\nFairadapt\nMultivariate optimal transport\nSequential transport (the methodology we develop in the paper).\n\n\n1.4.1 Fairadapt\nWe adapt the code from Plečko, Bennett, and Meinshausen (2021) to handle the test set. This avoids estimating cumulative distribution and quantile functions on the test set, which would otherwise necessitate recalculating quantile regression functions for each new sample.\nWe do not need to adapt Y here, so we need to remove it from the adjacency matrix:\n\nadj_wo_Y &lt;- adj[-4,-4]\nadj_wo_Y\n\n   S X1 X2\nS  0  1  1\nX1 0  0  1\nX2 0  0  0\n\n\nWe create a dataset with the sensitive attribute and the two other predictors:\n\ndf_race_fpt &lt;- df_race_c |&gt; select(S, X1, X2)\n\nLet us have a look at the levels of our sensitive variable:\n\nlevels(df_race_fpt$S)\n\n[1] \"Black\" \"White\"\n\n\nThe reference class here consists of Black individuals.\nTwo configurations will be considered in turn:\n\nThe reference class consists of Black individuals, and FairAdapt will be used to obtain the counterfactual UGPA and LSAT scores for White individuals as if they had been Black.\nThe reference class consists of White individuals, and FairAdapt will be used to obtain the counterfactual UGPA and LSAT scores for Black individuals as if they had been White.\n\n\n# White (factuals) --&gt; Black (counterfactuals)\nfpt_model_white &lt;- fairadapt(\n  X2 ~ ., \n  train.data = df_race_fpt,\n  prot.attr = \"S\", adj.mat = adj_wo_Y,\n  quant.method = linearQuants\n)\nadapt_df_white &lt;- adaptedData(fpt_model_white)\n\n# Black (factuals) --&gt; White (counterfactuals)\ndf_race_fpt$S &lt;- factor(df_race_fpt$S, levels = c(\"White\", \"Black\"))\nfpt_model_black &lt;- fairadapt(\n  X2 ~ ., \n  train.data = df_race_fpt,\n  prot.attr = \"S\", adj.mat = adj_wo_Y,\n  quant.method = linearQuants\n)\nadapt_df_black &lt;- adaptedData(fpt_model_black)\n\nLet us wrap up:\n\nwe have two predictive models for the FYA (above median = 1, or below median = 0):\n\nunaware (without S)\naware (with S)\n\nwe have the counterfactual characteristics obtained with fairadapt in two situations depending on the reference class:\n\nBlack individuals as reference\nWhite individuals as reference.\n\n\nThe predictive models will be used to compare predictions made using:\n\nRaw characteristics (initial characteristics).\nCharacteristics possibly altered through FairAdapt for individuals who were not in the reference group (i.e., using counterfactuals).\n\n\n1.4.1.1 Unaware Model\nThe predicted values using the initial characteristics, for the unaware model:\n\nmodel_unaware &lt;- pred_unaware$model\npred_unaware_all &lt;- predict(\n  model_unaware, newdata = df_race_fpt, type = \"response\"\n)\n\nWe put in a table the initial characteristics (factuals) and the prediction made by the unaware model:\n\nfactuals_unaware &lt;- tibble(\n  S = df_race$S,\n  X1 = df_race$X1,\n  X2 = df_race$X2,\n  pred = pred_unaware_all\n)\n\nLet us save this dataset in a csv file (this file will be used to perform multivariate transport in python).\n\nwrite.csv(\n  factuals_unaware, \n  file = \"data/factuals_unaware.csv\", row.names = FALSE\n)\n\nLet us build a dataset containing only counterfactual characteristics (obtained with fairadapt): values for \\(X_1\\) and \\(X_2\\) of White individuals as if they had been Black, and values for \\(X_1\\) and \\(X_2\\) of Black individuals as if they had been White.\n\nind_white &lt;- which(df_race_fpt$S == \"White\")\nind_black &lt;- which(df_race_fpt$S == \"Black\")\ndf_counterfactuals_fpt &lt;- factuals_unaware |&gt;  select(-pred)\ndf_counterfactuals_fpt[ind_white, ] &lt;- \n  adapt_df_white[ind_white, ] |&gt; select(S, X1, X2)\ndf_counterfactuals_fpt[ind_black, ] &lt;- \n  adapt_df_black[ind_black,] |&gt; select(S, X1, X2)\n\nLet us get the predicted values for the counterfactuals, using the unaware model:\n\npred_unaware_fpt &lt;- predict(\n  model_unaware, newdata = df_counterfactuals_fpt, type = \"response\"\n)\n\nWe create a table with the counterfactual characteristics and the prediction by the unaware model:\n\ncounterfactuals_unaware_fpt &lt;- tibble(\n  S = df_counterfactuals_fpt$S,\n  X1 = df_counterfactuals_fpt$X1,\n  X2 = df_counterfactuals_fpt$X2,\n  pred = pred_unaware_fpt\n)\n\nWe merge the two datasets, factuals_unaware and counterfactuals_unaware_fpt in a single one. We add a column, type, to state whether the row gives the initial observations and predictions or the counterfactuals and correspoonding predictions.\n\n# dataset with factuals, for unaware model\nfactuals_unaware &lt;- factuals_unaware |&gt; mutate(type = \"factual\")\n# dataset with counterfactuals, for unaware model\ncounterfactuals_unaware_fpt &lt;- counterfactuals_unaware_fpt |&gt; \n  mutate(type = \"counterfactual\")\n# Bind the two:\nunaware_fpt &lt;- bind_rows(factuals_unaware, counterfactuals_unaware_fpt)\n\nNow, we can visualize the distribution of the values predicted by the unaware model within each group defined by the sensitive attribute.\n\nunaware_fpt_white &lt;- unaware_fpt |&gt; filter(S == \"White\") \nunaware_fpt_black &lt;- unaware_fpt |&gt; filter(S == \"Black\")\n\n\n\n1.4.1.1.1 Ref: Black\n\nggplot(unaware_fpt_black, aes(x = pred, fill = type)) +\n  geom_histogram(\n    aes(y = ..density..), alpha = 0.5, position = \"identity\", binwidth = 0.05) +\n  geom_density(alpha = 0.5) +\n  labs(title = \"Unaware model, Sensitive: Race, Reference: Black individuals\",\n       x = \"Predictions for Y\",\n       y = \"Density\") +\n  global_theme()\n\n\n\n\nFigure 1.6: Unaware model, Sensitive: Race, Reference: Black individuals\n\n\n\n\n\n\n\n\n\n\n1.4.1.1.2 Ref: White\n\nggplot(\n  data = unaware_fpt_white,\n  mapping = aes(x = pred, fill = type)\n) +\n  geom_histogram(\n    mapping = aes(y = ..density..), \n    alpha = 0.5, position = \"identity\", binwidth = 0.05\n  ) +\n  geom_density(alpha = 0.5) +\n  labs(\n    title = \"Unaware model, Sensitive: Race, Reference: White individuals\",\n       x = \"Predictions for Y\",\n       y = \"Density\"\n  ) +\n  global_theme()\n\n\n\n\nFigure 1.7: Unaware model, Sensitive: Race, Reference: White individuals\n\n\n\n\n\n\n\n\n\n\n\n\n1.4.1.2 Aware Model\nNow, we turn to the model that includes the sensitive attribute, i.e., the aware model.\nThe predicted values by the model, on the initial characteristics (on the factuals):\n\nmodel_aware &lt;- pred_aware$model\npred_aware_all &lt;- predict(model_aware, newdata = df_race_fpt, type = \"response\")\n\nWe create a tibble with the factuals and the predictions by the aware model:\n\nfactuals_aware &lt;- tibble(\n  S = df_race$S,\n  X1 = df_race$X1,\n  X2 = df_race$X2,\n  pred = pred_aware_all\n)\n\nLet us save this table in a CSV file (this file will be used to perform multivariate transport in python):\n\nwrite.csv(factuals_aware, file = \"data/factuals_aware.csv\", row.names = FALSE)\n\nRecall we created an object called df_counterfactuals_fpt which contains the counterfactual characteristics of all students, obtained with fairadapt:\n\ndf_counterfactuals_fpt\n\n# A tibble: 19,567 × 3\n   S        X1    X2\n   &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 Black  2.7   31.3\n 2 Black  2.6   28  \n 3 Black  2.7   21  \n 4 Black  3.1   28.1\n 5 Black  3.3   21.0\n 6 Black  3.3   26.9\n 7 Black  2.4   29.6\n 8 Black  2.3   29.8\n 9 Black  3.3   21  \n10 Black  2.85  33.5\n# ℹ 19,557 more rows\n\n\nWe make predictions with the aware model on these counterfactuals:\n\npred_aware_fpt &lt;- predict(\n  model_aware, newdata = df_counterfactuals_fpt, type = \"response\"\n)\n\nThen, we create a table with the counterfactuals and the predicted value by the aware model:\n\ncounterfactuals_aware_fpt &lt;- tibble(\n  S = df_counterfactuals_fpt$S,\n  X1 = df_counterfactuals_fpt$X1,\n  X2 = df_counterfactuals_fpt$X2,\n  pred = pred_aware_fpt\n)\n\nWe bind together the table with the factuals and the counterfactuals (as well as their predicted values by the aware model):\n\nfactuals_aware &lt;- factuals_aware |&gt; mutate(type = \"factual\")\ncounterfactuals_aware_fpt &lt;- counterfactuals_aware_fpt |&gt; \n  mutate(type = \"counterfactual\")\naware_fpt &lt;- bind_rows(factuals_aware, counterfactuals_aware_fpt)\n\nLastly, we can visualize the distribution of predicted values by the aware model once the characteristics of the individuals who are not on the reference group have been modified using fairadapt.\n\naware_fpt_white &lt;- aware_fpt %&gt;% filter(S == \"White\") \naware_fpt_black &lt;- aware_fpt %&gt;% filter(S == \"Black\")\n\n\n\n1.4.1.2.1 Ref: Black\n\nggplot(\n  data = aware_fpt_black, \n  mapping = aes(x = pred, fill = type)) +\n  geom_histogram(\n    mapping = aes(y = ..density..), \n    alpha = 0.5, position = \"identity\", binwidth = 0.05\n  ) +\n  geom_density(alpha = 0.5) +\n  labs(\n    title = \"Aware model, Sensitive: Race, Reference: Black individuals\",\n    x = \"Predictions for Y\",\n    y = \"Density\"\n  ) +\n  global_theme()\n\n\n\n\nFigure 1.8: Aware model, Sensitive: Race, Reference: Black individuals\n\n\n\n\n\n\n\n\n\n\n1.4.1.2.2 Ref: White\n\nggplot(\n  data = aware_fpt_white, \n  mapping = aes(x = pred, fill = type)) +\n  geom_histogram(\n    mapping = aes(y = ..density..), \n    alpha = 0.5, position = \"identity\", binwidth = 0.05) +\n  geom_density(alpha = 0.5) +\n  labs(\n    title = \"Aware model, Sensitive: Race, Reference: White individuals\",\n    x = \"Predictions for Y\",\n    y = \"Density\"\n  ) +\n  global_theme()\n\n\n\n\nFigure 1.9: Aware model, Sensitive: Race, Reference: White individuals\n\n\n\n\n\n\n\n\n\n\n\n\n1.4.1.3 Comparison for two individuals\nLet us focus on two individuals: the 24th (Black) and the 25th (White) of the dataset.\n\n(indiv_factuals_unaware &lt;- factuals_unaware[24:25, ])\n\n# A tibble: 2 × 5\n  S        X1    X2  pred type   \n  &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;  \n1 Black   2.8    29 0.300 factual\n2 White   2.8    34 0.382 factual\n\n\nThe characteristics of these two individuals would be, according to what was estimated using fairadapt, if the reference group was the one in which they do not belong:\n\n(indiv_counterfactuals_unaware_fpt &lt;- counterfactuals_unaware_fpt[24:25, ])\n\n# A tibble: 2 × 5\n  S        X1    X2  pred type          \n  &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;         \n1 White  3.25  37.6 0.509 counterfactual\n2 Black  2.5   26   0.225 counterfactual\n\n\nWe put the factuals and counterfactuals in a single table:\n\nindiv_unaware_fpt &lt;- bind_rows(\n  indiv_factuals_unaware |&gt; mutate(id = c(24, 25)), \n  indiv_counterfactuals_unaware_fpt |&gt; mutate(id = c(24, 25))\n)\nindiv_unaware_fpt\n\n# A tibble: 4 × 6\n  S        X1    X2  pred type              id\n  &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;          &lt;dbl&gt;\n1 Black  2.8   29   0.300 factual           24\n2 White  2.8   34   0.382 factual           25\n3 White  3.25  37.6 0.509 counterfactual    24\n4 Black  2.5   26   0.225 counterfactual    25\n\n\nThe difference between the counterfactual and the factual for these two individuals:\n\nindiv_unaware_fpt |&gt; select(id , type, pred) |&gt; \n  pivot_wider(names_from = type, values_from = pred) |&gt; \n  mutate(diff_fpt = counterfactual - factual)\n\n# A tibble: 2 × 4\n     id factual counterfactual diff_fpt\n  &lt;dbl&gt;   &lt;dbl&gt;          &lt;dbl&gt;    &lt;dbl&gt;\n1    24   0.300          0.509    0.209\n2    25   0.382          0.225   -0.157\n\n\nWe apply the same procedure with the aware model:\n\nindiv_aware_fpt &lt;- bind_rows(\n  factuals_aware[c(24, 25),] |&gt; mutate(id = c(24, 25)),\n  counterfactuals_aware_fpt[c(24, 25),] |&gt; mutate(id = c(24, 25))\n)\nindiv_aware_fpt\n\n# A tibble: 4 × 6\n  S        X1    X2   pred type              id\n  &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;          &lt;dbl&gt;\n1 Black  2.8   29   0.133  factual           24\n2 White  2.8   34   0.413  factual           25\n3 White  3.25  37.6 0.522  counterfactual    24\n4 Black  2.5   26   0.0991 counterfactual    25\n\n\nThe difference between the counterfactual and the factual for these two individuals, when using the aware model:\n\nindiv_aware_fpt |&gt; select(id , type, pred) |&gt; \n  pivot_wider(names_from = type, values_from = pred) |&gt; \n  mutate(diff = counterfactual - factual)\n\n# A tibble: 2 × 4\n     id factual counterfactual   diff\n  &lt;dbl&gt;   &lt;dbl&gt;          &lt;dbl&gt;  &lt;dbl&gt;\n1    24   0.133         0.522   0.389\n2    25   0.413         0.0991 -0.314\n\n\n\n\n1.4.1.4 Demographic Parity\nLet us assume here that the reference group is “White individuals” (i.e., the group with the most individuals in the dataset). We focus on the minority, i.e., Black individuals. We consider here that the model is fair towards the minority class if: \\[\nP(\\hat{Y}_{S \\leftarrow \\text{White}} = 1 | S = \\text{Black}, X_1, X_2) = P(\\hat{Y} = 1 | S = \\text{White}, X_1, X_2)\n\\] If the model is fair with respect to this criterion, the proportion of Black individuals predicted to have grades above the median should be the same as if they had been white.\nFor predictions made with the unaware model:\n\ndp_unaware_fpt &lt;- mean(\n  counterfactuals_unaware_fpt |&gt; filter(S == \"White\") |&gt; pull(\"pred\") - \n    factuals_unaware |&gt; filter(S == \"Black\") |&gt; pull(\"pred\")\n)\ndp_unaware_fpt\n\n[1] 0.19177\n\n\nWe do the same with the aware model:\n\ndp_aware_fpt &lt;- mean(\n  counterfactuals_aware_fpt |&gt; filter(S == \"White\") |&gt; pull(\"pred\") - \n    factuals_aware |&gt; filter(S == \"Black\") |&gt; pull(\"pred\")\n)\ndp_aware_fpt\n\n[1] 0.3809912\n\n\n\n\n\n1.4.2 Multivariate Optimal Transport\nWe apply multivariate optimal transport (OT), following the methodology developed in De Lara et al. (2024). Note that with OT, it is not possible to handle new cases. Counterfactuals will only be calculated on the train set.\nThe codes are run in python. We use the {reticulate} R package to call python in this notebook.\n\nlibrary(reticulate)\n\nSome libraries need to be loaded (including POT called ot)\n\nimport ot\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as pl\nimport ot.plot\n\nThe data with the factuals need to be loaded:\n\ndf_aware = pd.read_csv('data/factuals_aware.csv')\ndf_unaware = pd.read_csv('data/factuals_unaware.csv')\n\n\nx_S = df_aware.drop(columns=['pred'])\nx_S.head()\n\n       S   X1    X2\n0  White  3.1  39.0\n1  White  3.0  36.0\n2  White  3.1  30.0\n3  White  3.4  37.0\n4  White  3.6  30.5\n\n\n\nx_white = x_S[x_S['S'] == 'White']\nx_white = x_white.drop(columns=['S'])\nx_black = x_S[x_S['S'] == 'Black']\nx_black = x_black.drop(columns=['S'])\n\nn_white = len(x_white)\nn_black = len(x_black)\n# Uniform weights\nw_white = (1/n_white)*np.ones(n_white)\nw_black = (1/n_black)*np.ones(n_black)\n\nCost matrix between both distributions:\n\nx_white = x_white.to_numpy()\nx_black = x_black.to_numpy()\nC = ot.dist(x_white, x_black)\n\n\npl.figure(1)\npl.plot(x_white[:, 0], x_white[:, 1], '+b', label='Source samples')\npl.plot(x_black[:, 0], x_black[:, 1], 'xr', label='Target samples')\npl.legend(loc=0)\npl.title('Source and target distributions')\n\n\n\n\nFigure 1.10: Source and target distributions\n\n\n\n\n\n\n\n\n\npl.figure(2)\npl.imshow(C, interpolation='nearest')\npl.title('Cost matrix C')\n\n\n\n\nFigure 1.11: Cost matric C\n\n\n\n\n\n\n\n\nThe transport plan: white –&gt; black\n\npi_white_black = ot.emd(w_white, w_black, C, numItermax=1e8)\npi_black_white = pi_white_black.T\npi_white_black.shape\n\n(18285, 1282)\n\n\n\nsum_of_rows = np.sum(pi_white_black, axis=1)\nsum_of_rows*n_white\n\narray([1., 1., 1., ..., 1., 1., 1.])\n\n\n\npi_black_white.shape\n\n(1282, 18285)\n\nsum_of_rows = np.sum(pi_black_white, axis=1)\nsum_of_rows*n_black\n\narray([1., 1., 1., ..., 1., 1., 1.])\n\n\n\npl.figure(3)\npl.imshow(pi_white_black, interpolation='nearest')\npl.title('OT matrix pi_white_black')\n\npl.figure(4)\not.plot.plot2D_samples_mat(x_white, x_black, pi_white_black, c=[.5, .5, 1])\npl.plot(x_white[:, 0], x_white[:, 1], '+b', label='Source samples')\npl.plot(x_black[:, 0], x_black[:, 1], 'xr', label='Target samples')\npl.legend(loc=0)\npl.title('OT matrix with samples')\n\n\n\n\nFigure 1.12: OT matrix pi_white_black\n\n\n\n\n\n\n\n\n\ntransformed_x_white = n_white*pi_white_black@x_black\n\n\n\n\n\n\n\n\n\ntransformed_x_white.shape\n\n(18285, 2)\n\n\n\ntransformed_x_white\n\narray([[ 2.7, 31. ],\n       [ 2.7, 28. ],\n       [ 2.6, 21. ],\n       ...,\n       [ 3.9, 28. ],\n       [ 2.5, 22. ],\n       [ 3. , 19. ]])\n\n\n\ntransformed_x_black = n_black*pi_black_white@x_white\n\n\ntransformed_x_black.shape\n\n(1282, 2)\n\n\n\ntransformed_x_black\n\narray([[ 3.2       , 37.58851518],\n       [ 3.28565491, 28.02103363],\n       [ 2.95793273, 32.14022423],\n       ...,\n       [ 3.28597758, 33.        ],\n       [ 2.65092152, 41.43910309],\n       [ 2.75152858, 36.        ]])\n\n\n\ncounterfactual_x = x_S.drop(columns=['S'])\ncounterfactual_x[x_S['S'] == 'White'] = transformed_x_white\ncounterfactual_x[x_S['S'] == 'Black'] = transformed_x_black\n\n\ncounterfactual_x.head()\n\n    X1    X2\n0  2.7  31.0\n1  2.7  28.0\n2  2.6  21.0\n3  3.1  28.0\n4  3.2  21.0\n\n\n\ncounterfactual_x.shape\n\n(19567, 2)\n\n\nLastly, we export the results in a CSV file:\n\ncsv_file_path = 'data/counterfactuals_ot.csv'\ncounterfactual_x.to_csv(csv_file_path, index=False)\n\nLet us get back to R, and load the results.\n\ncounterfactuals_ot &lt;- read_csv('data/counterfactuals_ot.csv')\n\nWe add the sensitive attribute to the dataset (Black individuals become White, and conversely):\n\ncounterfactuals_ot &lt;- counterfactuals_ot |&gt; \n  mutate(S = counterfactuals_unaware_fpt$S)\n\n\n1.4.2.1 Unaware Model\nLet us make prediction with the unaware model on the counterfactuals obtained with OT:\n\npred_unaware_ot &lt;- predict(\n  model_unaware, newdata = counterfactuals_ot, type = \"response\"\n)\ncounterfactuals_unaware_ot &lt;- counterfactuals_ot |&gt; \n  mutate(pred = pred_unaware_ot, type = \"counterfactual\")\n\nWe bind the factuals and counterfactuals with their respective predicted values in a single dataset:\n\nunaware_ot &lt;- bind_rows(\n  # predicted values on factuals\n  factuals_unaware, \n  # predicted values on counterfactuals obtained with OT\n  counterfactuals_unaware_ot\n)\n\nThen, we can visualize the distribution of the values predicted by the unaware model within each group defined by the sensitive attribute.\n\nunaware_ot_white &lt;- unaware_ot %&gt;% filter(S == \"White\") \nunaware_ot_black &lt;- unaware_ot %&gt;% filter(S == \"Black\")\n\n:::{panel-tabset}\n\n1.4.2.1.1 Ref: Black\n\nggplot(\n  data = unaware_ot_black, \n  mapping = aes(x = pred, fill = type)\n) +\n  geom_histogram(\n    mapping = aes(y = ..density..), \n    alpha = 0.5, position = \"identity\", binwidth = 0.05\n  ) +\n  geom_density(alpha = 0.5) +\n  labs(\n    title = \"Unaware model, Sensitive: Race, Reference: Black individual\",\n       x = \"Predictions for Y\",\n       y = \"Density\"\n  ) +\n  global_theme()\n\n\n\n\nFigure 1.13: Unaware model, Sensitive: Race, Reference: Black individuals\n\n\n\n\n\n\n\n\n\n\n1.4.2.1.2 Ref: White\n\nggplot(\n  data = unaware_ot_white, \n  mapping = aes(x = pred, fill = type)) +\n  geom_histogram(\n    mapping = aes(y = ..density..), \n    alpha = 0.5, position = \"identity\", binwidth = 0.05\n  ) +\n  geom_density(alpha = 0.5) +\n  labs(\n    title = \"Unaware model, Sensitive: Race, Reference: White\",\n       x = \"Predictions for Y\",\n       y = \"Density\") +\n  global_theme()\n\n\n\n\nFigure 1.14: Unaware model, Sensitive: Race, Reference: White individuals\n\n\n\n\n\n\n\n\n\n\n\n1.4.2.2 Aware Model\nLet us make prediction with the aware model on the counterfactuals obtained with OT:\n\npred_aware_ot &lt;- predict(\n  model_aware, newdata = counterfactuals_ot, type = \"response\"\n)\ncounterfactuals_aware_ot &lt;- counterfactuals_ot |&gt;  \n  mutate(pred = pred_aware_ot, type = \"counterfactual\")\ncounterfactuals_aware_ot\n\n# A tibble: 19,567 × 5\n      X1    X2 S       pred type          \n   &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;  &lt;dbl&gt; &lt;chr&gt;         \n 1   2.7  31   Black 0.141  counterfactual\n 2   2.7  28   Black 0.120  counterfactual\n 3   2.6  21   Black 0.0791 counterfactual\n 4   3.1  28   Black 0.143  counterfactual\n 5   3.2  21   Black 0.104  counterfactual\n 6   3.3  27.5 Black 0.152  counterfactual\n 7   2.4  29   Black 0.111  counterfactual\n 8   2.3  29   Black 0.106  counterfactual\n 9   3.3  22   Black 0.115  counterfactual\n10   2.8  34   Black 0.171  counterfactual\n# ℹ 19,557 more rows\n\n\nWe bind the factuals and counterfactuals with their respective predicted values in a single dataset:\n\naware_ot &lt;- bind_rows(\n  factuals_aware, \n  counterfactuals_aware_ot\n)\n\nThen, we can visualize the distribution of the values predicted by the unaware model within each group defined by the sensitive attribute.\n\naware_ot_white &lt;- aware_ot |&gt; filter(S == \"White\") \naware_ot_black &lt;- aware_ot |&gt;  filter(S == \"Black\")\n\n\n\n1.4.2.2.1 Ref: Black\n\nggplot(\n  data = aware_ot_black, \n  mapping = aes(x = pred, fill = type)\n) +\n  geom_histogram(\n    mapping = aes(y = ..density..), \n    alpha = 0.5, position = \"identity\", binwidth = 0.05\n  ) +\n  geom_density(alpha = 0.5) +\n  labs(\n    title = \"Aware model, Sensitive: Race, Reference: Black individual\",\n       x = \"Predictions for Y\",\n       y = \"Density\"\n  ) +\n  global_theme()\n\n\n\n\nFigure 1.15: Aware model, Sensitive: Race, Reference: Black individuals\n\n\n\n\n\n\n\n\n\n\n1.4.2.2.2 Ref: White\n\nggplot(\n  data = aware_ot_white, \n  mapping = aes(x = pred, fill = type)) +\n  geom_histogram(\n    mapping = aes(y = ..density..), \n    alpha = 0.5, position = \"identity\", binwidth = 0.05\n  ) +\n  geom_density(alpha = 0.5) +\n  labs(\n    title = \"Aware model, Sensitive: Race, Reference: White\",\n       x = \"Predictions for Y\",\n       y = \"Density\") +\n  global_theme()\n\n\n\n\nFigure 1.16: Aware model, Sensitive: Race, Reference: White individuals\n\n\n\n\n\n\n\n\n\n\n\n\n1.4.2.3 Comparison for two individuals\nLet us, again, focus on two individuals: 24 (Black) and 25 (White):\n\nindiv_factuals_unaware\n\n# A tibble: 2 × 5\n  S        X1    X2  pred type   \n  &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;  \n1 Black   2.8    29 0.300 factual\n2 White   2.8    34 0.382 factual\n\n\nThe counterfactuals for those individuals, using the unaware model:\n\n(indiv_counterfactuals_unaware_ot &lt;- counterfactuals_unaware_ot[24:25, ])\n\n# A tibble: 2 × 5\n     X1    X2 S      pred type          \n  &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;dbl&gt; &lt;chr&gt;         \n1  3.20  37.6 White 0.502 counterfactual\n2  2.4   25   Black 0.203 counterfactual\n\n\nLet us put the factuals and counterfactuals in a single table:\n\nindiv_unaware_ot &lt;- bind_rows(\n  indiv_factuals_unaware |&gt; mutate(id = c(24, 25)),\n  indiv_counterfactuals_unaware_ot |&gt; mutate(id = c(24, 25))\n)\nindiv_unaware_ot\n\n# A tibble: 4 × 6\n  S        X1    X2  pred type              id\n  &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;          &lt;dbl&gt;\n1 Black  2.8   29   0.300 factual           24\n2 White  2.8   34   0.382 factual           25\n3 White  3.20  37.6 0.502 counterfactual    24\n4 Black  2.4   25   0.203 counterfactual    25\n\n\nWe compute the difference between the predicted value by the unaware model using the counterfactuals and the predicted value by the unaware model using the factuals:\n\nindiv_unaware_ot |&gt; select(id , type, pred) |&gt; \n  pivot_wider(names_from = type, values_from = pred) |&gt; \n  mutate(diff = counterfactual - factual)\n\n# A tibble: 2 × 4\n     id factual counterfactual   diff\n  &lt;dbl&gt;   &lt;dbl&gt;          &lt;dbl&gt;  &lt;dbl&gt;\n1    24   0.300          0.502  0.202\n2    25   0.382          0.203 -0.179\n\n\nWe do the same for the aware model:\n\nindiv_aware_ot &lt;- bind_rows(\n  factuals_aware[c(24, 25),] |&gt; mutate(id = c(24, 25)),\n  counterfactuals_aware_ot[c(24, 25),] |&gt; mutate(id = c(24, 25))\n)\nindiv_aware_ot\n\n# A tibble: 4 × 6\n  S        X1    X2   pred type              id\n  &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;          &lt;dbl&gt;\n1 Black  2.8   29   0.133  factual           24\n2 White  2.8   34   0.413  factual           25\n3 White  3.20  37.6 0.515  counterfactual    24\n4 Black  2.4   25   0.0898 counterfactual    25\n\n\nThe difference between the counterfactual and the factual for these two individuals, when using the aware model:\n\nindiv_aware_ot |&gt; select(id , type, pred) |&gt; \n  pivot_wider(names_from = type, values_from = pred) |&gt; \n  mutate(diff = counterfactual - factual)\n\n# A tibble: 2 × 4\n     id factual counterfactual   diff\n  &lt;dbl&gt;   &lt;dbl&gt;          &lt;dbl&gt;  &lt;dbl&gt;\n1    24   0.133         0.515   0.383\n2    25   0.413         0.0898 -0.323\n\n\n\n\n1.4.2.4 Demographic Parity\nAs for the counterfactuals obtained with fairadapt, we assume here that the reference group is “White individuals” (i.e., the group with the most individuals in the dataset). We focus on the minority, i.e., Black individuals. We consider here that the model is fair towards the minority class if: \\[\nP(\\hat{Y}_{S \\leftarrow \\text{White}} = 1 | S = \\text{Black}, X_1, X_2) = P(\\hat{Y} = 1 | S = \\text{White}, X_1, X_2)\n\\] If the model is fair with respect to this criterion, the proportion of Black individuals predicted to have grades above the median should be the same as if they had been white.\nFor predictions made with the unaware model:\n\ndp_unaware_pt &lt;- mean(\n  counterfactuals_unaware_ot |&gt; filter(S == \"White\") |&gt; pull(\"pred\") - \n    factuals_unaware |&gt; filter(S == \"Black\") |&gt; pull(\"pred\")\n)\ndp_unaware_pt\n\n[1] 0.1821212\n\n\nWe do the same with the aware model:\n\ndp_aware_ot &lt;- mean(\n  counterfactuals_aware_ot |&gt; filter(S == \"White\") |&gt; pull(\"pred\") - \n    factuals_aware |&gt; filter(S == \"Black\") |&gt; pull(\"pred\")\n)\ndp_aware_ot\n\n[1] 0.3726591\n\n\n\n\n\n1.4.3 Sequential transport\nLastly, we turn to sequential transport (the methodology developed in our paper). We define a function, fonction_transport() (see in functions/utils.R) to perform a fast sequential transport on causal graph.\n\n#' Sequential transport\n#'\n#' @param data dataset with three columns:\n#'  - S: sensitive attribute, factor White/Black\n#'  - X1: first predictor, assumed to be causally linked to S\n#'  - X2: second predictor, assumed to be causally linked to S and X1\n#' @param number of cells in each dimension (default to 15)\n#' @param h small value added to extend the area covered by the grid (default\n#'  to .2)\n#' @param d neighborhood weight when conditioning by x1 (default to .5)\nfonction_transport &lt;- function(data,\n                              n_grid = 15,\n                              h = .2,\n                              d = .5) {\n\n  # Subset of the data: 0 for Black, 1 for White\n  D_SXY_0 &lt;- data[data$S ==\"Black\", ]\n  D_SXY_1 &lt;- data[data$S ==\"White\", ]\n\n  # Coordinates of the cells of the grid on subset of 0 (Black)\n  vx1_0 &lt;- seq(min(D_SXY_0$X1) - h, max(D_SXY_0$X1) + h, length = n_grid + 1)\n  vx2_0 &lt;- seq(min(D_SXY_0$X2) - h, max(D_SXY_0$X2) + h, length = n_grid + 1)\n  # and middle point of the cells\n  vx1_0_mid &lt;- (vx1_0[2:(1+n_grid)]+vx1_0[1:(n_grid)]) / 2\n  vx2_0_mid &lt;- (vx2_0[2:(1+n_grid)]+vx2_0[1:(n_grid)]) / 2\n\n  # Coordinates of the cells of the grid on subset of 1 (White)\n  vx1_1 &lt;- seq(min(D_SXY_1$X1) -h, max(D_SXY_1$X1) + h, length = n_grid + 1)\n  vx1_1_mid &lt;- (vx1_1[2:(1 + n_grid)] + vx1_1[1:(n_grid)]) / 2\n  # and middle point of the cells\n  vx2_1 &lt;- seq(min(D_SXY_1$X2) - h, max(D_SXY_1$X2) + h, length = n_grid + 1)\n  vx2_1_mid &lt;- (vx2_1[2:(1 + n_grid)] + vx2_1[1:(n_grid)]) / 2\n\n  # Creation of the grids for the CDF and Quantile function\n  # init with NA values\n  # One grid for X1 and X2, on both subsets of the data (Black/White)\n  F1_0 &lt;- F2_0 &lt;- F1_1 &lt;- F2_1 &lt;- matrix(NA, n_grid, n_grid)\n  Q1_0 &lt;- Q2_0 &lt;- Q1_1 &lt;- Q2_1 &lt;- matrix(NA, n_grid, n_grid)\n\n  # Empirical CDF for X1 on subset of Black\n  FdR1_0 &lt;- Vectorize(function(x) mean(D_SXY_0$X1 &lt;= x))\n  f1_0 &lt;- FdR1_0(vx1_0_mid)\n  # Empirical CDF for X2 on subset of Black\n  FdR2_0 &lt;- Vectorize(function(x) mean(D_SXY_0$X2 &lt;= x))\n  f2_0 &lt;- FdR2_0(vx2_0_mid)\n  # Empirical CDF for X1 on subset of White\n  FdR1_1 &lt;- Vectorize(function(x) mean(D_SXY_1$X1 &lt;= x))\n  f1_1 &lt;- FdR1_1(vx1_1_mid)\n  # Empirical CDF for X2 on subset of White\n  FdR2_1 &lt;- Vectorize(function(x) mean(D_SXY_1$X2 &lt;= x))\n  f2_1 &lt;- FdR2_1(vx2_1_mid)\n\n  u &lt;- (1:n_grid) / (n_grid + 1)\n  # Empirical quantiles for X1 on subset of Black\n  Qtl1_0 &lt;- Vectorize(function(x) quantile(D_SXY_0$X1, x))\n  q1_0 &lt;- Qtl1_0(u)\n  # Empirical quantiles for X2 on subset of Black\n  Qtl2_0 &lt;- Vectorize(function(x) quantile(D_SXY_0$X2, x))\n  q2_0 &lt;- Qtl2_0(u)\n  # Empirical quantiles for X1 on subset of White\n  Qtl1_1 &lt;- Vectorize(function(x) quantile(D_SXY_1$X1, x))\n  q1_1 &lt;- Qtl1_1(u)\n  # Empirical quantiles for X2 on subset of White\n  Qtl2_1 &lt;- Vectorize(function(x) quantile(D_SXY_1$X2, x))\n  q2_1 &lt;- Qtl2_1(u)\n\n  for(i in 1:n_grid) {\n    # Subset of Black\n    idx1_0 &lt;- which(abs(D_SXY_0$X1 - vx1_0_mid[i]) &lt; d)\n    FdR2_0 &lt;- Vectorize(function(x) mean(D_SXY_0$X2[idx1_0] &lt;= x))\n    F2_0[, i] &lt;- FdR2_0(vx2_0_mid)\n    Qtl2_0 &lt;- Vectorize(function(x) quantile(D_SXY_0$X2[idx1_0], x))\n    Q2_0[, i] &lt;- Qtl2_0(u)\n\n    idx2_0 &lt;- which(abs(D_SXY_0$X2 - vx2_0_mid[i]) &lt; d)\n    FdR1_0 &lt;- Vectorize(function(x) mean(D_SXY_0$X1[idx2_0] &lt;= x))\n    F1_0[, i] &lt;- FdR1_0(vx1_0_mid)\n    Qtl1_0 &lt;- Vectorize(function(x) quantile(D_SXY_0$X1[idx2_0], x))\n    Q1_0[, i] &lt;- Qtl1_0(u)\n\n    # Subset of White\n    idx1_1 &lt;- which(abs(D_SXY_1$X1 - vx1_1_mid[i]) &lt; d)\n    FdR2_1 &lt;- Vectorize(function(x) mean(D_SXY_1$X2[idx1_1] &lt;= x))\n    F2_1[, i] &lt;- FdR2_1(vx2_1_mid)\n    Qtl2_1 &lt;- Vectorize(function(x) quantile(D_SXY_1$X2[idx1_1], x))\n    Q2_1[, i] &lt;- Qtl2_1(u)\n\n    idx2_1 &lt;- which(abs(D_SXY_1$X2-vx2_1_mid[i])&lt;d)\n    FdR1_1 &lt;- Vectorize(function(x) mean(D_SXY_1$X1[idx2_1] &lt;= x))\n    F1_1[, i] &lt;- FdR1_1(vx1_1_mid)\n    Qtl1_1 &lt;- Vectorize(function(x) quantile(D_SXY_1$X1[idx2_1], x))\n    Q1_1[, i] &lt;- Qtl1_1(u)\n  }\n\n  # Transport for X2\n  T2 &lt;- function(x2) {\n    i &lt;- which.min(abs(vx2_0_mid - x2))\n    p &lt;- f2_0[i]\n    i &lt;- which.min(abs(u - p))\n    x2star &lt;- q2_1[i]\n    x2star\n  }\n\n  # Transport for X1\n  T1 &lt;- function(x1) {\n    i &lt;- which.min(abs(vx1_0_mid - x1))\n    p &lt;- f1_0[i]\n    i &lt;- which.min(abs(u - p))\n    x1star &lt;- q1_1[i]\n    x1star\n  }\n\n  # Transport for X2 conditional on X1\n  T2_cond_x1 &lt;- function(x2, x1) {\n    k0 &lt;- which.min(abs(vx1_0_mid - x1))\n    k1 &lt;- which.min(abs(vx1_1_mid - T1(x1)))\n    i &lt;- which.min(abs(vx2_0_mid - x2))\n    p &lt;- F2_0[i, k0]\n    i &lt;- which.min(abs(u - p))\n    x2star &lt;- Q2_1[i, k1]\n    x2star\n  }\n\n  # Transport for X1 conditional on X2\n  T1_cond_x2 &lt;- function(x1, x2) {\n    k0 &lt;- which.min(abs(vx2_0_mid - x2))\n    k1 &lt;- which.min(abs(vx2_1_mid - x2))\n    i &lt;- which.min(abs(vx1_0_mid - x1))\n    p &lt;- F1_0[i, k0]\n    i &lt;- which.min(abs(u - p))\n    x1star &lt;- Q1_1[i, k1]\n    x1star\n  }\n\n  list(\n    Transport_x1 = T1,\n    Transport_x2 = T2,\n    Transport_x1_cond_x2 = T1_cond_x2,\n    Transport_x2_cond_x1 = T2_cond_x1\n  )\n}\n\n\n\n\n\n\n\nNote\n\n\n\nThe fonction_transport() function returns not only the functions Transport_x1(), Transport_x2(), Transport_x1_cond_x2(), Transport_x2_cond_x1(), but also the useful values of the grid (e.g., vx1_0_mid defined in the environment of the function and used in the functions). Note that defining a global object named vx1_0_mid will not alter the object of the same name defined in the environment of fonction_transport(): R will call the vx1_0_mid from that environment and not the one that may be defined in the global environment.\n\n\nLet us apply this function. Note that we use a grid of length 500 to fasten the computation of sequential transport (the estimation takes about 45 seconds on a standard computer).\n\nseq_functions &lt;- fonction_transport(data = df_race_fpt, n_grid = 500)\n\nLet us extract the transport functions to transport \\(X_1\\) and \\(X_2\\):\n\nT_X1 &lt;- seq_functions$Transport_x1\nT_X2 &lt;- seq_functions$Transport_x2\n\nWe also do the same with the transport of \\(X_2\\) conditional on \\(X_1\\):\n\nT_X2_c_X1 &lt;- seq_functions$Transport_x2_cond_x1\n\nNow, we can apply these functions to the subset of Black individuals to sequentially transport \\(X_1\\) (UGPA) and then \\(X_2\\) (LSAT) conditional on the transported value of \\(X_1\\):\nThe values of \\(X_1\\) and \\(X_2\\) for Black individuals:\n\na10 &lt;- df_race_fpt$X1[ind_black]\na20 &lt;- df_race_fpt$X2[ind_black]\n\nThe transported values:\n\nx1_star &lt;- map_dbl(a10, T_X1) # Transport X1 to group S=White\nx2_star &lt;- map2_dbl(a20, a10, T_X2_c_X1) # Transport X2|X1 to group S=White\n\nWe build a dataset with the sensitive attribute of Black individuals changed to white, and their characteristics changed to their transported characteristics:\n\ndf_counterfactuals_seq_black &lt;- \n  df_race_fpt |&gt; mutate(id = row_number()) |&gt; \n  filter(S == \"Black\") |&gt; \n  mutate(\n    S = \"White\",\n    X1 = x1_star,\n    X2 = x2_star\n  )\n\nWe make predictions based on those counterfactuals obrained with sequential transport, on both models (the unaware model, and the aware model):\n\npred_seq_unaware &lt;- predict(\n  model_unaware, newdata = df_counterfactuals_seq_black,type = \"response\"\n)\npred_seq_aware &lt;- predict(\n  model_aware, newdata = df_counterfactuals_seq_black,type = \"response\"\n)\n\n\ncounterfactuals_seq_unaware_black &lt;- \n  df_counterfactuals_seq_black |&gt; \n  mutate(pred = pred_seq_unaware, type = \"counterfactual\")\ncounterfactuals_seq_aware_black &lt;- \n  df_counterfactuals_seq_black |&gt; \n  mutate(pred = pred_seq_aware, type = \"counterfactual\")\n\n\naware_seq_black &lt;- bind_rows(\n  factuals_aware |&gt; filter(S == \"Black\"), \n  counterfactuals_seq_aware_black\n)\nunaware_seq_black &lt;- bind_rows(\n  factuals_unaware |&gt; filter(S == \"Black\"), \n  counterfactuals_seq_aware_black)\n\n\nUnawareAware\n\n\n\nggplot(\n  data = unaware_seq_black, \n  mapping = aes(x = pred, fill = type)\n) +\n  geom_histogram(\n    mapping = aes(y = ..density..), \n    alpha = 0.5, position = \"identity\", binwidth = 0.05\n  ) +\n  geom_density(alpha = 0.5) +\n  labs(\n    title = \"Unware model, S: Race - Black --&gt; White\",\n       x = \"Predictions for Y\",\n       y = \"Density\") +\n  global_theme()\n\n\n\n\nFigure 1.17: Unaware model, Sensitive: Race, Reference: White individuals\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  data = aware_seq_black, \n  mapping = aes(x = pred, fill = type)\n) +\n  geom_histogram(\n    mapping = aes(y = ..density..), \n    alpha = 0.5, position = \"identity\", binwidth = 0.05\n  ) +\n  geom_density(alpha = 0.5) +\n  labs(\n    title = \"Aware model, S: Race - Black --&gt; White\",\n       x = \"Predictions for Y\",\n       y = \"Density\") +\n  global_theme()\n\n\n\n\nFigure 1.18: Aware model, Sensitive: Race, Reference: White individuals\n\n\n\n\n\n\n\n\n\n\n\n\n1.4.3.1 Comparison for two individuals\nLet us focus on the first three Black individuals of the dataset.\n\nfactuals_unaware |&gt; \n  filter(S == \"Black\") |&gt; \n  dplyr::slice(1:3)\n\n# A tibble: 3 × 5\n  S        X1    X2  pred type   \n  &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;  \n1 Black   2.8    29 0.300 factual\n2 Black   3.2    19 0.206 factual\n3 Black   2.6    23 0.198 factual\n\n\nTheir characteristics after sequential transport (and the predicted value with the unaware model):\n\nindiv_counterfactuals_seq_unaware &lt;- counterfactuals_seq_unaware_black[c(1:3), ]\nindiv_counterfactuals_seq_unaware\n\n# A tibble: 3 × 6\n  S        X1    X2    id  pred type          \n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;         \n1 White   3.2  37      24 0.491 counterfactual\n2 White   3.5  28.5    40 0.381 counterfactual\n3 White   3.1  31.5    51 0.379 counterfactual\n\n\n\nindiv_unaware_seq &lt;- bind_rows(\n  factuals_unaware |&gt; \n    filter(S == \"Black\") |&gt; \n    dplyr::slice(1:3) |&gt; \n    mutate(id_indiv_black = c(1:3)), \n  indiv_counterfactuals_seq_unaware |&gt; mutate(id_indiv_black = c(1:3))\n)\nindiv_unaware_seq\n\n# A tibble: 6 × 7\n  S        X1    X2  pred type           id_indiv_black    id\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;                   &lt;int&gt; &lt;int&gt;\n1 Black   2.8  29   0.300 factual                     1    NA\n2 Black   3.2  19   0.206 factual                     2    NA\n3 Black   2.6  23   0.198 factual                     3    NA\n4 White   3.2  37   0.491 counterfactual              1    24\n5 White   3.5  28.5 0.381 counterfactual              2    40\n6 White   3.1  31.5 0.379 counterfactual              3    51\n\n\nAnd with the aware model:\n\nindiv_counterfactuals_seq_aware &lt;- counterfactuals_seq_aware_black[c(1:3), ]\nindiv_counterfactuals_seq_aware\n\n# A tibble: 3 × 6\n  S        X1    X2    id  pred type          \n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;         \n1 White   3.2  37      24 0.507 counterfactual\n2 White   3.5  28.5    40 0.418 counterfactual\n3 White   3.1  31.5    51 0.413 counterfactual\n\n\n\nindiv_aware_seq &lt;- bind_rows(\n  factuals_aware |&gt; \n    filter(S == \"Black\") |&gt; \n    dplyr::slice(1:3) |&gt; \n    mutate(id_indiv_black = c(1:3)), \n  indiv_counterfactuals_seq_aware |&gt; mutate(id_indiv_black = c(1:3))\n)\nindiv_aware_seq\n\n# A tibble: 6 × 7\n  S        X1    X2   pred type           id_indiv_black    id\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;                   &lt;int&gt; &lt;int&gt;\n1 Black   2.8  29   0.133  factual                     1    NA\n2 Black   3.2  19   0.0933 factual                     2    NA\n3 Black   2.6  23   0.0882 factual                     3    NA\n4 White   3.2  37   0.507  counterfactual              1    24\n5 White   3.5  28.5 0.418  counterfactual              2    40\n6 White   3.1  31.5 0.413  counterfactual              3    51\n\n\n\n\n1.4.3.2 Demographic Parity\nFor the unaware model:\n\nmean(\n  counterfactuals_seq_unaware_black$pred -\n    factuals_unaware |&gt; filter(S == \"Black\") |&gt; pull(\"pred\")\n)\n\n[1] 0.1816625\n\n\nFor the aware model:\n\nmean(\n  counterfactuals_seq_aware_black$pred - \n    factuals_aware |&gt; filter(S == \"Black\") |&gt; pull(\"pred\")\n)\n\n[1] 0.3722886\n\n\n\n\n\n1.4.4 Comparison\n\nUnaware ModelAware Model\n\n\n\ntb_indiv_unaware &lt;- \n  factuals_unaware |&gt; mutate(id = row_number(), counterfactual = \"none\") |&gt; \n  # Fairadapt\n  bind_rows(\n    counterfactuals_unaware_fpt |&gt; \n      mutate(id = row_number(), counterfactual = \"fpt\")\n  ) |&gt; \n  # Multivariate optimal transport\n  bind_rows(\n    counterfactuals_unaware_ot |&gt; mutate(id = row_number(), counterfactual = \"ot\")\n  ) |&gt; \n  # Sequential transport\n  bind_rows(\n    counterfactuals_seq_unaware_black |&gt; mutate(counterfactual = \"seq\")\n  ) |&gt; \n  filter(id %in% counterfactuals_seq_unaware_black$id[1:3])\n\ntb_indiv_unaware\n\n# A tibble: 12 × 7\n   S        X1    X2  pred type              id counterfactual\n   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;          &lt;int&gt; &lt;chr&gt;         \n 1 Black  2.8   29   0.300 factual           24 none          \n 2 Black  3.2   19   0.206 factual           40 none          \n 3 Black  2.6   23   0.198 factual           51 none          \n 4 White  3.25  37.6 0.509 counterfactual    24 fpt           \n 5 White  3.6   29.9 0.419 counterfactual    40 fpt           \n 6 White  3.1   32.3 0.394 counterfactual    51 fpt           \n 7 White  3.20  37.6 0.502 counterfactual    24 ot            \n 8 White  3.29  28.0 0.345 counterfactual    40 ot            \n 9 White  2.96  32.1 0.371 counterfactual    51 ot            \n10 White  3.2   37   0.491 counterfactual    24 seq           \n11 White  3.5   28.5 0.381 counterfactual    40 seq           \n12 White  3.1   31.5 0.379 counterfactual    51 seq           \n\n\n\n\nCode\npar(mar = c(4.1, 4.1, 0, 0))\n# Initial characteristics with the unaware model\ntb_indiv_unaware_factual &lt;- \n  tb_indiv_unaware |&gt; filter(type == \"factual\")\ncolour_factual &lt;- \"black\"\ncolour_fpt &lt;- \"#D55E00\"\ncolour_ot &lt;- \"#56B4E9\"\ncolour_seq &lt;- \"#009E73\"\ncolours_all &lt;- c(\n  \"Factual\" = colour_factual,\n  \"fairadapt\" = colour_fpt,\n  \"OT\" = colour_ot,\n  \"Seq T.\" = colour_seq\n)\nrange_x1 &lt;- range(tb_indiv_unaware$X1)\nexpansion_amount_x1 &lt;- .1*range_x1\nrange_x2 &lt;- range(tb_indiv_unaware$X2)\nexpansion_amount_x2 &lt;- .05*range_x2\n\nplot(\n  x = tb_indiv_unaware_factual$X1,\n  y = tb_indiv_unaware_factual$X2,\n  col = colour_factual,\n  xlab = \"X1 (UGPA)\", ylab = \"X2 (LSAT)\",\n  xlim = c(range_x1[1] - expansion_amount_x1[1], range_x1[2] + expansion_amount_x1[2]),\n  ylim = c(range_x2[1] - expansion_amount_x2[1], range_x2[2] + expansion_amount_x2[2]),\n  pch = 19,\n  axes = FALSE\n)\naxis(1)\naxis(2)\ntext(\n  x = tb_indiv_unaware_factual$X1, \n  y = tb_indiv_unaware_factual$X2 + 1,\n  paste0(round(100*tb_indiv_unaware_factual$pred, 2), \"%\"),\n  col = colour_factual\n)\n# Transported characteristics with fairadapt\ntb_indiv_unaware_fpt &lt;- \n  tb_indiv_unaware |&gt; filter(counterfactual == \"fpt\")\npoints(\n  x = tb_indiv_unaware_fpt$X1,\n  y = tb_indiv_unaware_fpt$X2,\n  col = colour_fpt,\n  xlab = \"X1\", ylab = \"X2\",\n  pch = 19\n)\n# x1 then x2\nsegments(\n  x0 = tb_indiv_unaware_factual$X1, \n  y0 = tb_indiv_unaware_factual$X2,\n  x1 = tb_indiv_unaware_fpt$X1, \n  y1 = tb_indiv_unaware_factual$X2, \n  col = colour_fpt,\n  lty = 2\n)\nsegments(\n  x0 = tb_indiv_unaware_fpt$X1, \n  y0 = tb_indiv_unaware_factual$X2,\n  x1 = tb_indiv_unaware_fpt$X1, \n  y1 = tb_indiv_unaware_fpt$X2, \n  col = colour_fpt,\n  lty = 2\n)\ntext(\n  x = tb_indiv_unaware_fpt$X1, \n  y = tb_indiv_unaware_fpt$X2 + 1,\n  paste0(round(100*tb_indiv_unaware_fpt$pred, 2), \"%\"),\n  col = colour_fpt\n)\n# Transported characteristics with OT\ntb_indiv_unaware_ot &lt;- \n  tb_indiv_unaware |&gt; filter(counterfactual == \"ot\")\npoints(\n  x = tb_indiv_unaware_ot$X1,\n  y = tb_indiv_unaware_ot$X2,\n  col = colour_ot,\n  xlab = \"X1\", ylab = \"X2\",\n  pch = 19\n)\n# x1 then x2\nsegments(\n  x0 = tb_indiv_unaware_factual$X1, \n  y0 = tb_indiv_unaware_factual$X2,\n  x1 = tb_indiv_unaware_ot$X1, \n  y1 = tb_indiv_unaware_factual$X2, \n  col = colour_ot,\n  lty = 2\n)\nsegments(\n  x0 = tb_indiv_unaware_ot$X1, \n  y0 = tb_indiv_unaware_factual$X2,\n  x1 = tb_indiv_unaware_ot$X1, \n  y1 = tb_indiv_unaware_ot$X2, \n  col = colour_ot,\n  lty = 2\n)\ntext(\n  x = tb_indiv_unaware_ot$X1 - .15, \n  y = tb_indiv_unaware_ot$X2,\n  paste0(round(100*tb_indiv_unaware_ot$pred, 2), \"%\"),\n  col = colour_ot\n)\n\n# Transported characteristics with Sequential transport\ntb_indiv_unaware_seq &lt;- \n  tb_indiv_unaware |&gt; filter(counterfactual == \"seq\")\npoints(\n  x = tb_indiv_unaware_seq$X1,\n  y = tb_indiv_unaware_seq$X2,\n  col = colour_seq,\n  xlab = \"X1\", ylab = \"X2\",\n  pch = 19\n)\n# x1 then x2\nsegments(\n  x0 = tb_indiv_unaware_factual$X1, \n  y0 = tb_indiv_unaware_factual$X2,\n  x1 = tb_indiv_unaware_seq$X1, \n  y1 = tb_indiv_unaware_factual$X2, \n  col = colour_seq,\n  lty = 2\n)\nsegments(\n  x0 = tb_indiv_unaware_seq$X1, \n  y0 = tb_indiv_unaware_factual$X2,\n  x1 = tb_indiv_unaware_seq$X1, \n  y1 = tb_indiv_unaware_seq$X2, \n  col = colour_seq,\n  lty = 2\n)\ntext(\n  x = tb_indiv_unaware_seq$X1 - .11, \n  y = tb_indiv_unaware_seq$X2 - 1,\n  paste0(round(100*tb_indiv_unaware_seq$pred, 2), \"%\"),\n  col = colour_seq\n)\nlegend(\n  \"topleft\", \n  pch = 19, col = colours_all, legend = names(colours_all)\n)\n\n\n\n\n\nFigure 1.19: Predictions by the unaware model for three Black individuals.\n\n\n\n\n\n\n\n\n\n\n\ntb_indiv_aware &lt;- \n  factuals_aware |&gt; mutate(id = row_number(), counterfactual = \"none\") |&gt; \n  # Fairadapt\n  bind_rows(\n    counterfactuals_aware_fpt |&gt; \n      mutate(id = row_number(), counterfactual = \"fpt\")\n  ) |&gt; \n  # Multivariate optimal transport\n  bind_rows(\n    counterfactuals_aware_ot |&gt; mutate(id = row_number(), counterfactual = \"ot\")\n  ) |&gt; \n  # Sequential transport\n  bind_rows(\n    counterfactuals_seq_aware_black |&gt; mutate(counterfactual = \"seq\")\n  ) |&gt; \n  filter(id %in% counterfactuals_seq_aware_black$id[1:3])\n\ntb_indiv_aware\n\n# A tibble: 12 × 7\n   S        X1    X2   pred type              id counterfactual\n   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;          &lt;int&gt; &lt;chr&gt;         \n 1 Black  2.8   29   0.133  factual           24 none          \n 2 Black  3.2   19   0.0933 factual           40 none          \n 3 Black  2.6   23   0.0882 factual           51 none          \n 4 White  3.25  37.6 0.522  counterfactual    24 fpt           \n 5 White  3.6   29.9 0.451  counterfactual    40 fpt           \n 6 White  3.1   32.3 0.425  counterfactual    51 fpt           \n 7 White  3.20  37.6 0.515  counterfactual    24 ot            \n 8 White  3.29  28.0 0.386  counterfactual    40 ot            \n 9 White  2.96  32.1 0.405  counterfactual    51 ot            \n10 White  3.2   37   0.507  counterfactual    24 seq           \n11 White  3.5   28.5 0.418  counterfactual    40 seq           \n12 White  3.1   31.5 0.413  counterfactual    51 seq           \n\n\n\n\nCode\npar(mar = c(4.1, 4.1, 0, 0))\n# Initial characteristics with the aware model\ntb_indiv_aware_factual &lt;- \n  tb_indiv_aware |&gt; filter(type == \"factual\")\ncolour_factual &lt;- \"black\"\ncolour_fpt &lt;- \"#D55E00\"\ncolour_ot &lt;- \"#56B4E9\"\ncolour_seq &lt;- \"#009E73\"\ncolours_all &lt;- c(\n  \"Factual\" = colour_factual,\n  \"fairadapt\" = colour_fpt,\n  \"OT\" = colour_ot,\n  \"Seq T.\" = colour_seq\n)\nrange_x1 &lt;- range(tb_indiv_aware$X1)\nexpansion_amount_x1 &lt;- .1*range_x1\nrange_x2 &lt;- range(tb_indiv_aware$X2)\nexpansion_amount_x2 &lt;- .05*range_x2\n\nplot(\n  x = tb_indiv_aware_factual$X1,\n  y = tb_indiv_aware_factual$X2,\n  col = colour_factual,\n  xlab = \"\", ylab = \"\",\n  # xlab = \"X1 (UGPA)\", ylab = \"X2 (LSAT)\",\n  xlim = c(range_x1[1] - expansion_amount_x1[1], range_x1[2] + expansion_amount_x1[2]),\n  ylim = c(range_x2[1] - expansion_amount_x2[1], range_x2[2] + expansion_amount_x2[2]),\n  pch = 19,\n  axes = FALSE\n)\naxis(1)\nmtext(expression(X[1]~(UGCA)), side = 1)\naxis(2)\nmtext(expression(X[2]~(LSAT)), side = 2)\ntext(\n  x = tb_indiv_aware_factual$X1, \n  y = tb_indiv_aware_factual$X2 + 1,\n  paste0(round(100*tb_indiv_aware_factual$pred, 2), \"%\"),\n  col = colour_factual\n)\n# Transported characteristics with fairadapt\ntb_indiv_aware_fpt &lt;- \n  tb_indiv_aware |&gt; filter(counterfactual == \"fpt\")\npoints(\n  x = tb_indiv_aware_fpt$X1,\n  y = tb_indiv_aware_fpt$X2,\n  col = colour_fpt,\n  xlab = \"X1\", ylab = \"X2\",\n  pch = 19\n)\n# x1 then x2\nsegments(\n  x0 = tb_indiv_aware_factual$X1, \n  y0 = tb_indiv_aware_factual$X2,\n  x1 = tb_indiv_aware_fpt$X1, \n  y1 = tb_indiv_aware_factual$X2, \n  col = colour_fpt,\n  lty = 2\n)\nsegments(\n  x0 = tb_indiv_aware_fpt$X1, \n  y0 = tb_indiv_aware_factual$X2,\n  x1 = tb_indiv_aware_fpt$X1, \n  y1 = tb_indiv_aware_fpt$X2, \n  col = colour_fpt,\n  lty = 2\n)\ntext(\n  x = tb_indiv_aware_fpt$X1, \n  y = tb_indiv_aware_fpt$X2 + 1,\n  paste0(round(100*tb_indiv_aware_fpt$pred, 2), \"%\"),\n  col = colour_fpt\n)\n# Transported characteristics with OT\ntb_indiv_aware_ot &lt;- \n  tb_indiv_aware |&gt; filter(counterfactual == \"ot\")\npoints(\n  x = tb_indiv_aware_ot$X1,\n  y = tb_indiv_aware_ot$X2,\n  col = colour_ot,\n  xlab = \"X1\", ylab = \"X2\",\n  pch = 19\n)\n# x1 then x2\nsegments(\n  x0 = tb_indiv_aware_factual$X1, \n  y0 = tb_indiv_aware_factual$X2,\n  x1 = tb_indiv_aware_ot$X1, \n  y1 = tb_indiv_aware_factual$X2, \n  col = colour_ot,\n  lty = 2\n)\nsegments(\n  x0 = tb_indiv_aware_ot$X1, \n  y0 = tb_indiv_aware_factual$X2,\n  x1 = tb_indiv_aware_ot$X1, \n  y1 = tb_indiv_aware_ot$X2, \n  col = colour_ot,\n  lty = 2\n)\ntext(\n  x = tb_indiv_aware_ot$X1 - .15, \n  y = tb_indiv_aware_ot$X2,\n  paste0(round(100*tb_indiv_aware_ot$pred, 2), \"%\"),\n  col = colour_ot\n)\n\n# Transported characteristics with Sequential transport\ntb_indiv_aware_seq &lt;- \n  tb_indiv_aware |&gt; filter(counterfactual == \"seq\")\npoints(\n  x = tb_indiv_aware_seq$X1,\n  y = tb_indiv_aware_seq$X2,\n  col = colour_seq,\n  xlab = \"X1\", ylab = \"X2\",\n  pch = 19\n)\n# x1 then x2\nsegments(\n  x0 = tb_indiv_aware_factual$X1, \n  y0 = tb_indiv_aware_factual$X2,\n  x1 = tb_indiv_aware_seq$X1, \n  y1 = tb_indiv_aware_factual$X2, \n  col = colour_seq,\n  lty = 2\n)\nsegments(\n  x0 = tb_indiv_aware_seq$X1, \n  y0 = tb_indiv_aware_factual$X2,\n  x1 = tb_indiv_aware_seq$X1, \n  y1 = tb_indiv_aware_seq$X2, \n  col = colour_seq,\n  lty = 2\n)\ntext(\n  x = tb_indiv_aware_seq$X1 - .11, \n  y = tb_indiv_aware_seq$X2 - 1,\n  paste0(round(100*tb_indiv_aware_seq$pred, 2), \"%\"),\n  col = colour_seq\n)\nlegend(\n  \"topleft\", \n  pch = 19, col = colours_all, legend = names(colours_all)\n)\n\n\n\n\n\nFigure 1.20: Predictions by the aware model for three Black individuals.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBlack, Emily, Samuel Yeom, and Matt Fredrikson. 2020. “Fliptest: Fairness Testing via Optimal Transport.” In Proceedings of the 2020 Conference on Fairness, Accountability, and Transparency, 111–21.\n\n\nDe Lara, Lucas, Alberto González-Sanz, Nicholas Asher, Laurent Risser, and Jean-Michel Loubes. 2024. “Transport-Based Counterfactual Models.” Journal of Machine Learning Research 25 (136): 1–59.\n\n\nKusner, Matt J, Joshua Loftus, Chris Russell, and Ricardo Silva. 2017. “Counterfactual Fairness.” In Advances in Neural Information Processing Systems 30, edited by I. Guyon, U. V. Luxburg, S. Bengio, H. Wallach, R. Fergus, S. Vishwanathan, and R. Garnett, 4066–76. NIPS.\n\n\nLara, Lucas de, Alberto González-Sanz, Nicholas Asher, and Jean-Michel Loubes. 2021. “Transport-Based Counterfactual Models.” arXiv 2108.13025.\n\n\nPlečko, Drago, Nicolas Bennett, and Nicolai Meinshausen. 2021. “Fairadapt: Causal Reasoning for Fair Data Pre-Processing.” arXiv Preprint arXiv:2110.10200.\n\n\nSander, Richard H. 2004. “A Systemic Analysis of Affirmative Action in American Law Schools.” Stan. L. Rev. 57: 367.\n\n\nWightman, Linda F. 1998. “LSAC National Longitudinal Bar Passage Study. LSAC Research Report Series.” In. https://api.semanticscholar.org/CorpusID:151073942.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Law Dataset</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Black, Emily, Samuel Yeom, and Matt Fredrikson. 2020. “Fliptest:\nFairness Testing via Optimal Transport.” In Proceedings of\nthe 2020 Conference on Fairness, Accountability, and Transparency,\n111–21.\n\n\nDe Lara, Lucas, Alberto González-Sanz, Nicholas Asher, Laurent Risser,\nand Jean-Michel Loubes. 2024. “Transport-Based Counterfactual\nModels.” Journal of Machine Learning Research 25 (136):\n1–59.\n\n\nKusner, Matt J, Joshua Loftus, Chris Russell, and Ricardo Silva. 2017.\n“Counterfactual Fairness.” In Advances in Neural\nInformation Processing Systems 30, edited by I. Guyon, U. V.\nLuxburg, S. Bengio, H. Wallach, R. Fergus, S. Vishwanathan, and R.\nGarnett, 4066–76. NIPS.\n\n\nLara, Lucas de, Alberto González-Sanz, Nicholas Asher, and Jean-Michel\nLoubes. 2021. “Transport-Based Counterfactual Models.”\narXiv 2108.13025.\n\n\nPlečko, Drago, Nicolas Bennett, and Nicolai Meinshausen. 2021.\n“Fairadapt: Causal Reasoning for Fair Data Pre-Processing.”\narXiv Preprint arXiv:2110.10200.\n\n\nSander, Richard H. 2004. “A Systemic Analysis of Affirmative\nAction in American Law Schools.” Stan. L. Rev. 57: 367.\n\n\nWightman, Linda F. 1998. “LSAC National Longitudinal Bar Passage\nStudy. LSAC Research Report Series.” In. https://api.semanticscholar.org/CorpusID:151073942.",
    "crumbs": [
      "References"
    ]
  }
]