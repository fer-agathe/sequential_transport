# Gaussian simulations {#sec-gaussian}

::: callout-note

## Objectives

This chapter compares the different methods used to create counterfactuals by examining the impacts on the new predictions made by the classifiers (aware and unaware).

:::

```{r setup, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: Display the setting codes

# Required packages----
library(tidyverse)
library(glue)
library(igraph)
library("wesanderson")
library(scales)
library(kableExtra)
library(InsurFair)
library(expm)
library(ks)

# Graphs----
data("COLORS")
colors = COLORS
h=.005

# Seed
set.seed(123)

source("functions/utils.R")
source("functions/graphs.R")
```

## Data

We start by drawing two bivariate Gaussian distributions, each reflecting one group from a sensitive attribute. We then simulate a binary response variable with a logistic model depending of covariates of each group.

```{r data-gaussian, fig.height = 4, fig.width = 4, fig.align = "center", dev.args = list(bg = 'transparent'), echo=FALSE, message=FALSE, warning=FALSE}

# Number of observations per group
n <- 100

# First bivariate Gaussian distribution: group S=0
M0 <- c(-1,-1)
S0 <- matrix(c(1,.5,.5,1)*1.2^2,2,2)
X0 <- mnormt::rmnorm(n, M0, S0)
D_SXY_0 <- data.frame(S = 0,
                      X1 = X0[,1],
                      X2 = X0[,2])

# Second bivariate Gaussian distribution: group S=1
M1 <- c(1.5,1.5)
S1 <- matrix(c(1,-.4,-.4,1)*.9^2,2,2)
X1 <- mnormt::rmnorm(n, M1, S1)
D_SXY_1 <- data.frame(S = 1,
                      X1 = X1[,1],
                      X2 = X1[,2])


# Drawing random binary response variable Y with logistic model for each group
eta_0 <- (D_SXY_0$X1*1.2+D_SXY_0$X2/2*.8)/2
eta_1 <- (D_SXY_1$X1*.8+D_SXY_1$X2/2*1.2)/2
p_0 <- exp(eta_0)/(1+exp(eta_0))
p_1 <- exp(eta_1)/(1+exp(eta_1))
D_SXY_0$Y <- rbinom(n, size=1, prob = p_0)
D_SXY_1$Y <- rbinom(n, size=1, prob = p_1)

# Final dataframe
D_SXY <- rbind(D_SXY_0,D_SXY_1)
```

We then plot the contour lines of bivariate densities in each group of observations (0 and 1).

```{r transport-gaussian, fig.height = 4, fig.width = 4, fig.align = "center", dev.args = list(bg = 'transparent'), echo=FALSE, message=FALSE, warning=FALSE}

D_SXY0 <- D_SXY[D_SXY$S == 0,]
D_SXY1 <- D_SXY[D_SXY$S == 1,]

# Computation of smoothing parameters (bandwidth) for kernel density estimation
H0 <- Hpi(D_SXY0[,c("X1","X2")])
H1 <- Hpi(D_SXY1[,c("X1","X2")])

# Calculating multivariate densities in each group
f0_2d <- kde(D_SXY0[,c("X1","X2")], H = H0, xmin = c(-5,-5), xmax = c(5,5))
f1_2d <- kde(D_SXY1[,c("X1","X2")], H = H1, xmin = c(-5,-5), xmax = c(5,5))

# Plotting densities
par(mar = c(2,2,0,0))
contour(f0_2d$eval.point[[1]], f0_2d$eval.point[[2]], f0_2d$estimate, 
        col = colors["A"], axes = FALSE, xlab = "", ylab = "")
axis(1)
axis(2)
contour(f1_2d$eval.point[[1]], f1_2d$eval.point[[2]], f1_2d$estimate, 
        col = colors["B"], add=TRUE)
# Display one individual on the graph
points(-2,-1,pch=19)

```

## Sequential Transport

We first define the different mathematical quantities needed to compute the sequential transport mapping.

```{r, fig.height = 4, fig.width = 4, fig.align = "center", dev.args = list(bg = 'transparent'), echo=FALSE, message=FALSE, warning=FALSE}

data <- D_SXY
# Transform S to apply fonction_transport from utils.R
data <- data |> mutate(S = ifelse(S == 0, "Black", "White"))

# Parameters of the sequential transport algorithm
n_grid <- 500 # Number of bins to split each covariate
h <- .2 # Range extension window for each covariate
d <- .5 # Neighbourhood for conditioning

# Defining transport functions
seq_functions <- fonction_transport(data = data, n_grid = n_grid, h = h, d = d)
T_X1 <- seq_functions$Transport_x1
T_X2 <- seq_functions$Transport_x2
T_X2_c_X1 <- seq_functions$Transport_x2_cond_x1
T_X1_c_X2 <- seq_functions$Transport_x1_cond_x2

```

We then plot sequential transport mapping between observations from group 0 to group 1, along with the densities in each group.

```{r transport-aaai-x1-T, fig.height = 4, fig.width = 4, fig.align = "center", dev.args = list(bg = 'transparent'), echo=FALSE, message=FALSE, warning=FALSE}

vx <- seq(-5,5,length=251)

# Density of X1 in subset 0
d0x1 <- function(x) density(D_SXY0[,"X1"],bw = .2, 
                           from=x, to=x,n=1)$y
vy0 <- Vectorize(d0x1)(vx)
d_0 <- data.frame(x = vx, y = vy0)

# Density of X1 in subset 1
d1x1 <- function(x) density(D_SXY1[,"X1"],bw = .2,
                            from=x, to=x,n=1)$y
vy1 <- Vectorize(d1x1)(vx)
d_1 <- data.frame(x = vx, y = vy1)

# Graph parameters
par(mar = c(2,2,0,0))
limA <- c(-5, 5)
limB <- c(-5, 5) 
limY <- c(0, .5)
lab <- c("A", "B")
sub <- 6
{
  mat <- matrix(c(1, 2, 0, 3), 2)
  par(mfrow = c(2, 2))
  layout(mat, c(3.5, 1), c(1, 3))
  par(mar = c(0.5, 4.5, 0.5, 0.5))
}

# Plot density of X1 in subset 0
plot(vx, vy0, type = "l", col = COLORS[lab[1]], lwd = 2,
     axes = FALSE, xlab = "", ylab = "", xlim = limA, ylim = limY)
polygon(c(min(vx), vx, max(vx)), c(0, vy0, 0), 
        col = scales::alpha(COLORS[lab[1]], 0.1), border = NA)

# Individual from subset 0 to transport
x1 <- -2 # x1
x1_star <- T_X1(x1) # x1_star

# Plot cdf of X1 from subset 0
idx1 <- which(vx <= x1)
polygon(c(min(vx), vx[idx1], max(vx[idx1])),
        c(0,vy0[idx1],0),
        col = scales::alpha(colors["A"],.2),
        border = NA)

# Transport line from individuals having X1 in vxt
vxt <- seq(-3.5,1.75,length=251)
vv1 <- vxt
vv2 <- Vectorize(T_X1)(vxt)
par(mar = c(4.5, 4.5, 0.5, 0.5))
vu <- seq(0,1,length=261)
vu <- vu[2:260]
plot(vv1, vv2, col = COLORS["1"], lwd = 2, 
     type = "l", xlab = "", ylab = "", xlim = limA, ylim = limB, 
     axes = FALSE)
# Identity function line
abline(a = 0, b = 1, col = COLORS["0"], lty = 2)

# x-axis and y-axis
axis(1, at = seq(limA[1], limA[2], length = sub), 
     label = c(NA, seq(limA[1], limA[2], length = sub)[-1]))
axis(1)
axis(2, at = seq(limB[1], limB[2], length = sub), label = c(NA, 
        seq(limB[1], limB[2], length = sub)[-c(1, sub)], NA))
axis(2)

# Legend
mtext("distribution (group 0)", side = 1, line = 3, col = "black")
mtext("distribution (group 1)", side = 2, line = 3, col = "black")

# Plot individual from subset 0
points(x1, x1_star, pch = 19, col = COLORS["1"])
segments(x1, x1_star, x1, 10, lwd = .4, col = COLORS["1"])
segments(x1, x1_star, 10, x1_star, lwd = .4, col = COLORS["1"])

# Plot density of X1 in subset 1
par(mar = c(4.5, 0.5, 0.5, 0.5))
plot(vy1, vx, type = "l", col = COLORS[lab[2]], lwd = 2, 
     ylim = limB, xlim = limY, xlab = "", ylab = "", axes = FALSE)
polygon(c(0, vy1, 0), c(min(vx), vx, max(vx)), col = scales::alpha(COLORS[lab[2]], 
        0.1), border = NA)

# Plot cdf of X1 from subset 1
idx1_star <- which(vx <= x1_star)
polygon(c(0, vy1[idx1_star], 0),
        c(min(vx), vx[idx1_star], max(vx[idx1_star])),
        col = scales::alpha(colors["B"],.2),
        border = NA)

```

```{r transport-aaai-x1, fig.height = 4, fig.width = 4, fig.align = "center", dev.args = list(bg = 'transparent'), echo=FALSE, message=FALSE, warning=FALSE}
par(mar = c(2,2,0,0))
contour(f0_2d$eval.point[[1]],f0_2d$eval.point[[2]],
  f0_2d$estimate,col=scales::alpha(colors["A"],.4),axes=FALSE,xlab="",ylab="")
#axis(1,at=seq(-5,5,by=2),labels = NA)
#axis(2,at=seq(-5,5,by=2),labels = NA)
axis(1)
axis(2)
contour(f1_2d$eval.point[[1]],f1_2d$eval.point[[2]],
  f1_2d$estimate,col=scales::alpha(colors["B"],.4), add=TRUE)

polygon(c(min(vx), vx, max(vx)), 
        c(0, vy1, 0)*5-5, 
        col = scales::alpha(COLORS[lab[1]], 
        0.4), border = NA)
a1 = -2
#p1 = FD0x1(a1)
a2 = T_X1(a1)
idx1 = which(vx<=a1)
idx2 = which(vx<=a2)
polygon(c(min(vx),vx[idx1],max(vx[idx1])),
        c(0,vy1[idx1],0)*5-5,
        col=scales::alpha(colors["A"],.4),
        border=NA)
polygon(c(min(vx), vx, max(vx)),
        c(0, vy2, 0)*5-5, col = scales::alpha(COLORS[lab[2]], 
        0.4), border = NA)
polygon(c(min(vx),vx[idx2],max(vx[idx2])),
        c(0,vy2[idx2],0)*5-5,
        col=scales::alpha(colors["B"],.4),
        border=NA)

abline(v=a1,lwd=.4,col=COLORS["A"])
abline(v=T_X1(-2),col="black",lwd=.5)
points(-2,-1,pch=19)
```

```{r transport-aaai-x2-T, fig.height = 4, fig.width = 4, fig.align = "center", dev.args = list(bg = 'transparent'), echo=FALSE, message=FALSE, warning=FALSE}
limA = c(-5, 5)
limB = c(-5, 5) 
limY = c(0, .5)
lab = c("A", "B")
sub = 6
vx = seq(-5,5,length=251)

a10 = -2
a11 = T1(a10)
h = .25
w0 = dnorm(D_SXY0[,"X1"], a10, h)
w1 = dnorm(D_SXY0[,"X1"], a11, h)
  w0 = w0/sum(w0)
  w1 = w1/sum(w1)
d0x1 = function(x) density(D_SXY0[,"X2"],
                           bw = .3,
                             weights=w0, 
                         from=x, to=x,n=1)$y
d1x1 = function(x) density(D_SXY1[,"X2"],
                           bw = .3, 
                             weights=w1, 
                         from=x, to=x,n=1)$y

vy1 = Vectorize(d0x1)(vx)
vy2 = Vectorize(d1x1)(vx)

    d_A = data.frame(x = vx, y = vy1)
    d_B = data.frame(x = vx, y = vy2)
    {
        mat <- matrix(c(1, 2, 0, 3), 2)
        par(mfrow = c(2, 2))
        layout(mat, c(3.5, 1), c(1, 3))
        par(mar = c(0.5, 4.5, 0.5, 0.5))
    }
    plot(vx,vy1, type = "l", col = COLORS[lab[1]], lwd = 2, 
        axes = FALSE, xlab = "", ylab = "", xlim = limA, ylim = limY)
    polygon(c(min(vx), vx, max(vx)), c(0, vy1, 0), col = scales::alpha(COLORS[lab[1]], 
        0.1), border = NA)

a1 = -1
a2 = T2sachant1(a1,-2)
idx1 = which(vx<=a1)
idx2 = which(vx<=a2)
polygon(c(min(vx),vx[idx1],max(vx[idx1])),
        c(0,vy1[idx1],0),
        col=scales::alpha(colors["A"],.2),
        border=NA)

    axis(1, at = seq(limA[1], limA[2], length = sub), label = c(NA, 
        seq(limA[1], limA[2], length = sub)[-1]))
    
    
    par(mar = c(4.5, 4.5, 0.5, 0.5))
    vu = seq(0,1,length=261)
    vu = vu[2:260]
    #vv1 =QD0x1(vu)
    #vv2 =QD1x1(vu)
     vxt = seq(-4.5,2,length=251)
    vv1 = vxt
    vv2 = Vectorize(function(x) T2sachant1(x,(-2)))(vxt)
    
    plot(vv1,vv2, col = COLORS["1"], lwd = 2, 
        type = "l", xlab = "", ylab = "", xlim = limA, ylim = limB, 
        axes = FALSE)
    abline(a = 0, b = 1, col = COLORS["0"], lty = 2)
    axis(1)
    axis(2)
    mtext("distribution (group 0)", side = 1, line = 3, col = "black")
    mtext("distribution (group 1)", side = 2, line = 3, col = "black")
    ax1 =-1
    ay1 =T2sachant1(-1,(-2))
    points(ax1,ay1,pch=19,col=COLORS["1"])
    segments(ax1,ay1,ax1,10,lwd=.4,col=COLORS["1"])
    segments(ax1,ay1,10,ay1,lwd=.4,col=COLORS["1"])
    
    par(mar = c(4.5, 0.5, 0.5, 0.5))
    
    plot(d_B$y, d_B$x, type = "l", col = COLORS[lab[2]], lwd = 2, 
        ylim = limB, xlim = limY, xlab = "", ylab = "", axes = FALSE)
    polygon(c(0, d_B$y, 0), c(0, d_B$x, 1), col = scales::alpha(COLORS[lab[2]], 
        0.1), border = NA)
    axis(2, at = seq(limB[1], limB[2], length = sub), label = c(NA, 
        seq(limB[1], limB[2], length = sub)[-c(1, sub)], NA))

polygon(c(0,vy2[idx2],0),
        c(min(vx),vx[idx2],max(vx[idx2])),
        col=scales::alpha(colors["B"],.2),
        border=NA)
```

```{r transport-aaai-x2, fig.height = 4, fig.width = 4, fig.align = "center", dev.args = list(bg = 'transparent'), echo=FALSE, message=FALSE, warning=FALSE}
par(mar = c(2,2,0,0))
contour(f0_2d$eval.point[[1]],f0_2d$eval.point[[2]],
  f0_2d$estimate,col=scales::alpha(colors["A"],.4),axes=FALSE,xlab="",ylab="")
#axis(1,at=seq(-5,5,by=2),labels = NA)
#axis(2,at=seq(-5,5,by=2),labels = NA)
axis(1)
axis(2)
contour(f1_2d$eval.point[[1]],f1_2d$eval.point[[2]],
  f1_2d$estimate,col=scales::alpha(colors["B"],.4), add=TRUE)

polygon(c(0, d_A$y, 0)*5-2,c(-5, d_A$x, 5), col = scales::alpha(COLORS[lab[1]], 
        0.4), border = NA)
polygon(c(0,vy1[idx1],0)*5-2,
        c(min(vx),vx[idx1],max(vx[idx1])),
        col=scales::alpha(colors["A"],.4),
        border=NA)
abline(v=-2,col=COLORS["A"],lwd=.5)
abline(h=-1,col=COLORS[lab[1]],lwd=.5)

decal = T1(-2)
polygon(c(0, d_B$y, 0)*5+decal,c(-5, d_B$x, 5), col = scales::alpha(COLORS[lab[2]], 
        0.4), border = NA)
polygon(c(0,vy2[idx2],0)*5+decal,
        c(min(vx),vx[idx2],max(vx[idx2])),
        col=scales::alpha(colors["B"],.4),
        border=NA)
abline(v=decal,col=COLORS[lab[2]],lwd=.5)
abline(h=a2,col="black",lwd=.5)
points(-2,-1,pch=19)
points(decal,a2,pch=19)
```

# régression

```{r aaai-regression, fig.height = 4, fig.width = 4, fig.align = "center", dev.args = list(bg = 'transparent'), echo=FALSE, message=FALSE, warning=FALSE}
par(mar = c(2,2,0,0))
logistique_reg = function(x1,x2,s){
  eta = (x1+x2)/2-s
  exp(eta)/(1+exp(eta))
}

vx0 = seq(-5,5,length=251)
data.grid <- expand.grid(x=vx0,y=vx0)
L0 = logistique_reg(data.grid$x,data.grid$y,0)
L1 = logistique_reg(data.grid$x,data.grid$y,1)
dlogistique0 = matrix(L0,length(vx0),length(vx0))
dlogistique1 = matrix(L1,length(vx0),length(vx0))

library(dichromat)
colfunc <- colorRampPalette(c(COLORS["0"],COLORS["1"]))
scl = scales::alpha(colfunc(9),.9)

par(mar = c(2,2,0,0))
contour(f0_2d$eval.point[[1]],f0_2d$eval.point[[2]],
  f0_2d$estimate,col=scales::alpha(colors["A"],1),axes=FALSE,xlab="",ylab="")
contour(vx0,vx0,dlogistique0,col=scl,add=TRUE,levels = (1:9)/10,lwd=1.6)
axis(1)
axis(2)

contour(f1_2d$eval.point[[1]],f1_2d$eval.point[[2]],
  f1_2d$estimate,col=scales::alpha(colors["B"],1),axes=FALSE,xlab="",ylab="")
contour(vx0,vx0,dlogistique1,col=scl,add=TRUE,levels = (1:9)/10,lwd=1.6)
axis(1)
axis(2)

xystart = c(-2,-1)
prediction = data.frame(
  start = xystart,
  start1 = xystart,
  x2_then_x1 = c(T1sachant2(xystart[1],xystart[2]),T2(xystart[2])),
  x1_then_x2 = c(T1(xystart[1]),T2sachant1(xystart[1],xystart[2])),
  x1_intermediaire = c(T1(xystart[1]),xystart[2]),
  x2_intermediaire = c(xystart[1],T2(xystart[2]))
  )

v = c(logistique_reg(prediction$start[1],
                     prediction$start[2],0),
      logistique_reg(prediction$start[1],
                     prediction$start[2],1),
      logistique_reg(prediction$x1_then_x2[1],
                     prediction$x1_then_x2[2],1),
      logistique_reg(prediction$x2_then_x1[1],
                     prediction$x2_then_x1[2],1),
      logistique_reg(prediction$x1_intermediaire[1],
                     prediction$x1_intermediaire[2],1),
      logistique_reg(prediction$x2_intermediaire[1],
                     prediction$x2_intermediaire[2],1))

CeX=1

contour(f0_2d$eval.point[[1]],f0_2d$eval.point[[2]],
  f0_2d$estimate,col=scales::alpha(colors["A"],.3),axes=FALSE,xlab="",ylab="")
contour(f1_2d$eval.point[[1]],f1_2d$eval.point[[2]],
  f1_2d$estimate,col=scales::alpha(colors["B"],.3),add=TRUE)
contour(vx0,vx0,dlogistique1,col=scl,add=TRUE,levels = (1:9)/10,lwd=2)
axis(1)
axis(2)
points(prediction$start[1],prediction$start[2],pch=19,cex=CeX)
points(prediction$x1_then_x2[1],prediction$x1_then_x2[2],pch=19,cex=CeX)
points(prediction$x2_then_x1[1],prediction$x2_then_x1[2],pch=19,cex=CeX)
segments(prediction$start[1],prediction$start[2],
         prediction$x1_then_x2[1],prediction$start[2],lwd=.8)
segments(prediction$x1_then_x2[1],prediction$x1_then_x2[2],
         prediction$x1_then_x2[1],prediction$start[2],lwd=.8)
segments(prediction$start[1],prediction$start[2],
         prediction$start[1],prediction$x2_then_x1[2],lwd=.8)
segments(prediction$x2_then_x1[1],prediction$x2_then_x1[2],
         prediction$start[1],prediction$x2_then_x1[2],lwd=.8)

text(prediction$x1_then_x2[1],prediction$x1_then_x2[2],
     paste(round(v[3]*100,1),"%",sep=""),pos=3,cex=CeX)
text(prediction$x2_then_x1[1],prediction$x2_then_x1[2],
     paste(round(v[4]*100,1),"%",sep=""),pos=3,cex=CeX)
text(prediction$start[1]-.3,prediction$start[2]-.42-.3,
     paste(round(v[1]*100,1),"%",sep=""),pos=2,cex=CeX,col="darkblue")
text(prediction$start[1],prediction$start[2]+.42,
     paste(round(v[2]*100,1),"%",sep=""),pos=4,cex=CeX)

library(plotrix)
ry = .2
draw.circle(x=prediction$start[1]-ry, y=prediction$start[2]-ry, radius=ry*sqrt(2))
points(prediction$x1_then_x2[1],prediction$start[2],pch=19,col="white",cex=CeX)
points(prediction$x1_then_x2[1],prediction$start[2],pch=1,cex=CeX)
points(prediction$start[1],prediction$x2_then_x1[2],pch=19,col="white",cex=CeX)
points(prediction$start[1],prediction$x2_then_x1[2],pch=1,cex=CeX)
text(prediction$x1_then_x2[1],prediction$start[2]-.42,
     paste(round(v[5]*100,1),"%",sep=""),pos=4,cex=CeX)
text(prediction$start[1],prediction$x2_then_x1[2],
     paste(round(v[6]*100,1),"%",sep=""),pos=2,cex=CeX)


contour(f0_2d$eval.point[[1]],f0_2d$eval.point[[2]],
  f0_2d$estimate,col=scales::alpha(colors["A"],.3),axes=FALSE,xlab="",ylab="")
contour(f1_2d$eval.point[[1]],f1_2d$eval.point[[2]],
  f1_2d$estimate,col=scales::alpha(colors["B"],.3),add=TRUE)
contour(vx0,vx0,dlogistique0,col=scl,add=TRUE,levels = (1:9)/10,lwd=2)
axis(1)
axis(2)
points(prediction$start[1],prediction$start[2],pch=19,col="darkblue",cex=CeX)
text(prediction$start[1],prediction$start[2],
     paste(round(v[1]*100,1),"%",sep=""),pos=1,cex=CeX,col="darkblue")
###
```

# tensor

```{r aaai-tensor-1, fig.height = 1, fig.width = 5, fig.align = "center", dev.args = list(bg = 'transparent'), echo=FALSE, message=FALSE, warning=FALSE}

fonction_transport = function(BASE = NA,
                              n_grid = 15,
                              h = .2,
                              d = .5){
  D_SXY_0 = BASE[BASE$S ==0, ]
  D_SXY_1 = BASE[BASE$S ==1, ]

vx1_0 = seq(min(D_SXY_0$X1)-h,max(D_SXY_0$X1)+h,length=n_grid+1)
vx1_0_mid = (vx1_0[2:(1+n_grid)]+vx1_0[1:(n_grid)])/2
vx2_0 = seq(min(D_SXY_0$X2)-h,max(D_SXY_0$X2)+h,length=n_grid+1)
vx2_0_mid = (vx2_0[2:(1+n_grid)]+vx2_0[1:(n_grid)])/2
vx1_1 = seq(min(D_SXY_1$X1)-h,max(D_SXY_1$X1)+h,length=n_grid+1)
vx1_1_mid = (vx1_1[2:(1+n_grid)]+vx1_1[1:(n_grid)])/2
vx2_1 = seq(min(D_SXY_1$X2)-h,max(D_SXY_1$X2)+h,length=n_grid+1)
vx2_1_mid = (vx2_1[2:(1+n_grid)]+vx2_1[1:(n_grid)])/2
F1_0 = F2_0 = F1_1 = F2_1 = matrix(NA,n_grid,n_grid)
Q1_0 = Q2_0 = Q1_1 = Q2_1 = matrix(NA,n_grid,n_grid)
# f1_0 = f2_0 = f1_1 = f2_1 = rep(NA,n_grid)
# q1_0 = q2_0 = q1_1 = q2_1 = rep(NA,n_grid)

u = (1:n_grid)/(n_grid+1)

FdR1_0 = Vectorize(function(x) mean(D_SXY_0$X1<=x))
f1_0 = FdR1_0(vx1_0_mid)
FdR2_0 = Vectorize(function(x) mean(D_SXY_0$X2<=x))
f2_0 = FdR2_0(vx2_0_mid)
FdR1_1 = Vectorize(function(x) mean(D_SXY_1$X1<=x))
f1_1 = FdR1_1(vx1_1_mid)
FdR2_1 = Vectorize(function(x) mean(D_SXY_1$X2<=x))
f2_1 = FdR2_1(vx2_1_mid)
Qtl1_0 = Vectorize(function(x) quantile(D_SXY_0$X1,x))
q1_0 = Qtl1_0(u)
Qtl2_0 = Vectorize(function(x) quantile(D_SXY_0$X2,x))
q2_0 = Qtl1_0(u)
Qtl1_1 = Vectorize(function(x) quantile(D_SXY_1$X1,x))
q1_1 = Qtl1_1(u)
Qtl2_1 = Vectorize(function(x) quantile(D_SXY_1$X2,x))
q2_1 = Qtl2_1(u)

for(i in 1:n_grid){
  idx1_0 = which(abs(D_SXY_0$X1-vx1_0_mid[i])<d)
  FdR2_0 = Vectorize(function(x) mean(D_SXY_0$X2[idx1_0]<=x))
  F2_0[,i] = FdR2_0(vx2_0_mid)
  Qtl2_0 = Vectorize(function(x) quantile(D_SXY_0$X2[idx1_0],x))
  Q2_0[,i] = Qtl2_0(u)
  idx2_0 = which(abs(D_SXY_0$X2-vx2_0_mid[i])<d)
  FdR1_0 = Vectorize(function(x) mean(D_SXY_0$X1[idx2_0]<=x))
  F1_0[,i] = FdR1_0(vx1_0_mid)
  Qtl1_0 = Vectorize(function(x) quantile(D_SXY_0$X1[idx2_0],x))
  Q1_0[,i] = Qtl1_0(u)
  idx1_1 = which(abs(D_SXY_1$X1-vx1_1_mid[i])<d)
  FdR2_1 = Vectorize(function(x) mean(D_SXY_1$X2[idx1_1]<=x))
  F2_1[,i] = FdR2_1(vx2_1_mid)
  Qtl2_1 = Vectorize(function(x) quantile(D_SXY_1$X2[idx1_1],x))
  Q2_1[,i] = Qtl2_1(u)
  idx2_1 = which(abs(D_SXY_1$X2-vx2_1_mid[i])<d)
  FdR1_1 = Vectorize(function(x) mean(D_SXY_1$X1[idx2_1]<=x))
  F1_1[,i] = FdR1_1(vx1_1_mid)
  Qtl1_1 = Vectorize(function(x) quantile(D_SXY_1$X1[idx2_1],x))
  Q1_1[,i] = Qtl1_1(u) 
}


T2 = function(x2){
  i=which.min(abs(vx2_0_mid-x2))
  p = f2_0[i]
  i=which.min(abs(u-p))
  x2star = q2_1[i]
  return(x2star)
}
T1 = function(x1){
  i=which.min(abs(vx1_0_mid-x1))
  p = f1_0[i]
  i=which.min(abs(u-p))
  x1star = q1_1[i]
  return(x1star)
}

T2sachant1 = function(x2,x1){
  k0=which.min(abs(vx1_0_mid-x1))
  k1=which.min(abs(vx1_1_mid-T1(x1)))
  i=which.min(abs(vx2_0_mid-x2))
  p = F2_0[i,k0]
  i=which.min(abs(u-p))
  x2star = Q2_1[i,k1]
  return(x2star)
}

T1sachant2 = function(x1,x2){
  k0=which.min(abs(vx2_0_mid-x2))
  k1=which.min(abs(vx2_1_mid-T2(x2)))
  i=which.min(abs(vx1_0_mid-x1))
  p = F1_0[i,k0]
  i=which.min(abs(u-p))
  x1star = Q1_1[i,k1]
  return(x1star)
}

return(list(Transport_x1 = T1,
            Transport_x2 = T2,
            Transport_x1_sachant_x2 = T1sachant2,
            Transport_x2_sachant_x1 = T2sachant1,
            F1_0 = F1_0,
            F1_1 = F1_1,
            F2_0 = F2_0,
            F2_1 = F2_1,
            f1_0 = f1_0,
            f1_1 = f1_1,
            f2_0 = f2_0,
            f2_1 = f2_1,
            vx1_0 = vx1_0,
            vx1_1 = vx1_1,
            vx2_0 = vx2_0,
            vx2_1 = vx2_1,
            vx1_0_mid = vx1_0_mid,
            vx1_1_mid = vx1_1_mid,
            vx2_0_mid = vx2_0_mid,
            vx2_1_mid = vx2_1_mid
            ))
}
NG=15
L = fonction_transport(BASE = rbind(D_SXY_0,D_SXY_1),n_grid = NG)

par(mar = c(2,2,0,0))

plot(vx,vx*0,xlab="",ylab="",axes=FALSE,col=NA,ylim=c(.5,2.5))
axis(1)
for(i in 1:NG) rect(L$vx1_0[i],.7,L$vx1_0[i+1],1.3,
                    col=scales::alpha(COLORS["A"],L$f1_0[i]),
                    border="grey")
for(i in 1:NG) rect(L$vx1_1[i],1.7,L$vx1_1[i+1],2.3,
                    col=scales::alpha(COLORS["B"],L$f1_1[i]),
                    border="grey")

```

```{r aaai-tensor-21, fig.height = 5, fig.width = 5, fig.align = "center", dev.args = list(bg = 'transparent'), echo=FALSE, message=FALSE, warning=FALSE}
par(mar = c(2,2,0,0))

plot(vx,vx,xlab="",ylab="",axes=FALSE,col=NA)
axis(1)
axis(2)
for(i in 1:NG){
for(j in 1:NG){
  rect(L$vx1_0[i],L$vx2_0[j],L$vx1_0[i+1],L$vx2_0[j+1],
                    border="grey")
}
}
x1=-2
i=which.min(abs(L$vx1_0_mid-x1))
for(j in 1:NG)  rect(L$vx1_0[i],L$vx2_0[j],L$vx1_0[i+1],L$vx2_0[j+1],
                    col=scales::alpha(COLORS["A"],L$F2_0[j,i]),
                    border="grey")


plot(vx,vx,xlab="",ylab="",axes=FALSE,col=NA)
axis(1)
axis(2)
for(i in 1:NG){
for(j in 1:NG){
  rect(L$vx1_1[i],L$vx2_1[j],L$vx1_1[i+1],L$vx2_1[j+1],
                    border="grey")
}
}
i=which.min(abs(L$vx1_1_mid-T1(x1)))
for(j in 1:NG)  rect(L$vx1_1[i],L$vx2_1[j],L$vx1_1[i+1],L$vx2_1[j+1],
                    col=scales::alpha(COLORS["B"],L$F2_1[j,i]),
                    border="grey")

```

# Gaussian (original)

```{r transport-aaai-1, fig.height = 4, fig.width = 4, fig.align = "center", dev.args = list(bg = 'transparent'), echo=FALSE, message=FALSE, warning=FALSE}
limA = c(-5, 5)
limB = c(-5, 5) 
limY = c(0, .5)
lab = c("A", "B")
sub = 6

vy1 = dnorm(vx,-1,1.2)
vy2 = dnorm(vx,1.5,.9)

    d_A = data.frame(x = vx, y = vy1)
    d_B = data.frame(x = vx, y = vy2)
    {
        mat <- matrix(c(1, 2, 0, 3), 2)
        par(mfrow = c(2, 2))
        layout(mat, c(3.5, 1), c(1, 3))
        par(mar = c(0.5, 4.5, 0.5, 0.5))
    }
    plot(d_A$x, d_A$y, type = "l", col = COLORS[lab[1]], lwd = 2, 
        axes = FALSE, xlab = "", ylab = "", xlim = limA, ylim = limY)
    polygon(c(0, d_A$x, 1), c(0, d_A$y, 0), col = scales::alpha(COLORS[lab[1]], 
        0.1), border = NA)

p1= 0.1586553
a1=qnorm(p1,-1,1.2)
a2=qnorm(p1,1.5,.9)
idx1 = which(vx<=a1)
idx2 = which(vx<=a2)
polygon(c(min(vx),vx[idx1],max(vx[idx1])),
        c(0,vy1[idx1],0),
        col=scales::alpha(colors["A"],.2),
        border=NA)

    axis(1, at = seq(limA[1], limA[2], length = sub), label = c(NA, 
        seq(limA[1], limA[2], length = sub)[-1]))
    
    
    par(mar = c(4.5, 4.5, 0.5, 0.5))
    vu = seq(0,1,length=261)
    vv1 =qnorm(vu,-1,1.2)
    vv2 =qnorm(vu,1.5,.9)
    
    plot(vv1,vv2, col = COLORS["1"], lwd = 2, 
        type = "l", xlab = "", ylab = "", xlim = limA, ylim = limB, 
        axes = FALSE)
    abline(a = 0, b = 1, col = COLORS["0"], lty = 2)
    axis(1)
    axis(2)
    mtext("distribution (group 0)", side = 1, line = 3, col = "black")
    mtext("distribution (group 1)", side = 2, line = 3, col = "black")
    ax1 =qnorm(p1,-1,1.2)
    ay1 =qnorm(p1,1.5,.9)
    points(ax1,ay1,pch=19,col=COLORS["1"])
    segments(ax1,ay1,ax1,10,lwd=.4,col=COLORS["1"])
    segments(ax1,ay1,10,ay1,lwd=.4,col=COLORS["1"])
    
    par(mar = c(4.5, 0.5, 0.5, 0.5))
    
    plot(d_B$y, d_B$x, type = "l", col = COLORS[lab[2]], lwd = 2, 
        ylim = limB, xlim = limY, xlab = "", ylab = "", axes = FALSE)
    polygon(c(0, d_B$y, 0), c(0, d_B$x, 1), col = scales::alpha(COLORS[lab[2]], 
        0.1), border = NA)
    axis(2, at = seq(limB[1], limB[2], length = sub), label = c(NA, 
        seq(limB[1], limB[2], length = sub)[-c(1, sub)], NA))

polygon(c(0,vy2[idx2],0),
        c(min(vx),vx[idx2],max(vx[idx2])),
        col=scales::alpha(colors["B"],.2),
        border=NA)
```

```{r transport-aaai-2, fig.height = 4, fig.width = 4, fig.align = "center", dev.args = list(bg = 'transparent'), echo=FALSE, message=FALSE, warning=FALSE}
limA = c(-5, 5)
limB = c(-5, 5) 
limY = c(0, .5)
lab = c("A", "B")
sub = 6

set.seed(1234)
x1 = rnorm(13,-1,1.2)
x2 = rnorm(7,1.5,1)
f1 = density(x1,from=-5,to=5,n=length(vx))
f2 = density(x2,from=-5,to=5,n=length(vx))
x1s = sample(x1,size=1e3,replace=TRUE)+rnorm(1e3,0,f1$bw)
x2s = sample(x2,size=1e3,replace=TRUE)+rnorm(1e3,0,f2$bw)
F1 = Vectorize(function(x) mean(x1s<=x))
F2 = Vectorize(function(x) mean(x2s<=x))
Q1 = Vectorize(function(x) as.numeric(quantile(x1s,x)))
Q2 = Vectorize(function(x) as.numeric(quantile(x2s,x)))

vy1 = f1$y
vy2 = f2$y

    d_A = data.frame(x = vx, y = vy1)
    d_B = data.frame(x = vx, y = vy2)
    {
        mat <- matrix(c(1, 2, 0, 3), 2)
        par(mfrow = c(2, 2))
        layout(mat, c(3.5, 1), c(1, 3))
        par(mar = c(0.5, 4.5, 0.5, 0.5))
    }
    plot(d_A$x, d_A$y, type = "l", col = COLORS[lab[1]], lwd = 2, 
        axes = FALSE, xlab = "", ylab = "", xlim = limA, ylim = limY)
    polygon(c(0, d_A$x, 1), c(0, d_A$y, 0), col = scales::alpha(COLORS[lab[1]], 
        0.1), border = NA)

p1= 0.1586553
a1=Q1(p1)
a2=Q2(p1)
idx1 = which(vx<=a1)
idx2 = which(vx<=a2)
polygon(c(min(vx),vx[idx1],max(vx[idx1])),
        c(0,vy1[idx1],0),
        col=scales::alpha(colors["A"],.2),
        border=NA)

    axis(1, at = seq(limA[1], limA[2], length = sub), label = c(NA, 
        seq(limA[1], limA[2], length = sub)[-1]))
    
    
    par(mar = c(4.5, 4.5, 0.5, 0.5))
    vu = seq(0,1,length=261)
    vv1 =Q1(vu)
    vv2 =Q2(vu)
    
    plot(vv1,vv2, col = COLORS["1"], lwd = 2, 
        type = "l", xlab = "", ylab = "", xlim = limA, ylim = limB, 
        axes = FALSE)
    abline(a = 0, b = 1, col = COLORS["0"], lty = 2)
    axis(1)
    axis(2)
    mtext("distribution (group 0)", side = 1, line = 3, col = "black")
    mtext("distribution (group 1)", side = 2, line = 3, col = "black")
    ax1 =Q1(p1)
    ay1 =Q2(p1)
    points(ax1,ay1,pch=19,col=COLORS["1"])
    segments(ax1,ay1,ax1,10,lwd=.4,col=COLORS["1"])
    segments(ax1,ay1,10,ay1,lwd=.4,col=COLORS["1"])
    
    par(mar = c(4.5, 0.5, 0.5, 0.5))
    
    plot(d_B$y, d_B$x, type = "l", col = COLORS[lab[2]], lwd = 2, 
        ylim = limB, xlim = limY, xlab = "", ylab = "", axes = FALSE)
    polygon(c(0, d_B$y, 0), c(0, d_B$x, 1), col = scales::alpha(COLORS[lab[2]], 
        0.1), border = NA)
    axis(2, at = seq(limB[1], limB[2], length = sub), label = c(NA, 
        seq(limB[1], limB[2], length = sub)[-c(1, sub)], NA))

polygon(c(0,vy2[idx2],0),
        c(min(vx),vx[idx2],max(vx[idx2])),
        col=scales::alpha(colors["B"],.2),
        border=NA)
```

```{r, fig.height = 4, fig.width = 4, fig.align = "center", dev.args = list(bg = 'transparent'), echo=FALSE, message=FALSE, warning=FALSE}
limA = c(-5, 5)
limB = c(-5, 5) 
limY = c(0, .5)
lab = c("A", "B")
sub = 6

vy1 = dnorm(vx,-1,1.2)
vy2 = dnorm(vx,1.5,.9)

    d_A = data.frame(x = vx, y = vy1)
    d_B = data.frame(x = vx, y = vy2)
    {
        mat <- matrix(c(1, 2, 0, 3), 2)
        par(mfrow = c(2, 2))
        layout(mat, c(3.5, 1), c(1, 3))
        par(mar = c(0.5, 4.5, 0.5, 0.5))
    }
    plot(d_A$x, d_A$y, type = "l", col = COLORS[lab[1]], lwd = 2, 
        axes = FALSE, xlab = "", ylab = "", xlim = limA, ylim = limY)
    polygon(c(0, d_A$x, 1), c(0, d_A$y, 0), col = scales::alpha(COLORS[lab[1]], 
        0.1), border = NA)

p1= 0.1586553
a1=qnorm(p1,-1,1.2)
a2=qnorm(p1,1.5,.9)
idx1 = which(vx<=a1)
idx2 = which(vx<=a2)
polygon(c(min(vx),vx[idx1],max(vx[idx1])),
        c(0,vy1[idx1],0),
        col=scales::alpha(colors["A"],.2),
        border=NA)

    axis(1, at = seq(limA[1], limA[2], length = sub), label = c(NA, 
        seq(limA[1], limA[2], length = sub)[-1]))
    
    
    par(mar = c(4.5, 4.5, 0.5, 0.5))
    vu = seq(0,1,length=261)
    vv1 =qnorm(vu,-1,1.2)
    vv2 =qnorm(vu,1.5,.9)
    
    plot(vv1,vv2, col = COLORS["1"], lwd = 2, 
        type = "l", xlab = "", ylab = "", xlim = limA, ylim = limB, 
        axes = FALSE)
    abline(a = 0, b = 1, col = COLORS["0"], lty = 2)
    axis(1)
    axis(2)
    mtext("distribution (group 0)", side = 1, line = 3, col = "black")
    mtext("distribution (group 1)", side = 2, line = 3, col = "black")
    ax1 =qnorm(p1,-1,1.2)
    ay1 =qnorm(p1,1.5,.9)
    points(ax1,ay1,pch=19,col=COLORS["1"])
    segments(ax1,ay1,ax1,10,lwd=.4,col=COLORS["1"])
    segments(ax1,ay1,10,ay1,lwd=.4,col=COLORS["1"])
    
    par(mar = c(4.5, 0.5, 0.5, 0.5))
    
    plot(d_B$y, d_B$x, type = "l", col = COLORS[lab[2]], lwd = 2, 
        ylim = limB, xlim = limY, xlab = "", ylab = "", axes = FALSE)
    polygon(c(0, d_B$y, 0), c(0, d_B$x, 1), col = scales::alpha(COLORS[lab[2]], 
        0.1), border = NA)
    axis(2, at = seq(limB[1], limB[2], length = sub), label = c(NA, 
        seq(limB[1], limB[2], length = sub)[-c(1, sub)], NA))

polygon(c(0,vy2[idx2],0),
        c(min(vx),vx[idx2],max(vx[idx2])),
        col=scales::alpha(colors["B"],.2),
        border=NA)
```

```{r X1_then_X2, fig.height = 5, fig.width = 5, fig.align = "center", dev.args = list(bg = 'transparent'), echo=FALSE, message=FALSE, warning=FALSE}
par(mar=c(2.5,2.5,0,0))
par(mfrow=c(1,1))
b1=3
vx = seq(-5,5,length=6001)
vy1 = dnorm(vx,-1,1.2)*4
vy2 = dnorm(vx,1.5,.9)*4
plot(vx,vy1,col=colors["A"],xlab="",ylab="",axes=FALSE,type="l",ylim=c(0,10))

M1=c(-1,-1+5)
M2=c(1.5,1.5+5)
S1=matrix(c(1,.5,.5,1)*1.2^2,2,2)
S2=matrix(c(1,-.4,-.4,1)*.9^2,2,2)

A  = sqrtm(S1) %*% S2 %*% (sqrtm(S1))
A  = solve(sqrtm(S1)) %*% sqrtm(A) %*% solve((sqrtm(S1)))
T = function(x) as.vector(M2+A%*%(x-M1))

library(mvtnorm)
vx0 = seq(-5,5,length=251)
data.grid <- expand.grid(x=vx0,y=vx0+5)
dgauss1 = matrix(mvtnorm::dmvnorm(data.grid, mean = M1, sigma = S1),length(vx0),length(vx0))
dgauss2 = matrix(mvtnorm::dmvnorm(data.grid, mean = M2, sigma = S2),length(vx0),length(vx0))

contour(vx0,vx0+5,dgauss1,col=colors["A"],add=TRUE)
contour(vx0,vx0+5,dgauss2,col=colors["B"],add=TRUE)
polygon(c(min(vx),vx,max(vx)),
        c(0,vy1,0),
        col=scales::alpha(colors["A"],.2),
        border=NA)
polygon(c(min(vx),vx,max(vx)),
        c(0,vy2,0),
        col=scales::alpha(colors["B"],.2),
        border=NA)
p1= 0.1586553
a1=qnorm(p1,-1,1.2)
a2=qnorm(p1,1.5,.9)
idx1 = which(vx<=a1)
idx2 = which(vx<=a2)
polygon(c(min(vx),vx[idx1],max(vx[idx1])),
        c(0,vy1[idx1],0),
        col=scales::alpha(colors["A"],.2),
        border=NA)
polygon(c(min(vx),vx[idx2],max(vx[idx2])),
        c(0,vy2[idx2],0),
        col=scales::alpha(colors["B"],.2),
        border=NA)
lines(vx,vy2,col=colors["B"])
segments(a1,0,a1,100,col=colors["A"])
segments(a2,0,a2,100,col=colors["B"])
points(a1,b1,pch=19)
axis(1,at = seq(-2,2)*2,labels=NA)
axis(1,at = a1,
     labels=expression(x[0]),
     col.ticks =NA,
     col.axis = colors["A"], line=.5)
axis(1,at = a2,
     labels=bquote(x[1]~"="~mu[1][x]+frac(sigma[1][x],sigma[0][x])~(x[0]-mu[0][x])),
     col.ticks = NA,
     col.axis = colors["B"], line=.5)
axis(1,at = a1,
     labels=NA,
     col.ticks = colors["A"],line = -.5)
axis(1,at = a2,
     labels=NA,
     col.ticks = colors["B"],line = -.5)

####

y = b1 = 3
vx=vx+5
mu1 = M1[2]+S1[1,2]/S1[1,1]*(a1-M1[1])
sig1=sqrt(S1[2,2]-S1[2,1]^2/S1[2,2])
mu2 = M2[2]+S2[1,2]/S2[1,1]*(a2-M2[1])
sig2=sqrt(S2[2,2]-S2[2,1]^2/S2[2,2])
vz1 = dnorm(vx,mu1,sig1)*3
vz2 = dnorm(vx,mu2,sig2)*3
lines(vz1-5,vx,col=colors["A"])

polygon(c(0,vz1,0)-5,
        c(min(vx),vx,max(vx)),
        col=scales::alpha(colors["A"],.2),
        border=NA)
polygon(c(0,vz2,0)-5,
        c(min(vx),vx,max(vx)),
        col=scales::alpha(colors["B"],.2),
        border=NA)

p1 = pnorm(b1,mu1,sig1)
b2=qnorm(p1,mu2,sig2)
idx1 = which(vx<=b1)
idx2 = which(vx<=b2)
polygon(c(0,vz1[idx1],0)-5,
        c(min(vx),vx[idx1],max(vx[idx1])),
        col=scales::alpha(colors["A"],.2),
        border=NA)
polygon(c(0,vz2[idx2],0)-5,
        c(min(vx),vx[idx2],max(vx[idx2])),
        col=scales::alpha(colors["B"],.2),
        border=NA)
lines(vz2-5,vx,col=colors["B"])
segments(-5,b1,100,b1,col=colors["A"])
segments(-5,b2,100,b2,col=colors["B"])
points(a1,b1,pch=19)
axis(2,at = c(0,1,3,4,5)*2,labels=NA)
axis(2,at = b1,
     labels=expression(y[0]),
     col.ticks =NA,
     col.axis = colors["A"], line=.5)
axis(2,at = b2,
     labels=bquote(y[1]),
     col.ticks = NA,
     col.axis = colors["B"], line=.5)
axis(2,at = b1,
     labels=NA,
     col.ticks = colors["A"],line = -.5)
axis(2,at = b2,
     labels=NA,
     col.ticks = colors["B"],line = -.5)
points(a2,b2,pch=19)
segments(a1,b1,a2,b1,lwd=2)
arrows(a2,b1,a2,b2-.1,length=.1,lwd=2)

XpuisY = matrix(c(a1,b1,a2,b2),2,2)
colnames(XpuisY) = c("start","x_then_y")

M1=c(-1,-1+5)
M2=c(1.5,1.5)
S1=matrix(c(1,.5,.5,1)*1.2^2,2,2)
S2=matrix(c(1,-.4,-.4,1)*.9^2,2,2)

AA  = sqrtm(S1) %*% S2 %*% (sqrtm(S1))
AA  = solve(sqrtm(S1)) %*% sqrtm(AA) %*% solve((sqrtm(S1)))
T = function(x) as.vector(M2+AA%*%(x-M1))

optrasnp=T(c(a1,b1))
XYopt = matrix(c(a1,b1,optrasnp[1],optrasnp[2]+5),2,2)
colnames(XYopt) = c("start","OT")

points(optrasnp[1],optrasnp[2]+5,pch=15,col="#C93312")
```

```{r X2_then_X1, fig.height = 5, fig.width = 5, fig.align = "center", dev.args = list(bg = 'transparent'), echo=FALSE, message=FALSE, warning=FALSE}
par(mar=c(2.5,4,0,0))
par(mfrow=c(1,1))
vx = seq(-5,5,length=6001)
vx=vx+5
M1=c(-1,-1+5)
M2=c(1.5,1.5+5)
S1=matrix(c(1,.5,.5,1)*1.2^2,2,2)
S2=matrix(c(1,-.4,-.4,1)*.9^2,2,2)
b1=3
b2=qnorm(pnorm(b1,5-1,1.2),5+1.5,.9)
mu1 = M1[2]+S1[1,2]/S1[1,1]*(b1-M1[1]-5)
sig1=sqrt(S1[2,2]-S1[2,1]^2/S1[2,2])
mu2 = M2[2]+S2[1,2]/S2[1,1]*(b2-M2[1]-5)
sig2=sqrt(S2[2,2]-S2[2,1]^2/S2[2,2])
vy1 = dnorm(vx,mu1,sig1)*3
vy2 = dnorm(vx,mu2,sig2)*3

vz1 = dnorm(vx-5,-1,1.2)*4
vz2 = dnorm(vx-5,1.5,.9)*4

plot(vx,vy1,col=colors["A"],xlab="",ylab="",axes=FALSE,type="l",ylim=c(0,10))
lines(vz1-5,vx,col=colors["A"])
library(mvtnorm)
vx0 = seq(-5,5,length=251)
data.grid <- expand.grid(x=vx0,y=vx0+5)
dgauss1 = matrix(mvtnorm::dmvnorm(data.grid, mean = M1, sigma = S1),length(vx0),length(vx0))
dgauss2 = matrix(mvtnorm::dmvnorm(data.grid, mean = M2, sigma = S2),length(vx0),length(vx0))

contour(vx0+5,vx0+5,dgauss1,col=colors["A"],add=TRUE)
contour(vx0+5,vx0+5,dgauss2,col=colors["B"],add=TRUE)
polygon(c(min(vx),vx,max(vx)),
        c(0,vy1,0),
        col=scales::alpha(colors["A"],.2),
        border=NA)
polygon(c(min(vx),vx,max(vx)),
        c(0,vy2,0),
        col=scales::alpha(colors["B"],.2),
        border=NA)
a1= -2.2
p1=pnorm(a1+5,mu1,sig1)
a2=qnorm(p1,mu2,sig2)
a1=a1+5
idx1 = which(vx<=a1)
idx2 = which(vx<=a2)
polygon(c(min(vx),vx[idx1],max(vx[idx1])),
        c(0,vy1[idx1],0),
        col=scales::alpha(colors["A"],.2),
        border=NA)
polygon(c(min(vx),vx[idx2],max(vx[idx2])),
        c(0,vy2[idx2],0),
        col=scales::alpha(colors["B"],.2),
        border=NA)
lines(vx,vy2,col=colors["B"])
segments(a1,0,a1,100,col=colors["A"])
segments(a2,0,a2,100,col=colors["B"])
points(a1,b1,pch=19)
axis(1,at = 5+seq(-2,2)*2,labels=NA)
axis(1,at = a1,
     labels=expression(x[0]),
     col.ticks =NA,
     col.axis = colors["A"], line=.5)
axis(1,at = a2,
     labels=bquote(x[1]),
     col.ticks = NA,
     col.axis = colors["B"], line=.5)
axis(1,at = a1,
     labels=NA,
     col.ticks = colors["A"],line = -.5)
axis(1,at = a2,
     labels=NA,
     col.ticks = colors["B"],line = -.5)

####

lines(vz1,vx,col=colors["A"])

polygon(c(0,vz1,0),
        c(min(vx),vx,max(vx)),
        col=scales::alpha(colors["A"],.2),
        border=NA)
polygon(c(0,vz2,0),
        c(min(vx),vx,max(vx)),
        col=scales::alpha(colors["B"],.2),
        border=NA)

p1 = pnorm(b1,5-1,1.2)
b2=qnorm(p1,5+1.5,.9)
idx1 = which(vx<=b1)
idx2 = which(vx<=b2)
polygon(c(0,vz1[idx1],0),
        c(min(vx),vx[idx1],max(vx[idx1])),
        col=scales::alpha(colors["A"],.2),
        border=NA)
polygon(c(0,vz2[idx2],0),
        c(min(vx),vx[idx2],max(vx[idx2])),
        col=scales::alpha(colors["B"],.2),
        border=NA)
lines(vz2,vx,col=colors["B"])
segments(0,b1,100,b1,col=colors["A"])
segments(0,b2,100,b2,col=colors["B"])
points(a1,b1,pch=19)
axis(2,at = c(0,1,3,4,5)*2,labels=NA)
axis(2,at = b1,
     labels=expression(y[0]),
     col.ticks =NA,
     col.axis = colors["A"], line=0)
axis(2,at = b2,
     labels=bquote(y[1]~"="~mu[1][y]+frac(sigma[1][y],sigma[0][y])~(y[0]-mu[0][y])),
     col.ticks = NA,
     col.axis = colors["B"], line=.5)
axis(2,at = b1,
     labels=NA,
     col.ticks = colors["A"],line = -.5)
axis(2,at = b2,
     labels=NA,
     col.ticks = colors["B"],line = -.5)
points(a2,b2,pch=19)
segments(a1,b1,a1,b2,lwd=2)
arrows(a1,b2,a2-.1,b2,length=.1,lwd=2)

YpuisX = matrix(c(a1,b1,a2,b2),2,2)
colnames(YpuisX) = c("start","y_then_x")

M1=c(-1,-1)
M2=c(1.5,1.5)
S1=matrix(c(1,.5,.5,1)*1.2^2,2,2)
S2=matrix(c(1,-.4,-.4,1)*.9^2,2,2)

AA  = sqrtm(S1) %*% S2 %*% (sqrtm(S1))
AA  = solve(sqrtm(S1)) %*% sqrtm(AA) %*% solve((sqrtm(S1)))
T = function(x) as.vector(M2+AA%*%(x-M1))
optrasnp=T(c(a1-5,b1-5))
points(optrasnp[1]+5,optrasnp[2]+5,pch=15,col="#C93312")
```

```{r aaai-ellipse-1, fig.height = 5, fig.width = 5, fig.align = "center", dev.args = list(bg = 'transparent'), echo=FALSE, message=FALSE, warning=FALSE}

angle = function(theta,
                 A = c(-2.2,-2)){
  
  R = matrix(c(cos(theta),sin(theta),
               -sin(theta),cos(theta)),2,2)
M1=c(-1,-1)
M2=c(1.5,1.5)
S1=matrix(c(1,.5,.5,1)*1.2^2,2,2)
S2=matrix(c(1,-.4,-.4,1)*.9^2,2,2)


M1 = as.vector(R%*%M1)
M2 = as.vector(R%*%M2)
S1 = t(R)%*%S1%*%R
S2 = t(R)%*%S2%*%R
A =  as.vector(R %*%A)

a1 = A[1]
b1 = A[2]
a2 = qnorm(pnorm(a1,M1[1],sqrt(S1[1,1])),
                M2[1],sqrt(S2[1,1]))
mu1 = M1[2]+S1[1,2]/S1[1,1]*(a1-M1[1])
sig1=sqrt(S1[2,2]-S1[2,1]^2/S1[2,2])
mu2 = M2[2]+S2[1,2]/S2[1,1]*(a2-M2[1])
sig2=sqrt(S2[2,2]-S2[2,1]^2/S2[2,2])
p1 = pnorm(b1,mu1,sig1)
b2=qnorm(p1,mu2,sig2)
B = c(a2,b2)
return(c(
as.vector(t(R)%*%A),
as.vector(t(R)%*%B)))
}

M1=c(-1,-1)
M2=c(1.5,1.5)
S1=matrix(c(1,.5,.5,1)*1.2^2,2,2)
S2=matrix(c(1,-.4,-.4,1)*.9^2,2,2)

A = c(-2.2,-2)

par(mfrow=c(1,1),mar=c(.5,.5,0,0))

library(mvtnorm)
vx0 = seq(-5,5,length=251)
data.grid <- expand.grid(x=vx0,y=vx0)
dgauss1 = matrix(mvtnorm::dmvnorm(data.grid, mean = M1, sigma = S1),length(vx0),length(vx0))
dgauss2 = matrix(mvtnorm::dmvnorm(data.grid, mean = M2, sigma = S2),length(vx0),length(vx0))

contour(vx0,vx0,dgauss1,col=colors["A"],xlim=c(-5,5),ylim=c(-5,5),axes=FALSE)
contour(vx0,vx0,dgauss2,col=colors["B"],add=TRUE)

segments(A[1],-5,A[1],100,col=colors["A"])
segments(-5,A[2],100,A[2],col=colors["A"])
points(A[1],A[2],pch=19)
axis(1,at = c(0,1,2,3,4,5)*2-5,labels=NA)
axis(2,at = c(0,1,2,3,4,5)*2-5,labels=NA)

MANGLE = Vectorize(angle)(seq(0,2*pi,length=100))
lines(MANGLE[3,],MANGLE[4,])
m=angle(0,c(-2.2,-2)); points(m[3],m[4],pch=19)
m=angle(pi/2,c(-2.2,-2)); points(m[3],m[4],pch=19)

T = function(x) as.vector(M2+AA%*%(x-M1))
optrasnp=T(c(A[1],A[2]))
points(optrasnp[1],optrasnp[2],pch=15,col="#C93312")

A = c(-2.2,.5)

par(mfrow=c(1,1),mar=c(.5,.5,0,0))

library(mvtnorm)
vx0 = seq(-5,5,length=251)
data.grid <- expand.grid(x=vx0,y=vx0)
dgauss1 = matrix(mvtnorm::dmvnorm(data.grid, mean = M1, sigma = S1),length(vx0),length(vx0))
dgauss2 = matrix(mvtnorm::dmvnorm(data.grid, mean = M2, sigma = S2),length(vx0),length(vx0))

contour(vx0,vx0,dgauss1,col=colors["A"],xlim=c(-5,5),ylim=c(-5,5),axes=FALSE)
contour(vx0,vx0,dgauss2,col=colors["B"],add=TRUE)

segments(A[1],-5,A[1],100,col=colors["A"])
segments(-5,A[2],100,A[2],col=colors["A"])
points(A[1],A[2],pch=19)
axis(1,at = c(0,1,2,3,4,5)*2-5,labels=NA)
axis(2,at = c(0,1,2,3,4,5)*2-5,labels=NA)

MANGLE = Vectorize(function(x) angle(x,c(-2.2,.5)))(seq(0,2*pi,length=100))
lines(MANGLE[3,],MANGLE[4,])
m=angle(0,c(-2.2,.5)); points(m[3],m[4],pch=19)
m=angle(pi/2,c(-2.2,.5)); points(m[3],m[4],pch=19)

AA  = sqrtm(S1) %*% S2 %*% (sqrtm(S1))
AA  = solve(sqrtm(S1)) %*% sqrtm(AA) %*% solve((sqrtm(S1)))
T = function(x) as.vector(M2+AA%*%(x-M1))
optrasnp=T(c(A[1],A[2]))
points(optrasnp[1],optrasnp[2],pch=15,col="#C93312")

par(mfrow=c(1,1),mar=c(.5,.5,0,0))
MANGLE = Vectorize(function(x) angle(x,c(-2.2,.5)))(seq(0,2*pi,length=100))
plot(MANGLE[3,],MANGLE[4,],type="b",cex=.6,xlab="",ylab="")

MANGLE = Vectorize(function(x) angle(x,c(-2.2,-1)))(seq(0,2*pi,length=100))
plot(MANGLE[3,],MANGLE[4,],type="b",cex=.6,xlab="",ylab="")

MANGLE = Vectorize(function(x) angle(x,c(0,0)))(seq(0,2*pi,length=100))
plot(MANGLE[3,],MANGLE[4,],type="b",cex=.6,xlab="",ylab="")

MANGLE = Vectorize(function(x) angle(x,c(1,4)))(seq(0,2*pi,length=100))
plot(MANGLE[3,],MANGLE[4,],type="b",cex=.6,xlab="",ylab="")
```
